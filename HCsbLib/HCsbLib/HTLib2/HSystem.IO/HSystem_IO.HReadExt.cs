using System;
using System.Collections.Generic;
using System.Security.AccessControl;
using System.Text;
using System.Runtime.CompilerServices;
using System.IO;

namespace HTLib2
{
    using IList       = System.Collections.IList;
    using IDictionary = System.Collections.IDictionary;
    public partial struct HBinaryReader
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1               >(out Tuple<T1               > tuple  ) { T1 t1; _Read(out t1);                                                                                                               tuple = new Tuple<T1               >(t1               ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2            >(out Tuple<T1,T2            > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2);                                                                                         tuple = new Tuple<T1,T2            >(t1,t2            ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3         >(out Tuple<T1,T2,T3         > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3);                                                                   tuple = new Tuple<T1,T2,T3         >(t1,t2,t3         ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4      >(out Tuple<T1,T2,T3,T4      > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3); T4 t4; _Read(out t4);                                             tuple = new Tuple<T1,T2,T3,T4      >(t1,t2,t3,t4      ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5   >(out Tuple<T1,T2,T3,T4,T5   > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3); T4 t4; _Read(out t4); T5 t5; _Read(out t5);                       tuple = new Tuple<T1,T2,T3,T4,T5   >(t1,t2,t3,t4,t5   ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5,T6>(out Tuple<T1,T2,T3,T4,T5,T6> tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3); T4 t4; _Read(out t4); T5 t5; _Read(out t5); T6 t6; _Read(out t6); tuple = new Tuple<T1,T2,T3,T4,T5,T6>(t1,t2,t3,t4,t5,t6); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1               >(out ValueTuple<T1               > tuple  ) { T1 t1; _Read(out t1);                                                                                                               tuple = new ValueTuple<T1               >(t1               ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2            >(out ValueTuple<T1,T2            > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2);                                                                                         tuple = new ValueTuple<T1,T2            >(t1,t2            ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3         >(out ValueTuple<T1,T2,T3         > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3);                                                                   tuple = new ValueTuple<T1,T2,T3         >(t1,t2,t3         ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4      >(out ValueTuple<T1,T2,T3,T4      > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3); T4 t4; _Read(out t4);                                             tuple = new ValueTuple<T1,T2,T3,T4      >(t1,t2,t3,t4      ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5   >(out ValueTuple<T1,T2,T3,T4,T5   > tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3); T4 t4; _Read(out t4); T5 t5; _Read(out t5);                       tuple = new ValueTuple<T1,T2,T3,T4,T5   >(t1,t2,t3,t4,t5   ); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5,T6>(out ValueTuple<T1,T2,T3,T4,T5,T6> tuple  ) { T1 t1; _Read(out t1); T2 t2; _Read(out t2); T3 t3; _Read(out t3); T4 t4; _Read(out t4); T5 t5; _Read(out t5); T6 t6; _Read(out t6); tuple = new ValueTuple<T1,T2,T3,T4,T5,T6>(t1,t2,t3,t4,t5,t6); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1               >(out List<Tuple<T1               >>  values) { int leng = reader.ReadInt32(); values = new List<Tuple<T1               >>(leng); for(int i=0; i<leng; i++) { Tuple<T1               > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2            >(out List<Tuple<T1,T2            >>  values) { int leng = reader.ReadInt32(); values = new List<Tuple<T1,T2            >>(leng); for(int i=0; i<leng; i++) { Tuple<T1,T2            > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3         >(out List<Tuple<T1,T2,T3         >>  values) { int leng = reader.ReadInt32(); values = new List<Tuple<T1,T2,T3         >>(leng); for(int i=0; i<leng; i++) { Tuple<T1,T2,T3         > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4      >(out List<Tuple<T1,T2,T3,T4      >>  values) { int leng = reader.ReadInt32(); values = new List<Tuple<T1,T2,T3,T4      >>(leng); for(int i=0; i<leng; i++) { Tuple<T1,T2,T3,T4      > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5   >(out List<Tuple<T1,T2,T3,T4,T5   >>  values) { int leng = reader.ReadInt32(); values = new List<Tuple<T1,T2,T3,T4,T5   >>(leng); for(int i=0; i<leng; i++) { Tuple<T1,T2,T3,T4,T5   > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5,T6>(out List<Tuple<T1,T2,T3,T4,T5,T6>>  values) { int leng = reader.ReadInt32(); values = new List<Tuple<T1,T2,T3,T4,T5,T6>>(leng); for(int i=0; i<leng; i++) { Tuple<T1,T2,T3,T4,T5,T6> value; Read(out value); values.Add(value); } }

        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1               >(out      Tuple<T1               >[] values) { int leng = reader.ReadInt32(); values = new      Tuple<T1               > [leng]; for(int i=0; i<leng; i++) { Tuple<T1               > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2            >(out      Tuple<T1,T2            >[] values) { int leng = reader.ReadInt32(); values = new      Tuple<T1,T2            > [leng]; for(int i=0; i<leng; i++) { Tuple<T1,T2            > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3         >(out      Tuple<T1,T2,T3         >[] values) { int leng = reader.ReadInt32(); values = new      Tuple<T1,T2,T3         > [leng]; for(int i=0; i<leng; i++) { Tuple<T1,T2,T3         > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4      >(out      Tuple<T1,T2,T3,T4      >[] values) { int leng = reader.ReadInt32(); values = new      Tuple<T1,T2,T3,T4      > [leng]; for(int i=0; i<leng; i++) { Tuple<T1,T2,T3,T4      > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5   >(out      Tuple<T1,T2,T3,T4,T5   >[] values) { int leng = reader.ReadInt32(); values = new      Tuple<T1,T2,T3,T4,T5   > [leng]; for(int i=0; i<leng; i++) { Tuple<T1,T2,T3,T4,T5   > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5,T6>(out      Tuple<T1,T2,T3,T4,T5,T6>[] values) { int leng = reader.ReadInt32(); values = new      Tuple<T1,T2,T3,T4,T5,T6> [leng]; for(int i=0; i<leng; i++) { Tuple<T1,T2,T3,T4,T5,T6> value; Read(out value); values[i] = value; } }

        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1               >(out List<ValueTuple<T1               >>  values) { int leng = reader.ReadInt32(); values = new List<ValueTuple<T1               >>(leng); for(int i=0; i<leng; i++) { ValueTuple<T1               > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2            >(out List<ValueTuple<T1,T2            >>  values) { int leng = reader.ReadInt32(); values = new List<ValueTuple<T1,T2            >>(leng); for(int i=0; i<leng; i++) { ValueTuple<T1,T2            > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3         >(out List<ValueTuple<T1,T2,T3         >>  values) { int leng = reader.ReadInt32(); values = new List<ValueTuple<T1,T2,T3         >>(leng); for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3         > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4      >(out List<ValueTuple<T1,T2,T3,T4      >>  values) { int leng = reader.ReadInt32(); values = new List<ValueTuple<T1,T2,T3,T4      >>(leng); for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3,T4      > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5   >(out List<ValueTuple<T1,T2,T3,T4,T5   >>  values) { int leng = reader.ReadInt32(); values = new List<ValueTuple<T1,T2,T3,T4,T5   >>(leng); for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3,T4,T5   > value; Read(out value); values.Add(value); } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5,T6>(out List<ValueTuple<T1,T2,T3,T4,T5,T6>>  values) { int leng = reader.ReadInt32(); values = new List<ValueTuple<T1,T2,T3,T4,T5,T6>>(leng); for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3,T4,T5,T6> value; Read(out value); values.Add(value); } }

        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1               >(out      ValueTuple<T1               >[] values) { int leng = reader.ReadInt32(); values = new      ValueTuple<T1               > [leng]; for(int i=0; i<leng; i++) { ValueTuple<T1               > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2            >(out      ValueTuple<T1,T2            >[] values) { int leng = reader.ReadInt32(); values = new      ValueTuple<T1,T2            > [leng]; for(int i=0; i<leng; i++) { ValueTuple<T1,T2            > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3         >(out      ValueTuple<T1,T2,T3         >[] values) { int leng = reader.ReadInt32(); values = new      ValueTuple<T1,T2,T3         > [leng]; for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3         > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4      >(out      ValueTuple<T1,T2,T3,T4      >[] values) { int leng = reader.ReadInt32(); values = new      ValueTuple<T1,T2,T3,T4      > [leng]; for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3,T4      > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5   >(out      ValueTuple<T1,T2,T3,T4,T5   >[] values) { int leng = reader.ReadInt32(); values = new      ValueTuple<T1,T2,T3,T4,T5   > [leng]; for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3,T4,T5   > value; Read(out value); values[i] = value; } }
        [MethodImpl(MethodImplOptions.AggressiveInlining)] public void Read<T1,T2,T3,T4,T5,T6>(out      ValueTuple<T1,T2,T3,T4,T5,T6>[] values) { int leng = reader.ReadInt32(); values = new      ValueTuple<T1,T2,T3,T4,T5,T6> [leng]; for(int i=0; i<leng; i++) { ValueTuple<T1,T2,T3,T4,T5,T6> value; Read(out value); values[i] = value; } }
    }
}
