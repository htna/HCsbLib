<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dnAnalytics</name>
    </assembly>
    <members>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.AbstractHouseholder">
            <summary>
            Computes the QR decomposition of a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> using the Householder method.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.AbstractHouseholder.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs the QR object for the given matrix.
            </summary>
            <param name="matrix">The matrix to decompose.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.AbstractHouseholder.Q">
            <summary>
            Returns the orthogonal Q matrix.
            </summary>
            <returns>The orthogonal Q matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.AbstractHouseholder.R">
            <summary>
            Returns the upper triangular factor R.
            </summary>
            <returns>The upper triangular factor R.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.AbstractHouseholder.IsFullRank">
            <summary>
            Determines whether the matrix is full rank or not.
            </summary>
            <returns><b>true</b> if the matrix is full rank; otherwise <b>false</b>.</returns>         
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.AbstractHouseholder.Determinant">
            <summary>Calculates the determinant (absolute value) of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.Cholesky">
            <summary>
            Computes the Cholesky factorization of a symmetric, positive definite <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.
            </summary>
            <remarks>Cholesky factorization decomposes symmetric, positive definite matrices.
            This class does not check whether a matrix is symmetric or not. It only uses the upper
            triangle of the matrix to compute the decomposition.</remarks>
            <!-- Failed to insert some or all of included XML --><include file="../../../../FSharpExamples/MultiVariateNormal.xml" path="example"/> 
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs an Cholesky object for the given matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.IsPositiveDefinite">
            <summary>Return a value indicating whether the matrix is positive definite.</summary>
            <returns><b>true</b> if the matrix is positive definite; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.Factor">
            <summary>Returns the Cholesky factored matrix (lower triangular form).</summary>
            <returns>The lower triangular Cholesky factored matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">If the matrix is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.Determinant">
            <summary>Calculates the determinant of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">If the matrix is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.Solve(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.Solve(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>, <b>x</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Cholesky.Solve(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>x</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.DenseHouseholder.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.Decomposition.DenseHouseholder"/> class.
            </summary>
            <param name="matrix">The matrix to decompose.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.DenseHouseholder.DoCompute">
            <summary>
            Computes the decomposition.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt">
            <summary>
            Creates an orthogonal matrix using the modified Gram-Schmidt method.
            </summary>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.IQR">
            <summary>
            Computes the QR decomposition of a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.Q">
            <summary>
            Returns the orthogonal Q matrix.
            </summary>
            <returns>The orthogonal Q matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.R">
            <summary>
            Returns the upper triangular factor R.
            </summary>
            <returns>The upper triangular factor R.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.IsFullRank">
            <summary>
            Determines whether the matrix is full rank or not.
            </summary>
            <returns><b>true</b> if the matrix is full rank; otherwise <b>false</b>.</returns>         
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.Determinant">
            <summary>Calculates the determinant (absolute value) of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.Solve(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.Solve(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>, <b>x</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.IQR.Solve(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>x</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs the GramSchmidt object for the given matrix.
            </summary>
            <param name="matrix">The matrix to decompose.</param>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.Q">
            <summary>
            Returns the orthogonal Q matrix.
            </summary>
            <returns>The orthogonal Q matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.R">
            <summary>
            Returns the upper triangular factor R.
            </summary>
            <returns>The upper triangular factor R.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.IsFullRank">
            <summary>
            Determines whether the matrix is full rank or not.
            </summary>
            <returns><b>true</b> if the matrix is full rank; otherwise <b>false</b>.</returns>         
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.Determinant">
            <summary>Calculates the determinant (absolute value) of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.Solve(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <returns>
            The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.Solve(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>
            The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>, <b>x</b>.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.GramSchmidt.Solve(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>x</b>.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.Householder">
            <summary>
            Computes the QR decomposition of a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> using the Householder method.
            </summary>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs the QR object for the given matrix.
            </summary>
            <param name="matrix">The matrix to decompose.</param>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.Q">
            <summary>
            Returns the orthogonal Q matrix.
            </summary>
            <returns>The orthogonal Q matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.R">
            <summary>
            Returns the upper triangular factor R.
            </summary>
            <returns>The upper triangular factor R.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.IsFullRank">
            <summary>
            Determines whether the matrix is full rank or not.
            </summary>
            <returns><b>true</b> if the matrix is full rank; otherwise <b>false</b>.</returns>         
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.Determinant">
            <summary>Calculates the determinant (absolute value) of the matrix.</summary>
            <returns>The determinant of the matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.Solve(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <returns>
            The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.Solve(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>
            The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>, <b>x</b>.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Householder.Solve(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>x</b>.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.LU">
            <summary>
            Calculates the LU decomposition of matrix.
            </summary>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs a LU form an <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> object.
            </summary>
            <param name="matrix">The matrix to use.</param>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.IsSingular">
            <summary>
            Returns a value indicating whether the matrix is singular.
            </summary>
            <returns><b>true</b> if the matrix is singular; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.LowerFactor">
            <summary>
            Returns the lower factor of the factorization.
            </summary>
            <returns>The lower factor of the factorization.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.UpperFactor">
            <summary>
            Returns the upper factor of the factorization.
            </summary>
            <returns>The upper factor of the factorization.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Determinant">
            <summary>
            The determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Pivots">
            <summary>
            Returns an <b>int</b> array indicating which rows were interchanged during factorization.
            Row i was interchanged with row pivots[i].</summary>
            <value>An <b>int</b> array indicating which rows were interchanged during factorization.</value>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Inverse">
            <summary>
            Returns the inverse of the matrix.
            </summary>
            <returns>The inverse of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Solve(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Solve(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>, <b>x</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.LU.Solve(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>x</b>.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Decomposition.Svd">
            <summary>
            Class for computing the Singular Value Decomposition of a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.
            </summary>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.#ctor(dnAnalytics.LinearAlgebra.Matrix,System.Boolean)">
            <summary>
            Constructs an Svd object for the given matrix.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Whether to compute the left and right singular vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <b>null</b>.</exception>
            <remarks>The actual decomposition is not done until one of the class'
            methods is invoked.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Converged">
            <summary>
            Returns whether the decomposition converged or not.
            </summary>
            <returns><b>true</b> if the decomposition converged; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Norm2">
            <summary>Returns the two norm of the <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.</summary>
            <returns>The 2-norm of the <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.</returns>     
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.ConditionNumber">
            <summary>Returns the condition number <b>max(S) / min(S)</b>.</summary>
            <returns>The condition number.</returns>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Rank">
            <summary>Returns the effective numerical matrix rank.</summary>
            <returns>The number of non-negligible singular values.</returns>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.U">
            <summary>Returns the left singular vectors as a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.</summary>
            <returns>The left singular vectors. The matrix will be <b>null</b>,
            if <b>computeVectors</b> in the constructor is set to false.</returns>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.VT">
            <summary>Returns the right singular vectors as a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.</summary>
            <returns>The right singular vectors. The matrix will be <b>null</b>,
            if <b>computeVectors</b> in the constructor is set to false.</returns>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
            <remarks>This is the transpose of the V matrix.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.W">
            <summary>Returns the singular values as a diagonal <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.</summary>
            <returns>The singular values as a diagonal <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.</returns>        
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.S">
            <summary>Returns the singular values as a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.</summary>
            <returns>the singular values as a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.</returns>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">The decomposition failed to converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Solve(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
             Solves a system of linear equations, <b>AX = B</b>.
            </summary>
            <param name="input">The right hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>X</b>.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Solve(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <returns>The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>, <b>x</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Decomposition.Svd.Solve(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>, <b>x</b>.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixReader">
            <summary>
            Creates a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a delimited text file. If the user does not
            specify a delimiter, then any whitespace is used.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.SingleMatrixReader">
            <summary>
            Base class to read a single <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a file or stream.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.ISingleMatrixReader">
            <summary>
            Interface to read a single <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a file or stream.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixReader.ReadMatrix(System.String,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a file.
            </summary>
            <param name="file">The file to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>A <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> containing the data from the file. <see langword="null"/> is returned if the file is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">If the file doesn't exist.</exception>
            <exception cref="T:System.FormatException">If a value is not a number or not in a valid format.</exception>
            <exception cref="T:System.OverflowException">If a value represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixReader.ReadMatrix(System.IO.Stream,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">If a value is not a number or not in a valid format.</exception>
            <exception cref="T:System.OverflowException">If a value represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixReader.ReadMatrix(System.String,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a file.
            </summary>
            <param name="file">The file to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>A <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> containing the data from the file. <see langword="null"/> is returned if the file is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="file"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.IOException">If the file doesn't exist.</exception>
            <exception cref="T:System.FormatException">If a value is not a number or not in a valid format.</exception>
            <exception cref="T:System.OverflowException">If a value represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixReader.ReadMatrix(System.IO.Stream,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">If a value is not a number or not in a valid format.</exception>
            <exception cref="T:System.OverflowException">If a value represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixReader.DoReadMatrix(System.IO.Stream,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Subclasses override this method to do the actual reading.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixReader.#ctor">
            <summary>
            Constructs a <strong>DelimitedMatrixReader</strong> using any whitespace as a delimiter.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixReader.#ctor(System.Char)">
            <summary>
            Constructs a <strong>DelimitedMatrixReader</strong> using the given delimiter.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixReader.#ctor(System.String)">
            <summary>
            Constructs a <strong>DelimitedMatrixReader</strong> using the given delimiter.
            </summary>
            <param name="delimiter">The delimiter to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="delimiter"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixReader.DoReadMatrix(System.IO.Stream,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Performs the actual reading.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>
            A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.
            </returns>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixWriter">
            <summary>
            Writes an <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to delimited text file. If the user does not
            specify a delimiter, a tab separator is used.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter">
            <summary>
            Base class to write a single <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to a file or stream.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter">
            <summary>
            Interface to write a single <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from a file or stream.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given file. If the file already exists, 
            the file will be overwritten.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="file">The file to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="file"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.String,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given file. If the file already exists, 
            the file will be overwritten.
            </summary>
            <param name="matrix">the matrix to write.</param>
            <param name="file">The file to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="file"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.Stream)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given stream.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.Stream,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given stream.
            </summary>
            <param name="matrix">The <see cref="T:System.IO.TextWriter"/> to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given <b>TextWriter</b>.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.ISingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given <b>TextWriter</b>.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given file. If the file already exists, 
            the file will be overwritten.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="file">The file to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="file"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.String,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given file. If the file already exists, 
            the file will be overwritten.
            </summary>
            <param name="matrix">the matrix to write.</param>
            <param name="file">The file to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="file"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.Stream)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given stream.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.Stream,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given stream.
            </summary>
            <param name="matrix">The <see cref="T:System.IO.TextWriter"/> to write.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given <b>TextWriter</b>.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given <b>TextWriter</b>.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.SingleMatrixWriter.DoWriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Subclasses must implement this method to do the actually writing.
            </summary>
            <param name="matrix">The matrix to serialize.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The format for the new matrix.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixWriter.#ctor">
            <summary>
            Constructs a <b>DelimitedMatrixWriter</b> using a comma as the delimiter.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixWriter.#ctor(System.Char)">
            <summary>
            Constructs a <b>DelimitedMatrixWriter</b> using the given delimiter.
            </summary>
            <param name="delimiter">the delimiter to use.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixWriter.#ctor(System.String)">
            <summary>
            Constructs a <b>DelimitedMatrixWriter</b> using the given delimiter.
            </summary>
            <param name="delimiter">the delimiter to use.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.DelimitedMatrixWriter.DoWriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the given <b>TextWriter</b>.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The format to use on each element.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="writer"/> is null.</exception>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.IMatrixReader">
            <summary>
            Interface for reading matrices from a file.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrix">
            <summary>
            Reads the first matrix from the file or stream.
            </summary>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrix(dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads the first matrix from the file or stream and returns it with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>.
            </summary>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrix(System.String)">
            <summary>
            Reads the named matrix from the file or stream.
            </summary>
            <param name="matrixName">The name of the matrix to read.</param>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned. <see langword="null"/> is returned if a matrix with the requests name doesn't exist.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrix(System.String,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads the named matrix from the file or stream and returns it with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>.
            </summary>
            <param name="matrixName">The name of the matrix to read.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned. <see langword="null"/> is returned if a matrix with the requests name doesn't exist.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrices">
            <summary>
            Reads all matrices from the file or stream.
            </summary>
            <returns>All matrices from the file or stream.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrices(dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads all matrices from the file or stream and returns them with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>
            </summary>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrices.</param>
            <returns>All matrices from the file or stream.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrices(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads the named matrices from the file or stream.
            </summary>
            <param name="names">The names of the matrices to retrieve.</param>
            <returns>The named matrices from the file or stream.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixReader.ReadMatrices(System.Collections.Generic.IEnumerable{System.String},dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads the named matrices from the file or stream and returns them with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>.
            </summary>
            <param name="names">The names of the matrices to retrieve.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrices.</param>
            <returns>The named matrices from the file or stream.</returns>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.IMatrixWriter">
            <summary>
            Interface to write a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to a file or stream.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the file.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="name">The name of the matrix to store in the file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.IMatrixWriter.WriteMatrices(System.Collections.Generic.IList{dnAnalytics.LinearAlgebra.Matrix},System.Collections.Generic.IList{System.String})">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the file. 
            </summary>
            <param name="matrices">The matrices to write.</param>
            <param name="names">The names of the matrices to store in the file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrices"/> or <paramref name="names"/> is null.</exception>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader">
            <summary>
            Creates matrices from Matlab files.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="filename">Name of the file to read matrices from.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader"/> class.
            </summary>
            <param name="stream">The stream to reader matrices from.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrix">
            <summary>
            Reads the first matrix from the file or stream.
            </summary>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrix(dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads the first matrix from the file or stream and returns it with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>.
            </summary>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrix(System.String)">
            <summary>
            Reads the named matrix from the file or stream.
            </summary>
            <param name="matrixName">The name of the matrix to read.</param>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned. <see langword="null"/> is returned if a matrix with the requests name doesn't exist.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrix(System.String,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads the named matrix from the file or stream and returns it with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>.
            </summary>
            <param name="matrixName">The name of the matrix to read.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>
            If the matrix is stored as a sparse matrix, then a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> is returned. Otherwise, a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>
            is returned. <see langword="null"/> is returned if a matrix with the requests name doesn't exist.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrices">
            <summary>
            Reads all matrices from the file or stream.
            </summary>
            <returns>All matrices from the file or stream.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrices(dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads all matrices from the file or stream and returns them with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>
            </summary>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrices.</param>
            <returns>All matrices from the file or stream.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrices(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads the named matrices from the file or stream.
            </summary>
            <param name="names">The names of the matrices to retrieve.</param>
            <returns>
            The named matrices from the file or stream.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixReader.ReadMatrices(System.Collections.Generic.IEnumerable{System.String},dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Reads the named matrices from the file or stream and returns them with the requested <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/>.
            </summary>
            <param name="names">The names of the matrices to retrieve.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrices.</param>
            <returns>
            The named matrices from the file or stream.
            </returns>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter">
            <summary>
            Writes matrices to a Matlab file.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter"/> class.
            </summary>
            <param name="filename">The name of the Matlab file to save the matrices to.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter.WriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.String)">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the file. 
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="name">The name of the matrix to store in the file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrix"/> or <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter.WriteMatrices(System.Collections.Generic.IList{dnAnalytics.LinearAlgebra.Matrix},System.Collections.Generic.IList{System.String})">
            <summary>
            Writes the given <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to the file.
            </summary>
            <param name="matrices">The matrices to write.</param>
            <param name="names">The names of the matrices to store in the file.</param>
            <exception cref="T:System.ArgumentNullException">If either <paramref name="matrices"/> or <paramref name="names"/> is null.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatlabMatrixWriter.Close">
            <summary>
            Closes the stream the being written to.
            </summary>
            <remarks>Calls <see cref="M:System.IDisposable.Dispose"/>.</remarks>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.StorageFormat">
            <summary>
            Enumeration of the different DenseMatrix Market storage formats.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.StorageFormat.General">
            <summary>
            A standard matrix with no special properties.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.StorageFormat.Symmetric">
            <summary>
            A square, symmetric matrix, <b>matrix[i,j] == matrix[j,i]</b>.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.StorageFormat.Hermitian">
            <summary>
            A square, Hermitian matrix, <b>matrix[i,j] == matrix[j,i].Conjugate</b>.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.StorageFormat.SkewSymmetric">
            <summary>
            A square, skew-symmetric matrix, <b>matrix[i,j] == -matrix[j,i]</b>.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.DataType">
            <summary>
            Enumeration of the different data types DenseMatrix Market files support. 
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.DataType.Real">
            <summary>
            The matrix is real. DenseMatrix entries are represented by a single double.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.DataType.Integer">
            <summary>
             The matrix has only integer entries. DenseMatrix entries are represented by a single integer. 
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.DataType.Complex">
            <summary>
            The matrix is complex. DenseMatrix entries are represented by two doubles, 
            the first giving the real part and the second the imaginary part.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.DataType.Pattern">
            <summary>
            Only the matrix nonzero pattern is provided. DenseMatrix entries are omitted (only the nonzero pattern is supplied). 
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.ExchangeFormat">
            <summary>
            Enumeration of the DenseMatrix Market exchange formats.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.ExchangeFormat.Array">
            <summary>
            A file format suitable for representing general dense matrices. All entries are provided in a predefined (column oriented) order.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.ExchangeFormat.Coordinate">
            <summary>
            A file format suitable for representing general sparse matrices. Only nonzero entries 
            are provided, and the coordinates of each nonzero entry are given explicitly.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.MatrixMarketReader">
            <summary>
            Creates matrices from Matrix Market files.
            </summary>
            <remarks>see <a href="http://math.nist.gov/MatrixMarket/formats.html">http://math.nist.gov/MatrixMarket/formats.html</a> for more information.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketReader.ArrayReader(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextReader,dnAnalytics.LinearAlgebra.IO.StorageFormat,System.Int32)">
            <summary>
            Reads in a matrix market file using an array layout.
            </summary>
            <param name="ret">The matrix to fill.</param>
            <param name="reader">The TextReader to read from.</param>
            <param name="format">The storage format to use.</param>
            <param name="rows">The number of rows.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketReader.CoordinateReader(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextReader,dnAnalytics.LinearAlgebra.IO.StorageFormat,dnAnalytics.LinearAlgebra.IO.DataType)">
            <summary>
            Reads in a matrix market file using a coordinate layout.
            </summary>
            <param name="ret">The matrix to fill.</param>
            <param name="reader">The TextReader to use.</param>
            <param name="format">The storage format.</param>
            <param name="type">The data type.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketReader.DoReadMatrix(System.IO.Stream,dnAnalytics.LinearAlgebra.IO.StorageType)">
            <summary>
            Performs the actual reading.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the matrix from.</param>
            <param name="storageType">The <see cref="T:dnAnalytics.LinearAlgebra.IO.StorageType"/> for the new matrix.</param>
            <returns>
            A matrix containing the data from the <see cref="T:System.IO.Stream"/>. <see langword="null"/> is returned if the <see cref="T:System.IO.Stream"/> is empty.
            </returns>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter">
            <summary>
            Writes an <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> to a DenseMatrix Market formatted file.
            </summary>
            <remarks>see <a href="http://math.nist.gov/MatrixMarket/formats.html">http://math.nist.gov/MatrixMarket/formats.html</a> for more information.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter.#ctor(dnAnalytics.LinearAlgebra.IO.ExchangeFormat,dnAnalytics.LinearAlgebra.IO.DataType)">
            <summary>
            Constructs a <b>MatrixMarketWriter</b> with the given <see cref="T:dnAnalytics.LinearAlgebra.IO.ExchangeFormat"/> and <see cref="T:dnAnalytics.LinearAlgebra.IO.DataType"/>.
            </summary>
            <param name="format">The exchange format to use.</param>
            <param name="type">The data type to use.</param>
            <exception cref="T:System.NotSupportedException">If <paramref name="type"/> is a <see cref="F:dnAnalytics.LinearAlgebra.IO.DataType.Complex"/>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="format"/> is a <see cref="F:dnAnalytics.LinearAlgebra.IO.ExchangeFormat.Array"/> and 
            <paramref name="type"/> is a <see cref="F:dnAnalytics.LinearAlgebra.IO.DataType.Pattern"/>. They are incompatible options.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter.#ctor(dnAnalytics.LinearAlgebra.IO.ExchangeFormat,dnAnalytics.LinearAlgebra.IO.DataType,System.Double)">
            <summary>
            Constructs a <b>MatrixMarketWriter</b> with the given <see cref="T:dnAnalytics.LinearAlgebra.IO.ExchangeFormat"/> and <see cref="T:dnAnalytics.LinearAlgebra.IO.DataType"/>.
            </summary>
            <param name="format">The exchange format to use.</param>
            <param name="type">The data type to use.</param>
            <param name="epsilon">Only used with <see cref="F:dnAnalytics.LinearAlgebra.IO.DataType.Pattern"/>. Determines which values are not equal to zero, 
            <b>System.Math.Abs(value) &gt; epsilon;</b></param>
            <remarks><see cref="F:dnAnalytics.LinearAlgebra.IO.DataType.Complex"/> is not supported.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter.WriteArray(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Writes a matrix to the given TextWriter with the Array layout.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The TextWriter to use.</param>
            <param name="format">The number format to use.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter.WriteCoordinatePattern(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter)">
            <summary>
            Writes a matrix to the given TextWriter with a coordinate layout, but doesn't
            write out the data (Pattern data type).
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The TextWriter to use</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter.WriteCoordinate(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Writes a matrix to the given TextWriter with a coordinate layout.
            </summary>
            <param name="matrix">The matrix to write.</param>
            <param name="writer">The TextWriter to use</param>
            <param name="format">The number format to use.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.IO.MatrixMarketWriter.DoWriteMatrix(dnAnalytics.LinearAlgebra.Matrix,System.IO.TextWriter,System.String)">
            <summary>
            Does the actual writing of the matrix.
            </summary>
            <param name="matrix">The matrix to serialize.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the matrix to.</param>
            <param name="format">The format for the new matrix.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.IO.StorageType">
            <summary>
            The type of storage.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.StorageType.Dense">
            <summary>
            Dense storage.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.IO.StorageType.Sparse">
            <summary>
            Sparse storage.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Direct.CholeskySolver">
            <summary>
            Compute solutions to the matrix equation Ax = b using Cholesky decomposition.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.ISolver">
            <summary>
            The base interface for classes that compute solutions to the matrix equation Ax = b,
            where A is a matrix and x and b are vectors.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ISolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ISolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ISolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ISolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.CholeskySolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.CholeskySolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.CholeskySolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.CholeskySolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Direct.LUSolver">
            <summary>
            Compute solutions to the matrix equation Ax = b using LU decomposition.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.LUSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.LUSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.LUSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.LUSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Direct.QRSolver`1">
            <summary>
            Compute solutions to the matrix equation Ax = b using QR decomposition.
            </summary>
            <typeparam name="T">The QR algorithm to use.</typeparam>
            <remarks>Only the <see cref="T:dnAnalytics.LinearAlgebra.Decomposition.Householder"/> algorithm uses native code in
            the native version of dnAnalytics. All other QR algorithms use managed code, even
            if you are using the native version of dnAnalytics. </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.QRSolver`1.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.QRSolver`1.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.QRSolver`1.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.QRSolver`1.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Direct.SvdSolver">
            <summary>
            Compute solutions to the matrix equation Ax = b using QR decomposition.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.SvdSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.SvdSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.SvdSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Direct.SvdSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
            <example><code lang="cs">
using System;
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;
using dnAnalytics.LinearAlgebra.Solvers.Iterative;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Iterative
{
    /// &lt;summary&gt;
    /// Provides an example of the creation and use of the BiCGStab iterative solver
    /// &lt;/summary&gt;
    public sealed class BicgstabExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that runs the BiCGStab iterative solver.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create a preconditioner. The possibilities are:
            // 1) No preconditioner - Simply do not provide the solver with a preconditioner.
            // 2) A simple diagonal preconditioner - Create an instance of the Diagonal class.
            // 3) A ILU preconditioner - Create an instance of the IncompleteLu class.
            // 4) A ILU preconditioner with pivoting and drop tolerances - Create an instance of the Ilutp class.

            // Here we'll use the simple diagonal preconditioner.
            // We need a link to the matrix so the pre-conditioner can do it's work.
            IPreConditioner preconditioner = new Diagonal();

            // Create a new iterator. This checks for convergence of the results of the
            // iterative matrix solver.
            // In this case we'll create the default iterator
            IIterator iterator = Iterator.CreateDefault();

            // Create the solver
            BiCgStab solver = new BiCgStab(preconditioner, iterator);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = solver.Solve(matrix, rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            solver.Solve(matrix, rightHandSideVector, solutionVector);

            // Finally you can check the reason the solver finished the iterative process
            // by calling the SolutionStatus property on the iterator
            ICalculationStatus status = iterator.Status;
            if (status is CalculationCancelled)
                Console.WriteLine("The user cancelled the calculation.");
            
            if (status is CalculationIndetermined)
                Console.WriteLine("Oh oh, something went wrong. The iterative process was never started.");

            if (status is CalculationConverged)
                Console.WriteLine("Yippee, the iterative process converged.");
    
            if (status is CalculationDiverged)
                Console.WriteLine("I'm sorry the iterative process diverged.");

            if (status is CalculationFailure)
                Console.WriteLine("Oh dear, the iterative process failed.");

            if (status is CalculationStoppedWithoutConvergence)
                Console.WriteLine("Oh dear, the iterative process did not converge.");
        }
    }
}
</code></example> 
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver">
            <summary>
            Defines the interface for <c>ISolver</c> classes that solve the matrix equation Ax = b in
            an iterative manner.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver.SetIterator(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.sm_DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.m_Preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.m_Iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.m_HasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <c>BiCgStab</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.#ctor(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>BiCgStab</c> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Initializes a new instance of the <c>BiCgStab</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner,dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>BiCgStab</c> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
            <param name="iterator">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.SetPreconditioner(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Sets the <c>IPreConditioner</c> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.SetIterator(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.BiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers. 
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all
            the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.sm_NonRunningStatus">
            <summary>
            The default status used if the solver is not running.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.sm_RunningStatus">
            <summary>
            The default status used if the solver is running.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.sm_SolverSetups">
            <summary>
            The collection of iterative solver setups. Stored based on the
            ratio between the relative speed and relative accuracy.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformation">
            <summary>
            Loads all the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from 
            the dnAnalytics assembly.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformation(System.Type[])">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from 
            the dnAnalytics assembly.
            </summary>
            <param name="typesToExclude">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/> types that should not be loaded.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String)">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.String,System.Type[])">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            assembly specified by the file location.
            </summary>
            <param name="assemblyLocation">The fully qualified path to the assembly.</param>
            <param name="typesToExclude">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/> types that should not be loaded.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName)">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">
              The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.AssemblyName,System.Type[])">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            assembly specified by the assembly name.
            </summary>
            <param name="assemblyName">
              The <see cref="T:System.Reflection.AssemblyName"/> of the assembly that should be searched for setup objects.
            </param>
            <param name="typesToExclude">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/> types that should not be loaded.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type)">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Type,System.Type[])">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            assembly specified by the type.
            </summary>
            <param name="typeInAssembly">The type in the assembly which should be searched for setup objects.</param>
            <param name="typesToExclude">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/> types that should not be loaded.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly)">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.LoadSolverInformationFromAssembly(System.Reflection.Assembly,System.Type[])">
            <summary>
            Loads the available <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup"/> objects from the
            specified assembly.
            </summary>
            <param name="assembly">The assembly which will be searched for setup objects.</param>
            <param name="typesToExclude">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/> types that should not be loaded.
            </param>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.m_Solvers">
            <summary>
            The collection of solvers that will be used to 
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.m_Status">
            <summary>
            The status of the calculation.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.m_Iterator">
            <summary>
            The iterator that is used to control the iteration process.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.m_HasBeenStopped">
            <summary>
            A flag indicating if the solver has been stopped or not.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.m_CurrentSolver">
            <summary>
            The solver that is currently running. Reference is used to be able to stop the
            solver if the user cancels the solve process.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.#ctor">
            <summary>
            Creates the <c>CompositeSolver</c> with the default iterator.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.#ctor(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Creates the <c>CompositeSolver</c> with the specified iterator.
            </summary>
            <param name="iterator">
            The iterator that will be used to control the iteration process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.SetIterator(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.CompositeSolver.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an 
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on 
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with 
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
            <example><code lang="cs">
using System;
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;
using dnAnalytics.LinearAlgebra.Solvers.Iterative;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Iterative
{
    /// &lt;summary&gt;
    /// Provides an example of the creation and use of the GPBiCG iterative solver
    /// &lt;/summary&gt;
    public sealed class GPBiCGExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that runs the GPBiCG iterative solver.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create a preconditioner. The possibilities are:
            // 1) No preconditioner - Simply do not provide the solver with a preconditioner.
            // 2) A simple diagonal preconditioner - Create an instance of the Diagonal class.
            // 3) A ILU preconditioner - Create an instance of the IncompleteLu class.
            // 4) A ILU preconditioner with pivoting and drop tolerances - Create an instance of the Ilutp class.

            // Here we'll use the simple diagonal preconditioner.
            // We need a link to the matrix so the pre-conditioner can do it's work.
            IPreConditioner preconditioner = new Diagonal();

            // Create a new iterator. This checks for convergence of the results of the
            // iterative matrix solver.
            // In this case we'll create the default iterator
            IIterator iterator = Iterator.CreateDefault();

            // Create the solver
            GPBiCG solver = new GPBiCG(preconditioner, iterator);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = solver.Solve(matrix, rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            solver.Solve(matrix, rightHandSideVector, solutionVector);

            // Finally you can check the reason the solver finished the iterative process
            // by calling the SolutionStatus property on the iterator
            ICalculationStatus status = iterator.Status;
            if (status is CalculationCancelled)
                Console.WriteLine("The user cancelled the calculation.");

            if (status is CalculationIndetermined)
                Console.WriteLine("Oh oh, something went wrong. The iterative process was never started.");

            if (status is CalculationConverged)
                Console.WriteLine("Yippee, the iterative process converged.");

            if (status is CalculationDiverged)
                Console.WriteLine("I'm sorry the iterative process diverged.");

            if (status is CalculationFailure)
                Console.WriteLine("Oh dear, the iterative process failed.");

            if (status is CalculationStoppedWithoutConvergence)
                Console.WriteLine("Oh dear, the iterative process did not converge.");
        }
    }
}
</code></example> 
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.sm_DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.m_Preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.m_Iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.m_NumberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.m_NumberOfGPBiCGSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken 
            before switching.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.m_HasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.#ctor">
            <summary>
            Initializes a new instance of the <c>GPBiCG</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.#ctor(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>GPBiCG</c> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Initializes a new instance of the <c>GPBiCG</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner,dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>GPBiCG</c> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
            <param name="iterator">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.SetPreconditioner(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Sets the <c>IPreConditioner</c> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.SetIterator(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.GPBiCG.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup">
            <summary>
            Defines the interface for objects that can create an iterative solver with
            specific settings. This interface is used to pass iterative solver creation 
            setup information around.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup.CreateNew">
            <summary>
            Creates a fully functional iterative solver with the default settings
            given by this setup.
            </summary>
            <returns>A new <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/>.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup.SolverType">
            <summary>
            The type of the solver that will be created by this setup object.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup.PreconditionerType">
            <summary>
            The type of preconditioner, if any, that will be created by this setup object.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup.SolutionSpeed">
            <summary>
            Indicates the relative speed of the solver. 
            </summary>
            <value>Returns a value between 0 and 1, inclusive.</value>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.IIterativeSolverSetup.Reliability">
            <summary>
            Indicates the relative reliability of the solver.
            </summary>
             <value>Returns a value between 0 and 1 inclusive.</value>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverBrakedownException">
            <summary>The exception is thrown when the an iterative solver experiences a numerical break down.</summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverException">
            <summary>
            Exception class for exceptions thrown by the iterative solvers.
            </summary>
        </member>
        <member name="T:dnAnalytics.dnAnalyticsException">
            <summary>Represents errors that occur when using the dnAnalytics numerical library.</summary>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsException.#ctor">
            <summary>Initializes a new instance of the <strong>dnAnalyticsException</strong> class.</summary>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsException.#ctor(System.String)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsException</strong> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverException.#ctor">
            <summary>Initializes a new instance of the <b>IterativeSolverException </b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>IterativeSolverException </b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>IterativeSolverException </b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>IterativeSolverException </b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverBrakedownException.#ctor">
            <summary>Initializes a new instance of the <b>IterativeSolverBrakedownException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverBrakedownException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>IterativeSolverBrakedownException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverBrakedownException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>IterativeSolverBrakedownException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.IterativeSolverBrakedownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>IterativeSolverBrakedownException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.MissingSolverException">
            <summary>The exception is thrown when the <c>Composite</c> solver cannot find any <c>IIterativeSolverSetup</c> objects.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MissingSolverException.#ctor">
            <summary>Initializes a new instance of the <b>MissingSolverException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MissingSolverException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>MissingSolverException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MissingSolverException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>MissingSolverException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MissingSolverException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>MissingSolverException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver. 
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
            <example><code lang="cs">
using System;
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;
using dnAnalytics.LinearAlgebra.Solvers.Iterative;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Iterative
{
    /// &lt;summary&gt;
    /// Provides an example of the creation and use of the MlkBiCgStab iterative solver
    /// &lt;/summary&gt;
    public sealed class MlkBiCgStabExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that runs the MlkBiCgStab iterative solver.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create a preconditioner. The possibilities are:
            // 1) No preconditioner - Simply do not provide the solver with a preconditioner.
            // 2) A simple diagonal preconditioner - Create an instance of the Diagonal class.
            // 3) A ILU preconditioner - Create an instance of the IncompleteLu class.
            // 4) A ILU preconditioner with pivoting and drop tolerances - Create an instance of the Ilutp class.

            // Here we'll use the simple diagonal preconditioner.
            // We need a link to the matrix so the pre-conditioner can do it's work.
            IPreConditioner preconditioner = new Diagonal();

            // Create a new iterator. This checks for convergence of the results of the
            // iterative matrix solver.
            // In this case we'll create the default iterator
            IIterator iterator = Iterator.CreateDefault();

            // Create the solver
            MlkBiCgStab solver = new MlkBiCgStab(preconditioner, iterator);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = solver.Solve(matrix, rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            solver.Solve(matrix, rightHandSideVector, solutionVector);

            // Finally you can check the reason the solver finished the iterative process
            // by calling the SolutionStatus property on the iterator
            ICalculationStatus status = iterator.Status;
            if (status is CalculationCancelled)
                Console.WriteLine("The user cancelled the calculation.");

            if (status is CalculationIndetermined)
                Console.WriteLine("Oh oh, something went wrong. The iterative process was never started.");

            if (status is CalculationConverged)
                Console.WriteLine("Yippee, the iterative process converged.");

            if (status is CalculationDiverged)
                Console.WriteLine("I'm sorry the iterative process diverged.");

            if (status is CalculationFailure)
                Console.WriteLine("Oh dear, the iterative process failed.");

            if (status is CalculationStoppedWithoutConvergence)
                Console.WriteLine("Oh dear, the iterative process did not converge.");
        }
    }
}
</code></example> 
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.sm_DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.sm_DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.m_Preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.m_Iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.m_StartingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.m_NumberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.m_HasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.#ctor">
            <summary>
            Initializes a new instance of the <c>MlkBiCgStab</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.#ctor(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>MlkBiCgStab</c> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Initializes a new instance of the <c>MlkBiCgStab</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner,dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>MlkBiCgStab</c> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
            <param name="iterator">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.SetPreconditioner(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Sets the <c>IPreConditioner</c> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.SetIterator(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">
              The maximum number of starting vectors that should be created.
            </param>
            <param name="numberOfVariables">
              The number of variables.
            </param>
            <returns>
              An array with starting vectors. The array will never be larger than the
              <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
              the <paramref name="numberOfVariables"/> is smaller than 
              the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
              Must be larger than 1 and smaller than the number of variables in the matrix that 
              for which this solver will be used.
            </remarks>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the 
            Krylov sub-space.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.MlkBiCgStab.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
            <example><code lang="cs">
using System;
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;
using dnAnalytics.LinearAlgebra.Solvers.Iterative;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Iterative
{
    /// &lt;summary&gt;
    /// Provides an example of the creation and use of the TFQMR iterative solver
    /// &lt;/summary&gt;
    public sealed class TFQMRExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that runs the TFQMR iterative solver.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create a preconditioner. The possibilities are:
            // 1) No preconditioner - Simply do not provide the solver with a preconditioner.
            // 2) A simple diagonal preconditioner - Create an instance of the Diagonal class.
            // 3) A ILU preconditioner - Create an instance of the IncompleteLu class.
            // 4) A ILU preconditioner with pivoting and drop tolerances - Create an instance of the Ilutp class.

            // Here we'll use the simple diagonal preconditioner.
            // We need a link to the matrix so the pre-conditioner can do it's work.
            IPreConditioner preconditioner = new Diagonal();

            // Create a new iterator. This checks for convergence of the results of the
            // iterative matrix solver.
            // In this case we'll create the default iterator
            IIterator iterator = Iterator.CreateDefault();

            // Create the solver
            TFQMR solver = new TFQMR(preconditioner, iterator);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = solver.Solve(matrix, rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            solver.Solve(matrix, rightHandSideVector, solutionVector);

            // Finally you can check the reason the solver finished the iterative process
            // by calling the SolutionStatus property on the iterator
            ICalculationStatus status = iterator.Status;
            if (status is CalculationCancelled)
                Console.WriteLine("The user cancelled the calculation.");

            if (status is CalculationIndetermined)
                Console.WriteLine("Oh oh, something went wrong. The iterative process was never started.");

            if (status is CalculationConverged)
                Console.WriteLine("Yippee, the iterative process converged.");

            if (status is CalculationDiverged)
                Console.WriteLine("I'm sorry the iterative process diverged.");

            if (status is CalculationFailure)
                Console.WriteLine("Oh dear, the iterative process failed.");

            if (status is CalculationStoppedWithoutConvergence)
                Console.WriteLine("Oh dear, the iterative process did not converge.");
        }
    }
}
</code></example> 
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.sm_DefaultStatus">
            <summary>
            The status used if there is no status, i.e. the solver hasn't run yet and there is no
            iterator.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.m_Preconditioner">
            <summary>
            The preconditioner that will be used. Can be set to <c>null</c>, in which case the default
            pre-conditioner will be used.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.m_Iterator">
            <summary>
            The iterative process controller.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.m_HasBeenStopped">
            <summary>
            Indicates if the user has stopped the solver.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.#ctor">
            <summary>
            Initializes a new instance of the <c>TFQMR</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings and a default preconditioner.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.#ctor(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>TFQMR</c> class.
            </summary>
            <remarks>
            <para>
            When using this constructor the solver will use a default preconditioner.
            </para>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="iterator">
              The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Initializes a new instance of the <c>TFQMR</c> class.
            </summary>
            <remarks>
            When using this constructor the solver will use the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> with
            the standard settings.
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.#ctor(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner,dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Initializes a new instance of the <c>TFQMR</c> class.
            </summary>
            <remarks>
            <para>
            The main advantages of using a user defined <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> are:
            <list type="number">
            <item>It is possible to set the desired convergence limits.</item>
            <item>
            It is possible to check the reason for which the solver finished 
            the iterative procedure by calling the <see cref="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status"/> property.
            </item>
            </list>
            </para>
            </remarks>
            <param name="preconditioner">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner"/> that will be used to precondition the matrix equation.
            </param>
            <param name="iterator">
            The <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterator"/> that will be used to monitor the iterative process.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.SetPreconditioner(dnAnalytics.LinearAlgebra.Solvers.IPreConditioner)">
            <summary>
            Sets the <c>IPreConditioner</c> that will be used to precondition the iterative process.
            </summary>
            <param name="preconditioner">The preconditioner.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.SetIterator(dnAnalytics.LinearAlgebra.Solvers.IIterator)">
            <summary>
            Sets the <c>IIterator</c> that will be used to track the iterative process.
            </summary>
            <param name="iterator">The iterator.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.StopSolve">
            <summary>
            Stops the solve process. 
            </summary>
            <remarks>
            Note that it may take an indetermined amount of time for the solver to actually
            stop the process.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="vector">The solution vector, <c>b</c>.</param>
            <returns>The result vector, <c>x</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <returns>The result matrix, <c>X</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.Solve(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Solves the matrix equation AX = B, where A is the coefficient matrix, B is the
            solution matrix and X is the unknown matrix.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution matrix, <c>B</c>.</param>
            <param name="result">The result matrix, <c>X</c></param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterative.TFQMR.IterationResult">
            <summary>
            Gets the status of the iteration once the calculation is finished.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Diagonal">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
            <example><code lang="cs">
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Preconditioners
{
    public sealed class DiagonalExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that uses the Diagonal preconditioner.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create the Diagonal preconditioner
            Diagonal preconditioner = new Diagonal();
            
            // Create the actual preconditioner
            preconditioner.Initialize(matrix);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = preconditioner.Approximate(rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            preconditioner.Approximate(rightHandSideVector, solutionVector);
        }
    }
}
</code></example> 
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner">
            <summary>
            The base interface for preconditioner classes.
            </summary>
            <remarks>
            <para>
            Preconditioners are used by iterative solvers to improve the convergence
            speed of the solving process. Note that an increase in convergence speed
            is related to the number of iterations necessary to get a converged solution.
            So while in general the use of a preconditioner means that the iterative 
            solver will perform fewer iterations it does not guarantee that the actual
            solution time decreases given that some preconditioners can be expensive to 
            setup and run.
            </para>
            <para>
            Note that in general changes to the matrix will invalidate the preconditioner
            if the changes occur after creating the preconditioner.
            </para>
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner.Initialize(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix on which the preconditioner is based.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner.Approximate(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IPreConditioner.Approximate(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Mx = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Diagonal.m_InverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Diagonal.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Diagonal.Initialize(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> upon which this preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is <c>null</c>.
            </exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">
            If <paramref name="matrix"/> is not a square matrix.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Diagonal.Approximate(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Diagonal.Approximate(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
            <example><code lang="cs">
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Preconditioners
{
    public sealed class IlutpExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that uses the Ilutp preconditioner.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create the Ilutp preconditioner
            Ilutp preconditioner = new Ilutp();

            // Set the drop tolerance. All entries with absolute values smaller than this value will be
            // removed from the preconditioner matrices.
            preconditioner.DropTolerance = 1e-5;
            // Set the relative fill level. This indicates how much additional fill we allow. In this case
            // about 200%
            preconditioner.FillLevel = 200;
            // Set the pivot tolerance. This indicates when pivoting is used. In this case we pivot if 
            // the largest off-diagonal entry is twice as big as the diagonal entry.
            preconditioner.PivotTolerance = 0.5;

            // Create the actual preconditioner
            preconditioner.Initialize(matrix);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = preconditioner.Approximate(rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            preconditioner.Approximate(rightHandSideVector, solutionVector);
        }
    }
}
</code></example> 
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.sm_DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.sm_DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.m_Upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.m_Lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.m_Pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.m_FillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.m_DropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.m_PivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.#ctor">
            <summary>
            Creates an instance of the <c>Ilutp</c> class with the default settings.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <c>Ilutp</c> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of 
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry 
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and 
            should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and 
            should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and 
            should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.Initialize(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> upon which this preconditioner is based. Note that the 
            method takes a general matrix type. However internally the data is stored 
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is <b>null</b>.
            </exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">
            If <paramref name="matrix"/> is not a square matrix.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.Approximate(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.Approximate(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.DefaultFillLevel">
            <summary>
            Returns the default fill level.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.DefaultDropTolerance">
            <summary>
            Returns the default drop tolerance.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original 
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove 
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the 
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) &gt; row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IlutpElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.Ilutp"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IlutpElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once 
            the algorithm finishes.</param>
            <param name="values">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IlutpElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
            <example><code lang="cs">
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Preconditioners
{
    public sealed class DiagonalExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that uses the Diagonal preconditioner.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create the Diagonal preconditioner
            Diagonal preconditioner = new Diagonal();
            
            // Create the actual preconditioner
            preconditioner.Initialize(matrix);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = preconditioner.Approximate(rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            preconditioner.Approximate(rightHandSideVector, solutionVector);
        }
    }
}
</code></example> 
            <example><code lang="cs">
using dnAnalytics.LinearAlgebra;
using dnAnalytics.LinearAlgebra.Solvers.Preconditioners;

namespace dnAnalytics.Examples.LinearAlgebra.Solvers.Preconditioners
{
    public sealed class IncompleteLuExample
    {
        /// &lt;summary&gt;
        /// Creates a new sparse matrix with zero values everywhere except
        /// on the diagonal where the values are equal to 1.0.
        /// &lt;/summary&gt;
        private Matrix CreateMatrix(int size)
        {
            // Create the sparse matrix with the specified size
            Matrix matrix = new SparseMatrix(size);
            // Add values to the matrix. For now we'll make the matrix
            // a unit matrix.
            for (int i = 0; i &lt; size; i++)
            {
                matrix[i, i] = 1.0;
            }

            return matrix;
        }

        /// &lt;summary&gt;
        /// The main method that uses the IncompleteLU preconditioner.
        /// &lt;/summary&gt;
        public void UseSolver()
        {
            // Create a sparse matrix. For now the size will be 10 x 10 elements
            Matrix matrix = CreateMatrix(10);

            // Create the right hand side vector. The size is the same as the matrix
            // and all values will be 2.0.
            Vector rightHandSideVector = new DenseVector(10, 2.0);

            // Create the IncompleteLU preconditioner
            IncompleteLU preconditioner = new IncompleteLU();
            
            // Create the actual preconditioner
            preconditioner.Initialize(matrix);

            // Now that all is set we can solve the matrix equation.
            Vector solutionVector = preconditioner.Approximate(rightHandSideVector);

            // Another way to get the values is by using the overloaded solve method
            // In this case the solution vector needs to be of the correct size.
            preconditioner.Approximate(rightHandSideVector, solutionVector);
        }
    }
}
</code></example> 
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU.m_LuDecomposition">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU.Initialize(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The matrix upon which the preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is <b>null</b>.
            </exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">
            If <paramref name="matrix"/> is not a square matrix.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU.Approximate(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.IncompleteLU.Approximate(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.UnitPreconditioner">
            <summary>
            A unit preconditioner. This preconditioner does not actually do anything
            it is only used when running an <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterativeSolver"/> without
            a preconditioner.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.UnitPreconditioner.m_Size">
            <summary>
            The coefficient matrix on which this preconditioner operates.
            Is used to check dimensions on the different vectors that are processed.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.UnitPreconditioner.Initialize(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The matrix upon which the preconditioner is based.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="matrix"/> is <b>null</b>.
            </exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">
            If <paramref name="matrix"/> is not a square matrix.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.UnitPreconditioner.Approximate(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="rhs"/> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="lhs"/> is <b>null</b>.
            </exception>
            <exception cref="T:dnAnalytics.NotConformableException">
              <para>
                If <paramref name="rhs"/> and <paramref name="lhs"/> do not have the same size.
              </para>
              <para>
                - or -
              </para>
              <para>
                If the size of <paramref name="rhs"/> is different the number of rows of the 
                coefficient matrix.
              </para>
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Preconditioners.UnitPreconditioner.Approximate(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <returns>The left hand side vector.</returns>
            <exception cref="T:System.ArgumentNullException">
              If <paramref name="rhs"/> is <b>null</b>.
            </exception>
            <exception cref="T:dnAnalytics.NotConformableException">
              If the size of <paramref name="rhs"/> is different the number 
              of rows of the coefficient matrix.
            </exception>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationCancelled">
            <summary>
            Indicates that a calculation was cancelled by the user.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.ICalculationStatus">
            <summary>
            Defines the base interface for calculation status objects.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ICalculationStatus.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationCancelled.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationConverged">
            <summary>
            Indicates that a calculation has converged to the desired convergence
            levels.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationConverged.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationDiverged">
            <summary>
            Indicates that the calculation diverged.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationDiverged.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationFailure">
            <summary>
            Indicates that a calculation has failed for some reason.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationFailure.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationIndetermined">
            <summary>
            Indicates that the state of the calculation is indetermined, not started or stopped.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationIndetermined.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationRunning">
            <summary>
            Indicates that the calculation is running and no results are yet known.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationRunning.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.CalculationStoppedWithoutConvergence">
            <summary>
            Indicates that the calculation has been stopped due to reaching the stopping
            limits, but that convergence was not achieved.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.CalculationStoppedWithoutConvergence.TerminatesCalculation">
            <summary>
            Indicates if the current status warrants stopping the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium">
            <summary>
            Monitors an iterative calculation for signs of divergence.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium">
            <summary>
            The base interface for classes that provide stop criteria for iterative calculations. 
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterationStopCriterium</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterationStopCriterium</c>.
            </returns>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterationStopCriterium</c> to the pre-calculation state.
            </summary>
            <remarks>
            Note to implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium.Clone">
            <summary>
            Clones the current <c>IIterationStopCriterium</c> and its settings.
            </summary>
            <returns>A new instance of the specific <c>IIterationStopCriterium</c>.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium.Status">
            <summary>
            Returns the current calculation status.
            </summary>
            <remarks>
            Note to implementers: <c>null</c> is not a legal value.
            </remarks>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium.StopLevel">
            <summary>
            Returns the <c>StopLevel</c> which indicates what sort of stop criterium this
            <c>IIterationStopCriterium</c> monitors.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.s_DefaultMaximumRelativeIncrease">
            <summary>
            Defines the default maximum residual increase.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.s_DefaultMinimumIterations">
            <summary>
            Defines the default number of tracking iterations.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.sm_DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.sm_DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.m_MaximumRelativeIncrease">
            <summary>
            The maximum relative increase the residual may experience without triggering a divergence warning.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.m_MinimumNumberOfIterations">
            <summary>
            The number of iterations over which a residual increase should be tracked before
            issuing a divergence warning.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.m_Status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.m_ResidualHistory">
            <summary>
            The array that holds the tracking information.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.m_LastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.#ctor">
            <summary>
            Creates an instance of the <c>DivergenceStopCriterium</c> class with the default maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.#ctor(System.Double)">
            <summary>
            Creates an instance of the <c>DivergenceStopCriterium</c> class with the specified maximum 
            relative increase and the default minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">
              The maximum relative increase that the residual may experience before a 
              divergence warning is issued.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.#ctor(System.Int32)">
            <summary>
            Creates an instance of the <c>DivergenceStopCriterium</c> class with the default maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="minimumIterations">
              The minimum number of iterations over which the residual must grow before a
              divergence warning is issued.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Creates an instance of the <c>DivergenceStopCriterium</c> class with the specified maximum 
            relative increase and the specified minimum number of tracking iterations.
            </summary>
            <param name="maximumRelativeIncrease">
              The maximum relative increase that the residual may experience before a 
              divergence warning is issued.
            </param>
            <param name="minimumIterations">
              The minimum number of iterations over which the residual must grow before a
              divergence warning is issued.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.ResetMaximumRelativeIncreaseToDefault">
            <summary>
            Returns the maximum relative increase to the default.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.ResetNumberOfIterationsToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterationStopCriterium</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterationStopCriterium</c>.
            </returns>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterationStopCriterium</c> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.Clone">
            <summary>
            Clones the current <c>DivergenceStopCriterium</c> and its settings.
            </summary>
            <returns>A new instance of the <c>DivergenceStopCriterium</c> class.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.DefaultMaximumRelativeIncrease">
            <summary>
            Returns the default value for the maximum relative increase that the 
            residual may experience before a divergence warning is issued.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.DefaultMinimumNumberOfIterations">
            <summary>
            Returns the default value for the minimum number of iterations over which 
            the residual must grow before a divergence warning is issued.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.MaximumRelativeIncrease">
            <summary>
            Gets or sets the maximum relative increase that the residual may experience before a
            divergence warning is issued.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to zero or below.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.MinimumNumberOfIterations">
            <summary>
            Gets or sets the minimum number of iterations over which the residual must grow before
            issuing a divergence warning.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>value</c> is set to less than one.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.Status">
            <summary>
            Returns the current calculation status.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.DivergenceStopCriterium.StopLevel">
            <summary>
            Returns the <c>StopLevel</c> which indicates what sort of stop criterium this
            <c>IIterationStopCriterium</c> monitors.
            </summary>
            <value>Returns <see cref="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.Divergence"/>.</value>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException">
            <summary>The exception is thrown when an <c>IIterator</c> is passed a duplicate <c>IIterationStopCriterium</c>.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException.#ctor">
            <summary>Initializes a new instance of the <b>DuplicateStopCriteriumException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>DuplicateStopCriteriumException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>DuplicateStopCriteriumException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>DuplicateStopCriteriumException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium">
            <summary>
            Defines an <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium"/> that monitors residuals for NaN's.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.sm_DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.sm_DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.m_Status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.m_LastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.#ctor">
            <summary>
            Creates an instance of the <c>FailureStopCriterium</c> class.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterationStopCriterium</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterationStopCriterium</c>.
            </returns>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterationStopCriterium</c> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.Clone">
            <summary>
            Clones the current <c>FailureStopCriterium</c> and its settings.
            </summary>
            <returns>A new instance of the <c>FailureStopCriterium</c> class.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.Status">
            <summary>
            Returns the current calculation status.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.FailureStopCriterium.StopLevel">
            <summary>
            Returns the <c>StopLevel</c> which indicates what sort of stop criterium this
            <c>IIterationStopCriterium</c> monitors.
            </summary>
            <value>Returns <see cref="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.CalculationFailure"/>.</value>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IAlgebraicMultiGridSolver">
            <summary>
            Defines the interface for iterative solvers that use an Algebraic Multi-Grid (AMG)
            approach.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IAlgebraicMultiGridSolver.NumberOfLevels">
            <summary>
            Gets or sets the number of levels used in the solver.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IIterator">
            <summary>
            Defines the base interface for iterators that help control an iterative calculation.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.Add(dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium)">
            <summary>
            Adds an <c>IIterationStopCriterium</c> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">
              Thrown if <paramref name="stopCriterium"/> is null.
            </exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException">
              Thrown if <paramref name="stopCriterium"/> is of the same type as an already 
              stored criterium.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.Remove(dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium)">
            <summary>
            Removes the <c>IIterationStopCriterium</c> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.Contains(dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <c>IIterator</c>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <c>IIterator</c> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>
            Does not reset the stop-criteria.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterator</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterator</c>.
            </returns>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterator</c> to the pre-calculation state.
            </summary>
            <remarks>
            Note to implementers: Invoking this method should not clear the user defined
            property values, only the state that is used to track the progress of the 
            calculation.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IIterator.Clone">
            <summary>
            Creates a deep clone of the current iterator.
            </summary>
            <returns>The deep clone of the current iterator.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IIterator.Status">
            <summary>
            Returns the current calculation status.
            </summary>
            <remarks>
            Note to implementers: <c>null</c> is not a legal value.
            </remarks>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IMultiLevelPreconditioner">
            <summary>
            Defines the interface for preconditioners that use a multi-level approach to
            determining the approximation to the matrix equation Ax = b.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IMultiLevelPreconditioner.NumberOfLevels">
            <summary>
            Gets or sets the number of levels used in the pre-conditioner.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium">
            <summary>
            Defines an <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium"/> that monitors the numbers of iteration 
            steps as stop criterium.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.s_DefaultMaximumIterations">
            <summary>
            The default value for the maximum number of iterations the process is allowed
            to perform.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.s_DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.m_MaximumNumberOfIterations">
            <summary>
            The maximum number of iterations the calculation is allowed to perform.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.m_Status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.#ctor">
            <summary>
            Creates an instance of the <c>IterationStopCriterium</c> class with the default maximum 
            number of iterations.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.#ctor(System.Int32)">
            <summary>
            Creates an instance of the <c>IterationStopCriterium</c> class with the specified maximum
            number of iterations.
            </summary>
            <param name="maximumNumberOfIterations">
              The maximum number of iterations the calculation is allowed to perform.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.ResetMaximumNumberOfIterationsToDefault">
            <summary>
            Returns the maximum number of iterations to the default.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterationStopCriterium</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterationStopCriterium</c>.
            </returns>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterationStopCriterium</c> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.Clone">
            <summary>
            Clones the current <c>IterationCountStopCriterium</c> and its settings.
            </summary>
            <returns>A new instance of the <c>IterationCountStopCriterium</c> class.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.DefaultMaximumNumberOfIterations">
            <summary>
            Returns the default value for the maximum number of iterations.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.MaximumNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations the calculation is allowed to perform.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.Status">
            <summary>
            Returns the current calculation status.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.IterationCountStopCriterium.StopLevel">
            <summary>
            Returns the <c>StopLevel</c> which indicates what sort of stop criterium this
            <c>IIterationStopCriterium</c> monitors.
            </summary>
            <value>Returns <see cref="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.StoppedWithoutConvergence"/>.</value>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.Iterator">
            <summary>
            An iterator that is used to check if an iterative calculation should continue or stop.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterator.sm_DefaultStatus">
            <summary>
            The default status for the iterator.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.CreateDefault">
            <summary>
            Creates a default iterator with all the <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium"/> objects.
            </summary>
            <returns>A new <c>IIterator</c> object.</returns>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterator.m_StopCriteria">
            <summary>
            The collection that holds all the stop criteria and the flag indicating if they should be added
            to the child iterators.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterator.m_Status">
            <summary>
            The status of the iterator.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.Iterator.m_WasIterationCancelled">
            <summary>
            Indicates if the iteration was cancelled.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.#ctor">
            <summary>
            Creates an instance of the <c>Iterator</c> class.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.#ctor(System.Collections.Generic.IEnumerable{dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium})">
            <summary>
            Creates an instance of the <c>Iterator</c> class with the specified stop criteria.
            </summary>
            <param name="stopCriteria">
            The specified stop criteria. Only one stop criterium of each type can be passed in. None
            of the stop criteria will be passed on to child iterators.
            </param>
            <exception cref="T:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException">
              Thrown if <paramref name="stopCriteria"/> contains multiple stop criteria of the same type.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.Add(dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium)">
            <summary>
            Adds an <c>IIterationStopCriterium</c> to the internal collection of stop-criteria. Only a 
            single stop criterium of each type can be stored.
            </summary>
            <param name="stopCriterium">The stop criterium to add.</param>
            <exception cref="T:System.ArgumentNullException">
              Thrown if <paramref name="stopCriterium"/> is null.
            </exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.Solvers.DuplicateStopCriteriumException">
              Thrown if <paramref name="stopCriterium"/> is of the same type as an already 
              stored criterium.
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.Remove(dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium)">
            <summary>
            Removes the <c>IIterationStopCriterium</c> from the internal collection.
            </summary>
            <param name="stopCriterium">The stop criterium that must be removed.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.Contains(dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium)">
            <summary>
            Indicates if the specific stop criterium is stored by the <c>IIterator</c>.
            </summary>
            <param name="stopCriterium">The stop criterium.</param>
            <returns><c>true</c> if the <c>IIterator</c> contains the stop criterium; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.IterationCancelled">
            <summary>
            Indicates to the iterator that the iterative process has been cancelled.
            </summary>
            <remarks>
            Does not reset the stop-criteria.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterator</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterator</c>.
            </returns>
            <remarks>
            The individual iterators may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterator</c> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.Iterator.Clone">
            <summary>
            Creates a deep clone of the current iterator.
            </summary>
            <returns>The deep clone of the current iterator.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterator.NumberOfCriteria">
            <summary>
            Returns the number of stored stop criteria.
            </summary>
            <remarks>
            Used for testing only.
            </remarks>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterator.StoredStopCriteria">
            <summary>
            Returns an <c>IEnumerator</c> that enumerates over all the stored 
            stop criteria.
            </summary>
            <remarks>
            Used for testing only.
            </remarks>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.Iterator.Status">
            <summary>
            Returns the current calculation status.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.MissingMatrixException">
            <summary>The exception is thrown when an <c>IPreConditioner</c> was not initialized properly.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.MissingMatrixException.#ctor">
            <summary>Initializes a new instance of the <b>MissingMatrixException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.MissingMatrixException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>MissingMatrixException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.MissingMatrixException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>MissingMatrixException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.MissingMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>MissingMatrixException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium">
            <summary>
            Defines an <see cref="T:dnAnalytics.LinearAlgebra.Solvers.IIterationStopCriterium"/> that monitors residuals as stop criterium.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.sm_DefaultMaximum">
            <summary>
            The default value for the maximum value of the residual.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.sm_DefaultMinimumIterations">
            <summary>
            The default value for the minimum number of iterations.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.sm_DefaultLastIterationNumber">
            <summary>
            Defines the default last iteration number. Set to -1 because iterations normally
            start at 0.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.sm_DefaultStatus">
            <summary>
            The default status.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.m_Maximum">
            <summary>
            The maximum value for the residual below which the calculation is considered converged.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.m_MinimumIterationsBelowMaximum">
            <summary>
            The minimum number of iterations for which the residual has to be below the maximum before
            the calculation is considered converged.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.m_Status">
            <summary>
            The status of the calculation
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.m_IterationCount">
            <summary>
            The number of iterations since the residuals got below the maximum.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.m_LastIteration">
            <summary>
            The iteration number of the last iteration.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.#ctor">
            <summary>
            Creates an instance of the <c>ResidualStopCriterium</c> class with the default maximum 
            residual and the default minimum number of iterations.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.#ctor(System.Double)">
            <summary>
            Creates an instance of the <c>ResidualStopCriterium</c> class with the specified 
            maximum residual and the default minimum number of iterations.
            </summary>
            <param name="maximum">
              The maximum value for the residual below which the calculation is considered converged.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.#ctor(System.Int32)">
            <summary>
            Creates an instance of the <c>ResidualStopCriterium</c> class with the default maximum residual
            and specified minimum number of iterations.
            </summary>
            <param name="minimumIterationsBelowMaximum">
              The minimum number of iterations for which the residual has to be below the maximum before
              the calculation is considered converged.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.#ctor(System.Double,System.Int32)">
            <summary>
            Creates an instance of the <c>ResidualStopCriterium</c> class with the specified 
            maximum residual and minimum number of iterations.
            </summary>
            <param name="maximum">
              The maximum value for the residual below which the calculation is considered converged.
            </param>
            <param name="minimumIterationsBelowMaximum">
              The minimum number of iterations for which the residual has to be below the maximum before
              the calculation is considered converged.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.ResetMaximumResidualToDefault">
            <summary>
            Returns the maximum residual to the default.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.ResetMinimumIterationsBelowMaximumToDefault">
            <summary>
            Returns the minimum number of iterations to the default.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.DetermineStatus(System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Determines the status of the iterative calculation based on the stop criteria stored
            by the current <c>IIterationStopCriterium</c>.
            </summary>
            <param name="iterationNumber">The number of iterations that have passed so far.</param>
            <param name="solutionVector">The vector containing the current solution values.</param>
            <param name="sourceVector">The right hand side vector.</param>
            <param name="residualVector">The vector containing the current residual vectors.</param>
            <returns>
              An <c>ICalculationStatus</c> which indicates what the status of the iterative 
              calculation is according to the current <c>IIterationStopCriterium</c>.
            </returns>
            <remarks>
            The individual stop criteria may internally track the progress of the calculation based
            on the invocation of this method. Therefore this method should only be called if the 
            calculation has moved forwards at least one step.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.ResetToPrecalculationState">
            <summary>
            Resets the <c>IIterationStopCriterium</c> to the pre-calculation state.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.Clone">
            <summary>
            Clones the current <c>ResidualStopCriterium</c> and its settings.
            </summary>
            <returns>A new instance of the <c>ResidualStopCriterium</c> class.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.DefaultMaximumResidual">
            <summary>
            Returns the default values for the maximum value for the residual below which the 
            calculation is considered converged.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.DefaultMinimumIterationsBelowMaximum">
            <summary>
            Returns the default value for the minimum number of iterations for which the residual 
            has to be below the maximum before the calculation is considered converged.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.Maximum">
            <summary>
            Gets or sets the maximum value for the residual below which the calculation is considered 
            converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>Maximum</c> is set to a negative value.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.MinimumIterationsBelowMaximum">
            <summary>
            Gets or sets the minimum number of iterations for which the residual has to be
            below the maximum before the calculation is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <c>BelowMaximumFor</c> is set to a value less than 1.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.Status">
            <summary>
            Returns the current calculation status.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Solvers.ResidualStopCriterium.StopLevel">
            <summary>
            Returns the <c>StopLevel</c> which indicates what sort of stop criterium this
            <c>IIterationStopCriterium</c> monitors.
            </summary>
            <value>Returns <see cref="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.Convergence"/>.</value>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.StopCriteriumMissingException">
            <summary>The exception is thrown when an <c>IIterator</c> does not have any <c>IIterationStopCriterium</c> objects.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.StopCriteriumMissingException.#ctor">
            <summary>Initializes a new instance of the <b>StopCriteriumMissingException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.StopCriteriumMissingException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>StopCriteriumMissingException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.StopCriteriumMissingException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>StopCriteriumMissingException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Solvers.StopCriteriumMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>StopCriteriumMissingException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Solvers.StopLevel">
            <summary>
            Indicates what an <c>IIterationStopCriterium</c> monitors for stop criteria. 
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.CalculationFailure">
            <summary>
            The <c>IIterationStopCriterium</c> monitors calculation failures in the
            iterative calculation.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.Divergence">
            <summary>
            The <c>IIterationStopCriterium</c> monitors the calculation for signs of divergence.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.StoppedWithoutConvergence">
            <summary>
            The <c>IIterationStopCriterium</c> guards the calculation against unlimited continuation
            by monitoring user specified limits, e.g. the maximum number of iterations.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.Solvers.StopLevel.Convergence">
            <summary>
            The <c>IIterationStopCriterium</c> monitors the calculation for convergence, usually
            based on the residuals of the calculation.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.DenseMatrix">
            <summary>
            A matrix class using dense storage.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Matrix">
            <summary>
            A matrix class.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Sets the number of rows and columns for the matrix.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Equals(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Compares two matrices for equality by checking that corresponding matrix entries are exactly equal.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Equals(System.Object)">
            <summary>
            Compares two matrices for equality by checking that corresponding matrix entries are exactly equal.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetHashCode">
            <summary>
            Computes a hash for the matrix based on 25 entries using the standard .NET hash computation for double arrays.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>A string representation of this matrix.</summary>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The string representation of this matrix as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>   
            <remarks>For sparse matrices, the L2 norm is computed using a dense implementation of singular value decomposition. 
            In a later release, it will be replaced with a sparse implementation.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>   
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
            <remarks>The condition number is calculated using singular value decomposition.</remarks>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">If the singular value decomposition
            cannot converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.NormalizeRows(System.Int32)">
            <summary>
            Normalizes the rows of a matrix.
            </summary>
            <param name="pValue">The norm under which to normalize the rows under.</param>
            <returns>A normalized version of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.NormalizeColumns(System.Int32)">
            <summary>
            Normalizes the columns of a matrix.
            </summary>
            <param name="pValue">The norm under which to normalize the columns under.</param>
            <returns>A normalized version of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Clear">
            <summary>
            Sets all values to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetColumn(System.Int32)">
            <summary>
            Copies a column into a new <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="index">The column to copy.</param>
            <returns>A <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> containing the copied elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetColumn(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies a column into to the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="index">The column to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>this.Rows != result.Count</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested column elements into a new <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> containing the requested elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><c>(rowIndex + length) &gt;= Rows.</c></item></list>
            </exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetColumn(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested column elements into the given vector.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> + <paramref name="length"/>  
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.InsertColumn(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates a new matrix and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new matrix with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetColumnEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the requested matrix columns.
            </summary>
            <param name="index">The column to start enumerating over.</param>
            <param name="length">The number of columns to enumerating over.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over requested matrix columns.</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</item>        
            <item><c>(index + length) &gt;= Columns.</c></item></list>
            </exception>   
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>     
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetColumnEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix columns.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix columns</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetRow(System.Int32)">
            <summary>
            Copies a row into an <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="index">The row to copy.</param>
            <returns>A <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> containing the copied elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetRow(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies a row into to the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="index">The row to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the row into.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>this.Columns != result.Count</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested row elements into a new <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> containing the requested elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><c>(columnIndex + length) &gt;= Columns.</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetRow(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested row elements into a new <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> + <paramref name="length"/>  
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.InsertRow(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates a new matrix and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new matrix with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetRowEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates the requested matrix rows.
            </summary>
            <param name="index">The row to start enumerating over.</param>
            <param name="length">The number of rows to enumerating over.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over requested matrix rows.</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</item>        
            <item><c>(index + length) &gt;= Rows.</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>     
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetRowEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix rows.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates over the matrix rows</returns>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.CopyTo(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Copies the elements of this matrix to the given matrix.
            </summary>
            <param name="target">The matrix to copy values into.</param>
            <exception cref="T:System.ArgumentNullException">If target is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If target is not the same size as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Determinant">
            <summary>Computes the determinant of this matrix.</summary>
            <returns>The determinant of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
            <remarks>The determinant is calculated using LU decomposition.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Trace">
            <summary>Computes the trace of this matrix.</summary>
            <returns>The trace of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetDiagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>        
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If this matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetColumn(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the values of the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to the specified column.
            </summary>
            <param name="index">The column to copy the values to.</param>
            <param name="source">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetColumn(System.Int32,System.Double[])">
            <summary>
            Copies the values of the given array to the specified column.
            </summary>
            <param name="index">The column to copy the values to.</param>
            <param name="source">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetDiagonal(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the values of the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>   
            <exception cref="T:dnAnalytics.NotConformableException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetDiagonal(System.Double[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the array should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:dnAnalytics.NotConformableException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetRow(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the values of the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to the specified row.
            </summary>
            <param name="index">The row to copy the values to.</param>
            <param name="source">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>            
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetRow(System.Int32,System.Double[])">
            <summary>
            Copies the values of the given array to the specified row.
            </summary>
            <param name="index">The row to copy the values to.</param>
            <param name="source">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetLowerTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetStrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetStrictlyLowerTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>   
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetUpperTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetStrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetStrictlyUpperTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowLength">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnLength">The number of columns to copy. Must be positive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number 
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="rowLength"/> or <paramref name="columnLength"/>
            is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.SetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Copies the values of a given matrix into a region in this matrix.
            </summary>
            <param name="rowIndex">The row to start copying to.</param>
            <param name="rowLength">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying to.</param>
            <param name="columnLength">The number of columns to copy. Must be positive.</param>
            <param name="subMatrix">The submatrix to copy from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number 
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception> 
            <item>the size of <paramref name="subMatrix"/> is not at least <paramref name="rowLength"/> x <paramref name="columnLength"/>.</item>
            <exception cref="T:System.ArgumentException">If <paramref name="rowLength"/> or <paramref name="columnLength"/>
            is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToArray">
            <summary>
            Returns this matrix as a multidimensional array.
            </summary>
            <returns>A multidimensional containing the values of this matrix.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToColumnWiseArray">
            <summary>
            Returns the matrix's elements as an array with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToRowWiseArray">
            <summary>
            Returns the matrix's elements as an array with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Plus">
            <summary>
            Returns a clone of this matrix.
            </summary>
            <returns>A clone of this matrix.</returns>
            <remarks>Added as an alternative to the unary addition operator.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Add(System.Double)">
            <summary>
            Adds a scalar to each element in the matrix.
            </summary>
            <param name="scalar">The scalar to add.</param>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Add(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds a scalar to each element in the matrix and places the results into the result matrix.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The results of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Add(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Add(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds another matrix to this matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to add to.</param>
            <param name="result">The results of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Negate">
            <summary>
            Negates each element of this matrix.
            </summary>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Negate(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Negate each element of this matrix and place the results into to result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">if the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Subtract(System.Double)">
            <summary>
            Subtracts a scalar from each value in the matrix.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Subtract(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts a scalar from each in the matrix and place the results into the result matrix.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Subtract(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Subtract(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts another matrix for this matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The results of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Multiply(System.Double)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="scalar">The scalar to multiply with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.PointwiseMultiply(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Pointwise multiplies this matrix with another matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <returns>A new matrix that is the pointwise multiplication of this matrix and <paramref name="other"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.PointwiseMultiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Multiply(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to multiply.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Multiply(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this matrix with another matrix and returns the result.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != other.Rows</strong>.</exception>        
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Multiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Multiply(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix by a vector and returns the result.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If rightSide is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <c>this.Columns != rightSide.Size</c>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If rightSide is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count != this.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.LeftMultiply(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix by a vector and returns the result. The operation is vector * matrix.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If leftSide is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != leftSide.Size</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.LeftMultiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix. The operation is vector * matrix.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If leftSide is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count != this.Columns</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != leftSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Divide(System.Double)">
            <summary>
            Divides each element of the matrix by a scalar.
            </summary>
            <param name="scalar">The scalar to divide by.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Divide(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Divides this matrix by a scalar and places the results into the results matrix.
            </summary>
            <param name="scalar">The scalar to divide the matrix by.</param>
            <param name="result">The result of the division.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Stack(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Stacks this matrix on top of the given matrix and returns the combined matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <returns>The combined matrix.</returns>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Stack(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Stacks this matrix on top of the given matrix and places the result into the result matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows + lower.rows) x this.Columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Append(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Concatenates this matrix with the given matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
            <exception cref="T:System.ArgumentNullException">If right is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != right.Rows.</strong></exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Append(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Concatenates this matrix with the given matrix and places the result into the result matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If right is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != right.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not this.Rows x (this.Columns + right.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.DiagonalStack(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Diagonally stacks his matrix on top of the given matrix. The new matrix is a M-by-N matrix, 
            where M = this.Rows + lower.Rows and N = this.Columns + lower.Columns.
            The values of off the off diagonal matrices/blocks are set to zero.
            </summary>
            <param name="lower">The lower, right matrix.</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <returns>the combined matrix</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.DiagonalStack(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Diagonally stacks his matrix on top of the given matrix and places the combined matrix into the result matrix.
            </summary>
            <param name="lower">The lower, right matrix.</param>
            <param name="result">The combined matrix</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows + lower.rows) x (this.Columns + lower.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.KroneckerProduct(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Computes the Kronecker product of this matrix with the given matrix. The new matrix is M-by-N
            with M = this.Rows * lower.Rows and N = this.Columns * lower.Columns.
            </summary>
            <param name="other">The other matrix.</param>
            <exception cref="T:System.ArgumentNullException">If other is <see langword="null"/>.</exception>
            <returns>The kronecker product of the two matrices.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.KroneckerProduct(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Computes the Kronecker product of this matrix with the given matrix. The new matrix is M-by-N
            with M = this.Rows * lower.Rows and N = this.Columns * lower.Columns.
            </summary>
            <param name="other">The other matrix.</param>
            <param name="result">The kronecker product of the two matrices.</param>
            <exception cref="T:System.ArgumentNullException">If other is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows * lower.rows) x (this.Columns * lower.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToString">
            <summary>A string representation of this matrix.</summary>
            <returns>The string representation of this matrix as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToString(System.String)">
            <summary>A string representation of this matrix.</summary>
            <param name="format">A format specification.</param>
            <returns>The string representation of this matrix as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ToString(System.IFormatProvider)">
            <summary>A string representation of this matrix.</summary>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The string representation of this matrix as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Clone">
            <summary>
            Returns a deep-copy clone of the matrix.
            </summary>
            <returns>A deep-copy clone of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.RangeCheck(System.Int32,System.Int32)">
            <summary>
            Checks to see if the indices are valid, if not it throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.Gemm(System.Double,System.Double,System.Boolean,System.Boolean,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            An implementation of the BLAS GEMM routine: C:= alpha*op(A) * op(B) + beta*C.
            where op is to transpose the matrix or not, and C is this matrix.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="beta">The beta value</param>
            <param name="transposeA">if set to <c>true</c>, transpose <paramref name="a"/>.</param>
            <param name="transposeB">if set to <c>true</c>, transpose <paramref name="b"/>.</param>
            <param name="a">the A matrix.</param>
            <param name="b">the B matrix.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ValueAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the value at the given indices. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may return an incorrect value or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the given indices.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.ValueAt(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the value at the given indices to the given value. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may set an incorrect element or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a <strong>Matrix</strong> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <returns>A <strong>Matrix</strong> with the given dimensions.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <returns>A <strong>Vector</strong> with the given dimension.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_UnaryPlus(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of rightSide. 
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Addition(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <param name="leftSide">One of the matrices to add.</param>
            <param name="rightSide">One of the matrices to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_UnaryNegation(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Subtraction(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts two matrices and returns the results.
            </summary>
            <param name="leftSide">The matrix to subtract from.</param>
            <param name="rightSide">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Division(dnAnalytics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Divides a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to divide.</param>
            <param name="rightSide">The constant to divide the matrix by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Multiply(dnAnalytics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Multiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="leftSide">One of the matrices to multiply.</param>
            <param name="rightSide">One of the matrices to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Multiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Columns ! = rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Matrix.op_Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Count != rightSide.Rows</strong>.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Set or get an element of the matrix.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>A specific element in the matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If either the <paramref name="row"/> or <paramref name="column"/> index is outside the 
            dimensions of this matrix.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Matrix.Columns">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Matrix.Rows">
            <summary>
            The numbers of rows.
            </summary>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Creates a matrix with the given <paramref name="order"/>. The matrix values are the set to zero.
            </summary>
            <param name="order">The order of the new matrix.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="order"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a  <paramref name="rows"/> by <paramref name="columns"/> matrix. The matrix values are the set to zero.
            </summary>
            <param name="rows">The number of rows of the new matrix.</param>
            <param name="columns">The number of columns of the new matrix.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="rows"/> or <paramref name="columns"/>
            is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a rows by columns <strong>Matrix</strong>. The matrix values are the set to the given
            value.
            </summary>
            <param name="rows">The number of rows of the new matrix.</param>
            <param name="columns">The number of columns of the new matrix.</param>
            <param name="value">The value to set all elements of the matrix to.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="rows"/> or <paramref name="columns"/>
            is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Creates a new matrix from another matrix.
            </summary>
            <param name="other">The matrix to create the new matrix from.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Creates a matrix from a multidimensional array.
            </summary>
            <param name="array">The array to create the matrix from.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.ValueAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the value at the given indices. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may return an incorrect value or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the given indices.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.ValueAt(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the value at the given indices to the given value. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may set an incorrect element or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <returns>
            A <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> with the given dimensions.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.CreateVector(System.Int32)">
            <summary>
            Creates a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <returns>
            A <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> with the given dimension.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Clone">
            <summary>
            Returns a deep-copy clone of the matrix.
            </summary>
            <returns>A deep-copy clone of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Clear">
            <summary>
            Sets all values to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.CopyTo(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Copies the elements of this matrix to the given matrix.
            </summary>
            <param name="target">The matrix to copy values into.</param>
            <exception cref="T:System.ArgumentNullException">If target is <strong>null</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If target is not the same size as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.ToColumnWiseArray">
            <summary>
            Returns the matrix's elements as an array with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.SetColumn(System.Int32,System.Double[])">
            <summary>
            Copies the values of the given array to the specified column.
            </summary>
            <param name="index">The column to copy the values to.</param>
            <param name="source">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.GetColumn(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested column elements into the given vector.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> + <paramref name="length"/>  
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Append(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Concatenates this matrix with the given matrix and places the result into the result matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If right is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != right.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not this.Rows x (this.Columns + right.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Add(System.Double)">
            <summary>
            Adds a scalar to each element in the matrix.
            </summary>
            <param name="scalar">The scalar to add.</param>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Determinant">
            <summary>Computes the determinant of this matrix.</summary>
            <returns>The determinant of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
            <remarks>The determinant is calculated using LU decomposition.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If this matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Addition(dnAnalytics.LinearAlgebra.DenseMatrix,dnAnalytics.LinearAlgebra.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <param name="leftSide">One of the matrices to add.</param>
            <param name="rightSide">One of the matrices to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_UnaryNegation(dnAnalytics.LinearAlgebra.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Subtraction(dnAnalytics.LinearAlgebra.DenseMatrix,dnAnalytics.LinearAlgebra.DenseMatrix)">
            <summary>
            Subtracts two matrices and returns the results.
            </summary>
            <param name="leftSide">The matrix to subtract from.</param>
            <param name="rightSide">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Division(dnAnalytics.LinearAlgebra.DenseMatrix,System.Double)">
            <summary>
            Divides a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to divide.</param>
            <param name="rightSide">The constant to divide the matrix by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DenseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DenseMatrix,dnAnalytics.LinearAlgebra.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="leftSide">One of the matrices to multiply.</param>
            <param name="rightSide">One of the matrices to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DenseMatrix,dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Columns ! = rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DenseVector,dnAnalytics.LinearAlgebra.DenseMatrix)">
            <summary>
            Multiplies a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Count != rightSide.Rows</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Multiply(System.Double)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="scalar">The scalar to multiply with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>        
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.PointwiseMultiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Subtract(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Add(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseMatrix.Gemm(System.Double,System.Double,System.Boolean,System.Boolean,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            An implementation of the BLAS GEMM routine: C:= alpha*op(A) * op(B) + beta*C.
            where op is to transpose the matrix or not, and C is this matrix.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="beta">The beta value</param>
            <param name="transposeA">if set to <c>true</c>, transpose <paramref name="a"/>.</param>
            <param name="transposeB">if set to <c>true</c>, transpose <paramref name="b"/>.</param>
            <param name="a">the A matrix.</param>
            <param name="b">the B matrix.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.Vector">
            <summary>
            Defines the base class for <c>Vector</c> classes.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.#ctor(System.Int32)">
            <summary>
            Constructs a <strong>Vector</strong> with the given size.
            </summary>
            <param name="size">The size of the <strong>Vector</strong> to construct.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="size"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Equals(System.Object)">
            <summary>
            Compares two vectors for equality by checking that corresponding vector entries are exactly equal.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Equals(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Compares two vectors for equality by checking that corresponding vector entries are exactly equal.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.GetHashCode">
            <summary>
            Computes a hash for the vector based on 20 entries using the standard .NET hash computation for double arrays.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <remarks>For sparse vectors, <see cref="M:dnAnalytics.LinearAlgebra.Vector.GetIndexedEnumerator"/> will perform better.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.GetIndexedEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that contains the position and value of the element.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> over this vector that contains the position and value of each
            non-zero element.</returns>
            <remarks>The enumerator returns a <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/> with the key being the element index and the value 
            being the value of the element at that index. For sparse vectors, the enumerator will exclude all elements
            with a zero value.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.ToString(System.String,System.IFormatProvider)">
            Returns a <seealso cref="T:System.String"/> representation of this vector using
            the given format and <seealso cref="T:System.IFormatProvider"/>.
            <param name="format">The format to use.</param>
            <param name="formatProvider">The format provider to use.</param>       
            <returns>The string representation of the value of <strong>this</strong> instance as specified by format and provider.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.InfinityNorm">
            <summary>Calculates the infinity norm of this vector.</summary>
            <returns>The infinity norm of this vector.</returns>  
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.PNorm(System.Int32)">
            <summary>
            Computes the P-Norm of the vector.
            </summary>
            <param name="pValue">The norm to compute.</param>
            <returns>Returns the value of the P-norm.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Normalize(System.Int32)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="pValue">The norm under which to normalize the vector under.</param>
            <returns>A normalized version of the vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="pValue"/> is smaller than 1.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Maximum">
            <summary>
            Returns the value of maximum element.
            </summary>
            <returns>The value of maximum element.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>          
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Minimum">
            <summary>
            Returns the value of the minimum element.
            </summary>
            <returns>The value of the minimum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>  
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Clear">
            <summary>
            Sets the each element to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.CopyTo(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the values of this vector into the target vector.
            </summary>
            <param name="target">The vector to copy elements into.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="target"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.CopyTo(dnAnalytics.LinearAlgebra.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested elements from this vector to another.
            </summary>
            <param name="destination">The vector to copy the elements to.</param>
            <param name="offset">The element to start copying from.</param>
            <param name="destinationOffset">The element to start copying to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.DotProduct">
            <summary>Computes the dot product of this vector with itself.</summary>
            <returns>The dot product of this vector and itself.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.DotProduct(dnAnalytics.LinearAlgebra.Vector)">
            <summary>Computes the dot product of this vector with another.</summary>
            <param name="other">The vector to compute the dot product with.</param>
            <returns>The dot product of this vector and other.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector  and other are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> over the specified elements.
            </summary>
            <param name="index">The element to start copying from.</param>
            <param name="length">The number of elements to enumerate over.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> over a range of this vector.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> or <paramref name="index"/> + <paramref name="length"/>
            is greater than the vector's length. </exception>
            <remarks>The enumerator returns a <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/> with the key being the element index and the value 
            being the value of the element at that index.</remarks>
            <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/>
            <seealso cref="T:System.Collections.Generic.IEnumerator`1"/>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.GetSubVector(System.Int32,System.Int32)">
            <summary>
            Creates a vector containing specified elements.
            </summary>
            <param name="index">The first element to begin copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A vector containing a copy of the specified elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><list><item>If <paramref name="index"/> is not positive or
            greater than or equal to the size of the vector.</item>
            <item>If <paramref name="index"/> + <paramref name="length"/> is greater than or equal to the size of the vector.</item>
            </list></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the vector's elements.
            </summary>
            <returns>The sum of the absolute value of the vector's elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.ToArray">
            <summary>
            Returns the data contained in the vector as an array.
            </summary>
            <returns>The vector's data as an array.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.SetValues(System.Double[])">
            <summary>
            Set the values of this vector to the given values.
            </summary>
            <param name="values">The array containing the values to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="values"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Add(System.Double)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Add(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Plus">
            <summary>
            Returns a clone of this vector.
            </summary>
            <returns>A clone of this vector.</returns>
            <remarks>Added as an alternative to the unary addition operator.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Add(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Add(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.AddScaledVector(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds a scaled vector to the current vector.
            </summary>
            <param name="scale">The scale factor with which to multiply the <paramref name="other"/> vector.</param>
            <param name="other">The vector that should be scaled and added.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.AddScaledVector(System.Double,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds a scaled vector to the current vector.
            </summary>
            <param name="scale">The scale factor with which to multiply the <paramref name="other"/> vector.</param>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.PointwiseMultiply(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Pointwise multiplies this vector with another vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <returns>A new vector that is the pointwise multiplication of this vector and <paramref name="other"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.PointwiseMultiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Negate">
            <summary>
            Negates the values of this vector.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Subtract(System.Double)">
            <summary>
            Subtracts a scalar from each element of the vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Subtract(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Subtract(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Subtract(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Subtracts another vector from this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other"/> or <paramref name="result"/> is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Divide(System.Double)">
            <summary>
            Divides this vector by scalar.
            </summary>
            <param name="scalar">The scalar to divide this vector by.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Divide(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Divides this vector by scalar and store the result in the result vector.
            </summary>
            <param name="scalar">The scalar to divide this vector by.</param>
            <param name="result">The vector to store the result of the division.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Multiply(System.Double)">
            <summary>
            Multiplies this vector by scalar.
            </summary>
            <param name="scalar">The scalar to multiply this vector with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Multiply(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this vector by scalar and store the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply this vector with.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Multiply(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this vector with another vector (this x other) and returns the resulting <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/>.
            </summary>
            <param name="other">The vector to multiply the vector with.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other"/> is <see langword="null"/>.</exception> 
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this vector with another vector (this x other) and places the result into the result vector.
            </summary>
            <param name="other">The vector to multiply the vector with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other"/>  or <paramref name="result"/>  is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If result matrix does not have the correct dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.ToString">
             <summary>
             Returns a <seealso cref="T:System.String"/> representation of this vector.
             </summary>
            <returns>The string representation of this vector as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.ToString(System.String)">
             <summary>
             Returns a <seealso cref="T:System.String"/> representation of this vector using
             the given format.
             </summary>
             <param name="format">The format to use.</param>
            <returns>The string representation of this vector as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.ToString(System.IFormatProvider)">
             <summary>
             Returns a <seealso cref="T:System.String"/> representation of this vector using
             the given <seealso cref="T:System.IFormatProvider"/>.
             </summary>
             <param name="formatProvider">The format provider to use.</param>
            <returns>The string representation of this vector as comma separated values.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.Clone">
            <summary>
            Returns a deep-copy clone of the vector.
            </summary>
            <returns>A deep-copy clone of the vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_UnaryPlus(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Returns a <strong>Vector</strong> containing the same values of rightSide. 
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_Addition(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">One of the vectors to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_UnaryNegation(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Negates each element of the vector.
            </summary>
            <param name="rightSide">The vector to negate.</param>
            <returns>A vector containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_Subtraction(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Subtracts two vectors and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_Division(dnAnalytics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Divides a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The constant to divide the vector by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_Multiply(dnAnalytics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Multiplies a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.op_Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiples two <strong>Vectors</strong>. The first vector is treated as column vector and
            the second as row vector.
            </summary>
            <param name="leftSide">One of the vectors to multiply.</param>
            <param name="rightSide">One of the vectors to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector uses.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>A matrix with the given dimensions.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.Vector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size;
            </summary>
            <param name="size">The size of the <strong>Vector</strong> to create.</param>
            <returns>The new <strong>Vector</strong>.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Vector.Count">
            <summary>
            The number of elements in the vector.
            </summary>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.Vector.Item(System.Int32)">
            <summary>Gets or sets the value at the given <paramref name="index"/>.</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given <paramref name="index"/>.</returns> 
            <exception cref="T:System.IndexOutOfRangeException">If <paramref name="index"/> is negative or 
            greater than the size of the vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.#ctor(System.Int32)">
            <summary> 
            Constructs a vector with the given size.
            </summary> 
            <param name="size">the size of the vector.</param> 
            <exception cref="T:System.ArgumentException">If <paramref name="size"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.#ctor(System.Int32,System.Double)">
            <summary> 
            Constructs a vector with the given size and with each element set the given value. 
            </summary> 
            <param name="size">the size of the vector.</param> 
            <param name="value">the value to set each element to.</param> 
            <exception cref="T:System.ArgumentException">If <paramref name="size"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.#ctor(System.Double[])">
            <summary> 
            Constructs a vector from the given array.
            </summary> 
            <param name="array">the array to copy the values from.</param> 
            <exception cref="T:System.NullReferenceException">If <paramref name="array"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary> 
            Constructs a vector from the given list.
            </summary> 
            <param name="list">the list to copy the values from.</param> 
            <exception cref="T:System.NullReferenceException">If <paramref name="list"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.#ctor(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates a new vector from another vector.
            </summary>
            <param name="other">The matrix to create the new matrix from.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> of the given size;
            </summary>
            <param name="size">The size of the <strong>Vector</strong> to create.</param>
            <returns>The new <strong>Vector</strong>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector uses.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>A matrix with the given dimensions.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Clear">
            <summary>
            Sets the each element to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.CopyTo(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the values of this vector into the target vector.
            </summary>
            <param name="target">The vector to copy elements into.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="target"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.GetSubVector(System.Int32,System.Int32)">
            <summary>
            Creates a vector containing specified elements.
            </summary>
            <param name="index">The first element to begin copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A vector containing a copy of the specified elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><list><item>If <paramref name="index"/> is not positive or
            greater than or equal to the size of the vector.</item>
            <item>If <paramref name="index"/> + <paramref name="length"/> is greater than or equal to the size of the vector.</item>
            </list></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Add(System.Double)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Subtract(System.Double)">
            <summary>
            Subtracts a scalar from each element of the vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.ToArray">
            <summary>
            Returns the data contained in the vector as an array.
            </summary>
            <returns>The vector's data as an array.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.SetValues(System.Double[])">
            <summary>
            Set the values of this vector to the given values.
            </summary>
            <param name="values">The array containing the values to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="values"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_UnaryPlus(dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the same values of rightSide. 
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_Addition(dnAnalytics.LinearAlgebra.DenseVector,dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">One of the vectors to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_UnaryNegation(dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Negates each element of the vector.
            </summary>
            <param name="rightSide">The vector to negate.</param>
            <returns>A vector containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_Subtraction(dnAnalytics.LinearAlgebra.DenseVector,dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Subtracts two vectors and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_Division(dnAnalytics.LinearAlgebra.DenseVector,System.Double)">
            <summary>
            Divides a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The constant to divide the vector by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Multiplies a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_Multiply(dnAnalytics.LinearAlgebra.DenseVector,System.Double)">
            <summary>
            Multiplies a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.op_Multiply(dnAnalytics.LinearAlgebra.DenseVector,dnAnalytics.LinearAlgebra.DenseVector)">
            <summary>
            Multiples two <strong>Vectors</strong>. The first vector is treated as column vector and
            the second as row vector.
            </summary>
            <param name="leftSide">One of the vectors to multiply.</param>
            <param name="rightSide">One of the vectors to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.CopyTo(dnAnalytics.LinearAlgebra.Vector,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copies the requested elements from this vector to another.
            </summary>
            <param name="destination">The vector to copy the elements to.</param>
            <param name="offset">The element to start copying from.</param>
            <param name="destinationOffset">The element to start copying to.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.DotProduct(dnAnalytics.LinearAlgebra.Vector)">
            <summary>Computes the dot product of this vector with another.</summary>
            <param name="other">The vector to compute the dot product with.</param>
            <returns>The dot product of this vector and other.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector  and other are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Add(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Subtract(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.Multiply(System.Double)">
            <summary>
            Multiplies this vector by scalar.
            </summary>
            <param name="scalar">The scalar to multiply this vector with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DenseVector.PointwiseMultiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.DenseVector.Item(System.Int32)">
            <summary>Gets or sets the value at the given <paramref name="index"/>.</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given <paramref name="index"/>.</returns> 
            <exception cref="T:System.IndexOutOfRangeException">If <paramref name="index"/> is negative or 
            greater than the size of the vector.</exception>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices. 
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.DiagonalMatrix.mData">
            <summary>
            The array containing the diagonal entries.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Creates a square diagonal matrix with the given <paramref name="order"/>. The matrix values are the set to zero.
            </summary>
            <param name="order">The order of the new matrix.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="order"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a diagonal matrix with the given <paramref name="order"/>. The matrix values are the set to zero.
            </summary>
            <param name="order">The order of the new matrix.</param>
            <param name="val">The value that each diagonal element gets.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="order"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a square diagonal matrix with the given number of <paramref name="rows"/> and <paramref name="columns"/>. 
            The matrix values are the set to zero.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="rows"/> and <paramref name="columns"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a square diagonal matrix with the given number of <paramref name="rows"/> and <paramref name="columns"/>. 
            The matrix values are the set to zero.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="val">The value that each diagonal element gets.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="rows"/> and <paramref name="columns"/> is less than one.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(dnAnalytics.LinearAlgebra.DiagonalMatrix)" -->
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(System.Double[])">
            <summary>
            Creates a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/> class.
            </summary>
            <param name="source">The array of doubles from which the data will be
            copied to the diagonal.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.#ctor(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/> class.
            </summary>
            <param name="source">The array of doubles from which the data will be
            copied to the diagonal.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <returns>
            A <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> with the given dimensions.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.CreateVector(System.Int32)">
            <summary>
            Creates a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <returns>
            A <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> with the given dimension.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.ValueAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the value at the given indices. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may return an incorrect value or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the given indices.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.ValueAt(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the value at the given indices to the given value. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may set an incorrect element or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.IndexOutOfRangeException">When trying to set an off diagonal element.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Addition(dnAnalytics.LinearAlgebra.DiagonalMatrix,dnAnalytics.LinearAlgebra.DiagonalMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <param name="leftSide">One of the matrices to add.</param>
            <param name="rightSide">One of the matrices to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_UnaryNegation(dnAnalytics.LinearAlgebra.DiagonalMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Subtraction(dnAnalytics.LinearAlgebra.DiagonalMatrix,dnAnalytics.LinearAlgebra.DiagonalMatrix)">
            <summary>
            Subtracts two matrices and returns the results.
            </summary>
            <param name="leftSide">The matrix to subtract from.</param>
            <param name="rightSide">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Division(dnAnalytics.LinearAlgebra.DiagonalMatrix,System.Double)">
            <summary>
            Divides a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to divide.</param>
            <param name="rightSide">The constant to divide the matrix by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DiagonalMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.DiagonalMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DiagonalMatrix,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Columns ! = rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.DiagonalMatrix)">
            <summary>
            Multiplies a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Count != rightSide.Rows</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Clear">
            <summary>
            Sets all values to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetColumn(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies a column into to the given vector.
            </summary>
            <param name="index">The column to copy.</param>
            <param name="result">The vector to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:dnAnalytics.NotConformableException">If the result vector is of the incorrect size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetColumn(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested column elements into the given vector.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> + <paramref name="length"/>  
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetRow(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies a row into to the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="index">The row to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the row into.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>this.Columns != result.Count</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetRow(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested row elements into a new <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> + <paramref name="length"/>
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.CopyTo(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Copies the elements of this matrix to the given matrix.
            </summary>
            <param name="target">The matrix to copy values into.</param>
            <exception cref="T:System.ArgumentNullException">If target is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If target is not the same size as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Clone">
            <summary>
            Returns a deep-copy clone of the <b>Matrix</b>.
            </summary>
            <returns>A deep-copy clone of the <b>Matrix</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>      
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Inverse">
            <summary>
            Returns the inverse of this matrix by inverting all diagonal elements.
            </summary>
            <returns>The inverse of this matrix as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.SingularMatrixException">When the diagonal matrix is singular.</exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">When the matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetLowerTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetStrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetStrictlyLowerTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>   
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetUpperTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetStrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetStrictlyUpperTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowLength">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnLength">The number of columns to copy. Must be positive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number 
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="rowLength"/> or <paramref name="columnLength"/>
            is not positive.</exception>
            <returns>The resulting submatrix as a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.ToArray">
            <summary>
            Returns this matrix as a multidimensional array.
            </summary>
            <returns>a multidimensional containing the values of this matrix.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.InsertColumn(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates a new sparse matrix and inserts the given column at the given index.
            </summary>
            <param name="columnIndex">The index of where to insert the column.</param>
            <param name="column">The column to insert.</param>
            <returns>A new <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.InsertRow(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates a new sparsematrix and inserts the given row at the given index.
            </summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Stack(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Stacks this matrix on top of the given matrix and returns the combined matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <returns>The combined matrix as a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Stack(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Stacks this matrix on top of the given matrix and places the result into the result matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows + lower.rows) x this.Columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Append(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Concatenates this matrix with the given matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <returns>The combined matrix as a SparseMatrix.</returns>
            <exception cref="T:System.ArgumentNullException">If right is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != right.Rows.</strong></exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Append(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Concatenates this matrix with the given matrix and places the result into the result matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If right is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != right.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not this.Rows x (this.Columns + right.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.DiagonalStack(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Diagonally stacks his matrix on top of the given matrix and places the combined matrix into the result matrix.
            </summary>
            <param name="lower">The lower, right matrix.</param>
            <param name="result">The combined matrix</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows + lower.rows) x (this.Columns + lower.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.PointwiseMultiply(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Pointwise multiplies this matrix with another matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="other"/> are not the same size.</exception>
            <returns>the pointwise multiplication of the two matrices as a <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Multiply(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this matrix with another matrix and returns the result. If <paramref name="other"/> is a 
            <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>, the result will be a new <see cref="T:dnAnalytics.LinearAlgebra.DiagonalMatrix"/>. If <paramref name="other"/> is a 
            <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/>, the result will be a <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/>. In all other cases, the result 
            will be a <see cref="T:dnAnalytics.LinearAlgebra.DenseMatrix"/>.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != other.Rows</strong>.</exception>        
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Multiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If rightSide is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count != this.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.LeftMultiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix. Note the operation is vector * matrix.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If leftSide is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>result.Count != this.Columns</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>this.Rows != leftSide.Count</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Determinant">
            <summary>Computes the determinant of this matrix.</summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Add(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Negate">
            <summary>
            Negates each element of this matrix.
            </summary>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Subtract(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.Multiply(System.Double)">
            <summary>
            Multiplies each element of this matrix with a scalar overwriting the values of this matrix.
            </summary>
            <param name="scalar">the scalar to multiply with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.DiagonalMatrix.op_Multiply(dnAnalytics.LinearAlgebra.DiagonalMatrix,dnAnalytics.LinearAlgebra.DiagonalMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="leftSide">One of the matrices to multiply.</param>
            <param name="rightSide">One of the matrices to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.DiagonalMatrix.Data">
            <summary>
            Returns a reference to the data for the diagonal matrix.
            </summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.HouseholderTransformation">
            <summary>
            Computes the Householder transformation of a vector.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.HouseholderTransformation.ReflectionVector">
            <summary>
            The Householder reflection as a vector.  The vector is normalized so that V[0] = 1.
            </summary>
            <returns>The reflection vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.HouseholderTransformation.ReflectionMatrix">
            <summary>
            The Householder reflection as a matrix.
            H = I - ( (2/v^Tv)*(vv^T)
            where v is Householder.Vector.
            </summary>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.HouseholderTransformation.Transformation">
            <summary>
            The transformation of the original vector. 
            transformation = H*v
            where H = Householder.Matrix and v is the original vector.
            </summary>
            <returns>The transformed vector.</returns>
            <remarks>All elements except the first are zero.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.HouseholderTransformation.#ctor(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.HouseholderTransformation"/> class.
            </summary>
            <param name="vector">The vector to transform.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.InvalidMatrixOperationException">
            <summary>The exception is thrown when a requested matrix operation is not supported by that matrix type.</summary>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.MatrixException">
            <summary>
            Defines a base class for exceptions that occur when executing matrix
            operations.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixException.#ctor">
            <summary>Initializes a new instance of the <strong>MatrixException</strong> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixException.#ctor(System.String)">
            <summary>Initializes a new instance of the <strong>MatrixException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>MatrixException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <strong>MatrixException</strong> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.InvalidMatrixOperationException.#ctor">
            <summary>Initializes a new instance of the <b>InvalidMatrixOperationException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.InvalidMatrixOperationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>InvalidMatrixOperationException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.InvalidMatrixOperationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>InvalidMatrixOperationException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.InvalidMatrixOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>InvalidMatrixOperationException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">
            <summary>The exception is thrown when a singular matrix is passed a method not expecting one.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixNotSquareException.#ctor">
            <summary>Initializes a new instance of the <strong>SingularMatrixException</strong> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixNotSquareException.#ctor(System.String)">
            <summary>Initializes a new instance of the <strong>SingularMatrixException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixNotSquareException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>SingularMatrixException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.MatrixNotSquareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <strong>SingularMatrixException</strong> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">
            <summary>The exception is thrown when a none positive definite matrix is passed a method not expecting one.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException.#ctor">
            <summary>Initializes a new instance of the <b>NotPositiveDefiniteException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>NotPositiveDefiniteException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>NotPositiveDefiniteException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>NotPositiveDefiniteException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.SingularMatrixException">
            <summary>The exception is thrown when a singular matrix is passed a method not expecting one.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SingularMatrixException.#ctor">
            <summary>Initializes a new instance of the <b>SingularMatrixException</b> class.</summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SingularMatrixException.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>SingularMatrixException</b> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SingularMatrixException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <b>SingularMatrixException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <b>catch</b> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SingularMatrixException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <b>SingularMatrixException</b> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.SparseMatrix">
            <summary>
            A matrix class using sparse storage.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Creates a matrix with the given <paramref name="order"/>. The matrix values are the set to zero.
            </summary>
            <param name="order">The order of the new matrix.</param>
            <exception cref="T:System.ArgumentException">If either <paramref name="order"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.#ctor(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Creates a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> class.
            </summary>
            <remarks>
            When creating a new <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> based on another matrix
            one should consider carefully how many non-zero values there are in the
            <paramref name="source"/> matrix. The usage of a sparse matrix only makes
            sense if the matrix is actually 'sparse', i.e. contains relatively few 
            non-zero values.
            </remarks>
            <param name="source">
            The <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> from which the data will
            be copied to the new instance.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.#ctor(dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Creates a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> class.
            </summary>
            <param name="source">
            The <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> from which the data will
            be copied to the new instance.
            </param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Creates a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> class.
            </summary>
            <remarks>
            When creating a new <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> based on an array of doubles
            one should consider carefully how many non-zero values there are in the
            <paramref name="source"/>. The usage of a sparse matrix only makes
            sense if the matrix is actually 'sparse', i.e. contains relatively few 
            non-zero values.
            </remarks>
            <param name="source">The array of doubles from which the data will be
            copied to the new instance.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a <strong>Matrix</strong> for the given number of rows and columns.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <returns>
            A <strong>Matrix</strong> with the given dimensions.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>Vector</strong> with a the given dimension.
            </summary>
            <param name="size">The size of the vector.</param>
            <returns>
            A <strong>Vector</strong> with the given dimension.
            </returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Addition(dnAnalytics.LinearAlgebra.SparseMatrix,dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <param name="leftSide">One of the matrices to add.</param>
            <param name="rightSide">One of the matrices to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_UnaryNegation(dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Subtraction(dnAnalytics.LinearAlgebra.SparseMatrix,dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Subtracts two matrices and returns the results.
            </summary>
            <param name="leftSide">The matrix to subtract from.</param>
            <param name="rightSide">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Division(dnAnalytics.LinearAlgebra.SparseMatrix,System.Double)">
            <summary>
            Divides a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to divide.</param>
            <param name="rightSide">The constant to divide the matrix by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.SparseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.SparseMatrix,dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="leftSide">One of the matrices to multiply.</param>
            <param name="rightSide">One of the matrices to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.SparseMatrix,dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Columns ! = rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.op_Multiply(dnAnalytics.LinearAlgebra.SparseVector,dnAnalytics.LinearAlgebra.SparseMatrix)">
            <summary>
            Multiplies a <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>leftSide.Count != rightSide.Rows</strong>.</exception>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseMatrix.mValues">
            <summary>
            The array containing the actual non-zero values. Stored in a compressed
            row fashion.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseMatrix.mColumnIndices">
            <summary>
            An array containing the column indices of the non-zero values.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseMatrix.mRowIndices">
            <summary>
            The array containing the row indices of the existing rows. 
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseMatrix.mValueCount">
            <summary>
            The total number of non-zero values in the matrix.
            </summary>
            <remarks>
            This variable keeps track of the number of non-zero values that are stored
            in the <b>mValues</b> and <b>mColumnIndices</b> array's. Because of this
            <b>mValueCount</b> also indicates the 'length' of the array's. Note that the
            actual arrays may be longer (but never shorter) than indicated by
            <b>mValueCount</b>. If the actual arrays are longer than indicated reading
            beyond the number of values (i.e. <b>mValueCount</b>) will produce garbage
            data.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseMatrix"/> class.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.FindItem(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Finds either the item indicated by the given indices (returns <b>true</b>) or the 
            insert position (returns <b>false</b>) in the values array. 
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.FindRowStartAndEnd(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Locates the start and end of the row with the specified index. 
            </summary>
            <param name="rowIndex">The index of the row that must be located.</param>
            <param name="startIndex">The index of the first element in the <see cref="F:dnAnalytics.LinearAlgebra.SparseMatrix.mValues"/> array that belongs
            to the given row.</param>
            <param name="endIndex">The index of the first element in the <see cref="F:dnAnalytics.LinearAlgebra.SparseMatrix.mValues"/> array that belongs
            to the given row + 1.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.ValueAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the value at the given indices. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may return an incorrect value or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The value at the given indices.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.ValueAt(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the value at the given indices to the given value. <strong>This method is not ranged checked.</strong> If the
            indices are outside the dimensions of the matrix, it may set an incorrect element or throw
            an <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <param name="value">The value to set.</param>
            <exception cref="T:System.IndexOutOfRangeException">Depending on the implementation, an <see cref="T:System.IndexOutOfRangeException"/>
            may be thrown if one of the indices is outside the dimensions of the matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.L1Norm">
            <summary>Calculates the L1 norm.</summary>
            <returns>The L1 norm of the matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.L2Norm">
            <summary>Calculates the L2 norm.</summary>
            <returns>The L2 norm of the matrix.</returns>   
            <remarks>For sparse matrices, the L2 norm is computed using a dense implementation of singular value decomposition. 
            In a later release, it will be replaced with a sparse implementation.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.InfinityNorm">
            <summary>Calculates the infinity norm of this matrix.</summary>
            <returns>The infinity norm of this matrix.</returns>      
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
            <remarks>The condition number is calculated using singular value decomposition.</remarks>
            <exception cref="T:dnAnalytics.ConvergenceFailedException">If the singular value decomposition
            cannot converge to a solution.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Clear">
            <summary>
            Sets all values to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetColumn(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies a column into to the given vector.
            </summary>
            <param name="index">The column to copy.</param>
            <param name="result">The vector to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result matrix is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:dnAnalytics.NotConformableException">If the result vector is of the incorrect size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetColumn(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested column elements into the given vector.
            </summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> + <paramref name="length"/>  
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetRow(System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies a row into to the given <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="index">The row to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the row into.</param>
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>this.Columns != result.Count</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetRow(System.Int32,System.Int32,System.Int32,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the requested row elements into a new <see cref="T:dnAnalytics.LinearAlgebra.Vector"/>.
            </summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <param name="result">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> to copy the column into.</param>
            <exception cref="T:System.ArgumentNullException">If the result <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> + <paramref name="length"/>
            is greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count &lt; length</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.CopyTo(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Copies the elements of this matrix to the given matrix.
            </summary>
            <param name="target">The matrix to copy values into.</param>
            <exception cref="T:System.ArgumentNullException">If target is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If target is not the same size as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Determinant">
            <summary>Computes the determinant of this matrix.</summary>
            <returns>The determinant of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If the matrix is not square.</exception>
            <remarks>The determinant is calculated using LU decomposition.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Transpose">
            <summary>
            Returns the transpose of this matrix.
            </summary>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
            <exception cref="T:dnAnalytics.LinearAlgebra.MatrixNotSquareException">If this matrix is not square.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetLowerTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetStrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetStrictlyLowerTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>   
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetUpperTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetStrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetStrictlyUpperTriangle(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowLength">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnLength">The number of columns to copy. Must be positive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number 
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="rowLength"/> or <paramref name="columnLength"/>
            is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.ToArray">
            <summary>
            Returns this matrix as a multidimensional array.
            </summary>
            <returns>a multidimensional containing the values of this matrix.</returns>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Add(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Negate">
            <summary>
            Negates each element of this matrix.
            </summary>        
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Subtract(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Multiply(System.Double)">
            <summary>
            Multiplies each element of this matrix with a scalar overwriting the values of this matrix.
            </summary>
            <param name="scalar">the scalar to multiply with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.PointwiseMultiply(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Pointwise multiplies this matrix with another matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this matrix and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Multiply(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != other.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not the this.Rows x other.Columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If rightSide is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>result.Count != this.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Columns != rightSide.Count</strong>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.LeftMultiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this matrix with a vector and places the results into the result matrix. Note the operation is vector * matrix.
            </summary>
            <param name="leftSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If leftSide is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>result.Count != this.Columns</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <b>this.Rows != leftSide.Count</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Stack(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Stacks this matrix on top of the given matrix and places the result into the result matrix.
            </summary>
            <param name="lower">The matrix to stack this matrix upon.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>upper.Columns != lower.Columns</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows + lower.rows) x this.Columns.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Append(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Concatenates this matrix with the given matrix and places the result into the result matrix.
            </summary>
            <param name="right">The matrix to concatenate.</param>
            <param name="result">The combined matrix.</param>
            <exception cref="T:System.ArgumentNullException">If right is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <strong>this.Rows != right.Rows</strong>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not this.Rows x (this.Columns + right.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.DiagonalStack(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Diagonally stacks his matrix on top of the given matrix and places the combined matrix into the result matrix.
            </summary>
            <param name="lower">The lower, right matrix.</param>
            <param name="result">The combined matrix</param>
            <exception cref="T:System.ArgumentNullException">If lower is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <see langword="null"/>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If the result matrix's dimensions are not (this.Rows + lower.rows) x (this.Columns + lower.Columns).</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseMatrix.Clone">
            <summary>
            Returns a deep-copy clone of the <b>Matrix</b>.
            </summary>
            <returns>A deep-copy clone of the <b>Matrix</b>.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.SparseMatrix.NonZeros">
            <summary>
            Returns the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="T:dnAnalytics.LinearAlgebra.SparseVector">
            <summary>
            A vector class using sparse storage.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.#ctor(System.Int32)">
            <summary>
            Creates instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseVector"/> class.
            </summary>
            <param name="size">The size of the vector.</param>
            <exception cref="T:System.ArgumentException">If the size of the vector is smaller than 1.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.#ctor(System.Double[])">
            <summary>
            Creates instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseVector"/> class.
            </summary>
            <param name="values">The values to fill the vector with.</param>
            <exception cref="T:System.ArgumentNullException">If the values array is <b>null</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.#ctor(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Creates instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseVector"/> class.
            </summary>
            <param name="source">The <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> from which the values for the current instance will be copied.</param>
            <exception cref="T:System.ArgumentNullException">If source is <b>null</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a <strong>SparseVector</strong> of the given size and with each element set the given value.
            </summary>
            <param name="size">the size of the vector.</param> 
            <param name="value">the value to set each element to.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="size"/> is less than one.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.CreateVector(System.Int32)">
            <summary>
            Creates a <strong>SparseVector</strong> of the given size.
            </summary>
            <param name="size">The size of the <strong>SparseVector</strong> to create.</param>
            <returns>The new <strong>Vector</strong>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.CreateMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix with the given dimensions using the same storage type
            as this vector uses.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <returns>A matrix with the given dimensions.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_UnaryPlus(dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the same values of rightSide. 
            </summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_Addition(dnAnalytics.LinearAlgebra.SparseVector,dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">One of the vectors to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_UnaryNegation(dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Negates each element of the vector.
            </summary>
            <param name="rightSide">The vector to negate.</param>
            <returns>A vector containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_Subtraction(dnAnalytics.LinearAlgebra.SparseVector,dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Subtracts two vectors and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_Division(dnAnalytics.LinearAlgebra.SparseVector,System.Double)">
            <summary>
            Divides a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The constant to divide the vector by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_Multiply(System.Double,dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Multiplies a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_Multiply(dnAnalytics.LinearAlgebra.SparseVector,System.Double)">
            <summary>
            Multiplies a <strong>Vector</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.op_Multiply(dnAnalytics.LinearAlgebra.SparseVector,dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Multiples two <strong>Vectors</strong>. The first vector is treated as column vector and
            the second as row vector.
            </summary>
            <param name="leftSide">One of the vectors to multiply.</param>
            <param name="rightSide">One of the vectors to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseVector.mValues">
            <summary>
            The array containing the actual values; only the non-zero values are stored.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseVector.mIndices">
            <summary>
            The indices of the non-zero entries.
            </summary>
        </member>
        <member name="F:dnAnalytics.LinearAlgebra.SparseVector.mValueCount">
            <summary>
            The number of values stored in the values array.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.#ctor(dnAnalytics.LinearAlgebra.SparseVector)">
            <summary>
            Creates instance of the <see cref="T:dnAnalytics.LinearAlgebra.SparseVector"/> class.
            </summary>
            <param name="source">The <see cref="T:dnAnalytics.LinearAlgebra.SparseVector"/> from which the values for the current instance will be copied.</param>
            <exception cref="T:System.ArgumentNullException">if source is <b>null</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.FindItem(System.Int32,System.Int32@)">
            <summary>
            Locates the position of the given item.
            </summary>
            <param name="index">The index of the requested item.</param>
            <param name="itemIndex">The index of the requested item in the internal array.</param>
            <returns><b>true</b> if the specified index exists; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.FindItemForSizeTwoArray(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Performs a search for a specified item in an array of size two.
            </summary>
            <remarks>
            An array with size two is a special case when performing a binary search so this
            method is used to handle that special case.
            </remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.GrowStorage">
            <summary>
            Increases the size of both the mValues and the mIndices array's.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.GrowthSize">
            <summary>
            Calculates the amount with which to grow the storage array's if they need to be
            increased in size.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.InsertValue(System.Int32,System.Double)">
            <summary>
            Inserts an item into the array.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.DeleteItem(System.Int32)">
            <summary>
            Deletes an item from the vector.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.InfinityNorm">
            <summary>
            Calculates the infinity norm of this vector.
            </summary>
            <returns>The infinity norm of this vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.PNorm(System.Int32)">
            <summary>
            Computes the P-Norm of the vector.
            </summary>
            <param name="pValue">The norm to compute.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>the value of the absolute maximum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element if it exists; otherwise -1.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <remarks>
            Normally the smallest absolute minimum element will have a value of zero. If
            there are more elements with this value this method will return the first
            element with that value.
            </remarks>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Maximum">
            <summary>
            Returns the value of maximum element.
            </summary>
            <returns>The value of maximum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.MaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Minimum">
            <summary>
            Returns the value of the minimum element.
            </summary>
            <returns>The value of the minimum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Clear">
            <summary>
            Sets the each element to zero.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.CopyTo(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Copies the values of this vector into the target vector.
            </summary>
            <param name="target">The vector to copy elements into.</param>
            <exception cref="T:System.ArgumentNullException">If target is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If target is not the same size as this vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.DotProduct">
            <summary>
             Computes the dot product of this vector with itself.
             </summary>
            <returns>The dot product of this vector and itself.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.DotProduct(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Computes the dot product of this vector with another.
            </summary>
            <param name="other">The vector to compute the dot product with.</param>
            <returns>The dot product of this vector and other.</returns>
            <exception cref="T:System.ArgumentNullException">If the other vector is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size
            </exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.GetIndexedEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that contains the position and value of the element.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> over this vector that contains the position and value of each
            non-zero element.
            </returns>
            <remarks>The enumerator returns a <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/> with the key being the element index and the value
            being the value of the element at that index. For sparse vectors, the enumerator will exclude all elements
            with a zero value.</remarks>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.GetSubVector(System.Int32,System.Int32)">
            <summary>
            Creates a vector containing specified elements.
            </summary>
            <param name="index">The first element to begin copying from.</param>
            <param name="length">The number of elements to copy.</param>
            <returns>A vector containing a copy of the specified elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><list><item>If <paramref name="index"/> is not positive or
            greater than or equal to the size of the vector.</item>
            <item>If <paramref name="index"/> + <paramref name="length"/> is greater than or equal to the size of the vector.</item>
            </list></exception>
            <exception cref="T:System.ArgumentException">If <paramref name="length"/> is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Sum">
            <summary>
            Computes the sum of the elements of this vector.
            </summary>
            <returns>The sum of the elements of this vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.SumMagnitudes">
            <summary>
            Computes the sum of the absolute value of the elements of this vector.
            </summary>
            <returns>The sum of the absolute value of the elements of this vector.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.ToArray">
            <summary>
            Returns the data contained in the vector as an array.
            </summary>
            <returns>The data as an array.</returns>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.SetValues(System.Double[])">
            <summary>
            Set the values of this vector to the given values.
            </summary>
            <param name="values">The array containing the values to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/> is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If <paramref name="values"/> is not the same size as this vector.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.AddScaledVector(System.Double,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds a scaled vector to the current vector.
            </summary>
            <param name="scale">The scale factor with which to multiply the <paramref name="other"/> vector.</param>
            <param name="other">The vector that should be scaled and added.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.AddScaledVector(System.Double,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Adds a scaled vector to the current vector.
            </summary>
            <param name="scale">The scale factor with which to multiply the <paramref name="other"/> vector.</param>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.PointwiseMultiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If the other vector is <see langword="null"/>.</exception> 
            <exception cref="T:System.ArgumentNullException">If the result vector is <see langword="null"/>.</exception> 
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="other"/> are not the same size.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If this vector and <paramref name="result"/> are not the same size.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Negate">
            <summary>
            Negates the values of this vector.
            </summary>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Multiply(System.Double)">
            <summary>
            Multiplies this vector by scalar.
            </summary>
            <param name="scalar">The scalar to multiply this vector with.</param>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Multiply(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Multiplies this vector with another vector (this x other) and returns the resulting matrix.
            </summary>
            <param name="rightSide">The vector to multiply the vector with.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref value="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:dnAnalytics.LinearAlgebra.SparseVector.Multiply(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Multiplies this vector with another vector (this x other) and places the result into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply the vector with.</param>
            <param name="result">The result of the multiplication.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref value="rightSide"/> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentNullException">If the result matrix is <b>null</b>.</exception>
            <exception cref="T:dnAnalytics.NotConformableException">If result matrix does not have the correct dimensions.</exception>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.SparseVector.Item(System.Int32)">
            <summary>Indexer gets or sets the value at given index.</summary>
            <param name="index">The index of the value to get or set.</param>
            <returns>The value of the vector at the given index.</returns>
        </member>
        <member name="P:dnAnalytics.LinearAlgebra.SparseVector.NonZeros">
            <summary>
            Returns the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="T:dnAnalytics.Math.Complex">
            <summary>A complex number data type.</summary>
            <remarks>See <see cref="T:dnAnalytics.Math.ComplexMath">ComplexMath</see> for complex math functions.</remarks>
            <seealso cref="T:dnAnalytics.Math.ComplexMath"/>
        </member>
        <member name="M:dnAnalytics.Math.Complex.#ctor(System.Double)">
            <summary>
            Creates a complex number from a real number (the imaginary component is set to
            <strong>zero</strong>).
            </summary>
            <param name="real">The real component of the complex number.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.#ctor(System.Double,System.Double)">
            <summary>Creates a complex number.</summary>
            <param name="real">The real component of the complex number.</param>
            <param name="imaginary">The imaginary component of the complex number.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.#ctor(System.String)">
            <summary>
            Created a complex number from the given string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)',
            or '(n,ni)', where n is a real number.
            </summary>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <see langword="null"/>.</exception>
            <param name="value">The string to create the complex number from.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Created a complex number from the given string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)',
            or '(n,ni)', where n is a real number.
            </summary>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <see langword="null"/>.</exception>
            <param name="value">The string to create the complex number from.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Implicit(System.Double)~dnAnalytics.Math.Complex">
            <summary>Implicitly converts a double to a complex number.</summary>
            <returns>A complex number containing the value of the given double.</returns>
            <param name="value">The double value to convert.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.ToComplex(System.Double)">
            <summary>Converts a Complex32 to a Complex number.</summary>
            <returns>A Complex number containing the value of the given Complex32.</returns>
            <param name="value">The Complex32 value to convert.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Implicit(dnAnalytics.Math.Complex32)~dnAnalytics.Math.Complex">
            <summary>Implicitly converts a Complex32 to a Complex number.</summary>
            <returns>A Complex number containing the value of the given Complex32.</returns>
            <param name="value">The Complex32 value to convert.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.ToComplex(dnAnalytics.Math.Complex32)">
            <summary>Converts a Complex32 to a Complex number.</summary>
            <returns>A Complex number containing the value of the given Complex32.</returns>
            <param name="value">The Complex32 value to convert.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Equals(dnAnalytics.Math.Complex)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns true if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, false otherwise.
            </returns>
            <param name="other">The complex number to compare to with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.ToString(System.String,System.IFormatProvider)">
            <summary>A string representation of this complex number.</summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format string and format provider.
            </returns>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <see langword="null"/>.</exception>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.GetHashCode">
            <summary>The hash code for the complex number.</summary>
            <returns>The hash code of the complex number.</returns>
            <remarks>
            The hash code is calculated as
            System.Math.Exp(ComplexMath.Absolute(complexNumber)).
            </remarks>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Equals(System.Object)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns true if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, false otherwise.
            </returns>
            <param name="obj">The complex number to compare to with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Equality(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Equality operator to compare two complex numbers.</summary>
            <remarks>Returns false if the two variables are not equals using Equals function</remarks>
            <returns>
            True if the corresponding real and imaginary components of the two complex
            numbers are equal; otherwise false.
            </returns>
            <param name="o1">One of the two complex numbers to compare.</param>
            <param name="o2">The other complex number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Inequality(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Inequality operator to compare a complex numbers.</summary>
            <remarks>Returns false if the two variables are equal using Equals function</remarks>
            <returns>
            False if the corresponding real and imaginary components of the two complex
            numbers are equal; otherwise true.
            </returns>
            <param name="o1">One of the two complex numbers to compare.</param>
            <param name="o2">The other complex number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_UnaryPlus(dnAnalytics.Math.Complex)">
            <summary>
            Unary plus operator. Added for completion and just returns the same
            object.
            </summary>
            <returns>The same value that is passed to the method.</returns>
            <param name="value">The value to return.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Plus(dnAnalytics.Math.Complex)">
            <summary>Unary plus. Added for completion and just returns the same object.</summary>
            <returns>The same value that is passed to the method.</returns>
            <param name="value">The value to return.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Addition(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Addition operator. Adds two complex numbers together.</summary>
            <returns>The result of the addition.</returns>
            <param name="leftSide">One of the complex numbers to add.</param>
            <param name="rightSide">The other complex numbers to add.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Add(dnAnalytics.Math.Complex)">
            <summary>Adds a complex number to this one.</summary>
            <returns>The result of the addition.</returns>
            <param name="other">The complex number to add to.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_UnaryNegation(dnAnalytics.Math.Complex)">
            <summary>Unary negation operator. Returns the negation of a complex number.</summary>
            <returns>The negated value.</returns>
            <param name="value">The complex number to negate.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Subtraction(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Subtraction operator. Subtracts two complex numbers.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="leftSide">The complex number to subtract from.</param>
            <param name="rightSide">The complex number to subtract.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Subtract(dnAnalytics.Math.Complex)">
            <summary>Subtracts a complex number for this one.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="other">The complex number to subtract.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Multiply(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Multiplication operator. Multiplies two complex numbers.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="leftSide">One of the complex numbers to multiply.</param>
            <param name="rightSide">The other complex number to multiply.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Multiply(dnAnalytics.Math.Complex)">
            <summary>Multiplies a complex number with this one.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="other">The complex number to multiply with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.op_Division(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Division operator. Divides a complex number by another.</summary>
            <returns>The result of the division.</returns>
            <param name="leftSide">The dividend.</param>
            <param name="rightSide">The division.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Divide(dnAnalytics.Math.Complex)">
            <summary>Divides this complex number by another one.</summary>
            <returns>The result of the division.</returns>
            <param name="other">The complex number to divide this one with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.IsNaN(dnAnalytics.Math.Complex)">
            <summary>Tests whether the complex number is not a number.</summary>
            <returns>True if either the real or imaginary components are NaN, false otherwise.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex.IsInfinity(dnAnalytics.Math.Complex)">
            <summary>Tests whether the complex number is infinite.</summary>
            <returns>True if either the real or imaginary components are infinite, false otherwise.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex.ToString">
            <summary>A string representation of this complex number.</summary>
            <returns>The string representation of this complex number.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex.ToString(System.String)">
            <summary>A string representation of this complex number.</summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format string.
            </returns>
            <param name="format">A format specification.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.ToString(System.IFormatProvider)">
            <summary>A string representation of this complex number.</summary>
            <returns>
            The string representation of this complex number formatted as specified by the
            format provider.
            </returns>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Parse(System.String)">
            <summary>
            Creates a complex number based on a string. The string can be in the following
            formats(without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)', or
            '(n,ni)', where n is a real number.
            </summary>
            <returns>A complex number containing the value specified by the given string.</returns>
            <param name="value">The string to parse.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the following
            formats(without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)', or
            '(n,ni)', where n is a double.
            </summary>
            <returns>A complex number containing the value specified by the given string.</returns>
            <param name="value">the string to parse.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex.TryParse(System.String,dnAnalytics.Math.Complex@)">
            <summary>
            Converts the string representation of a complex number to a double-precision complex number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing a complex number to convert. </param>
            <param name="result"></param>
            <returns>If the conversion succeeds, the result will contain a complex number equivalent to value. 
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex.TryParse(System.String,System.IFormatProvider,dnAnalytics.Math.Complex@)">
            <summary>
            Converts the string representation of a complex number to double-precision complex number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing a complex number to convert. </param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information about value. </param>
            <param name="result"></param>
            <returns>If the conversion succeeds, the result will contain a complex number equivalent to value. 
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized</returns>
        </member>
        <member name="P:dnAnalytics.Math.Complex.One">
            <summary>A constant value representing the number one as a complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.Zero">
            <summary>A constant value representing the number zero as a complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.NaN">
            <summary>A constant value representing not a number (NaN) as a complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.Infinity">
            <summary>A constant value representing infinity as a complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.I">
            <summary>A constant value representing the complex number I.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.Real">
            <summary>A read-only property to access the real component of complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.Imaginary">
            <summary>A read-only property to access the imaginary component of complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.Conjugate">
            <summary>Returns the conjugate of a complex number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex.Absolute">
            <summary>Returns the Absolute of a complex number.</summary>
        </member>
        <member name="T:dnAnalytics.Math.Complex32">
            <summary>A Complex32 number data type.</summary>
            <remarks>See <see cref="T:dnAnalytics.Math.ComplexMath">Complex32Math</see> for Complex32 math functions.</remarks>
            <seealso cref="T:dnAnalytics.Math.ComplexMath"/>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.#ctor(System.Single)">
            <summary>
            Creates a Complex32 number from a real number (the imaginary component is set to
            <strong>zero</strong>).
            </summary>
            <param name="real">The real component of the Complex32 number.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.#ctor(System.Single,System.Single)">
            <summary>Creates a Complex32 number.</summary>
            <param name="real">The real component of the Complex32 number.</param>
            <param name="imaginary">The imaginary component of the Complex32 number.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.#ctor(System.String)">
            <summary>
            Created a Complex32 number from the given string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)',
            or '(n,ni)', where n is a real number.
            </summary>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <see langword="null"/>.</exception>
            <param name="value">The string to create the Complex32 number from.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Created a Complex32 number from the given string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)',
            or '(n,ni)', where n is a real number.
            </summary>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <see langword="null"/>.</exception>
            <param name="value">The string to create the Complex32 number from.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Implicit(System.Single)~dnAnalytics.Math.Complex32">
            <summary>Implicitly converts a float to a Complex32 number.</summary>
            <returns>A Complex32 number containing the value of the given float.</returns>
            <param name="value">The float value to convert.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.ToComplex32(System.Single)">
            <summary>Converts a float to Complex32 number.</summary>
            <param name="value">The <strong>float</strong> value to convert.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Equals(dnAnalytics.Math.Complex32)">
            <summary>
            Checks if two Complex32 numbers are equal. Two Complex32 numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns true if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, false otherwise.
            </returns>
            <param name="other">The Complex32 number to compare to with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.ToString(System.String,System.IFormatProvider)">
            <summary>A string representation of this Complex32 number.</summary>
            <returns>
            The string representation of this Complex32 number formatted as specified by the
            format string and format provider.
            </returns>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <see langword="null"/>.</exception>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.GetHashCode">
            <summary>The hash code for the Complex32 number.</summary>
            <returns>The hash code of the Complex32 number.</returns>
            <remarks>
            The hash code is calculated as
            System.Math.Exp(Complex32Math.Absolute(Complex32Number)).
            </remarks>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Equals(System.Object)">
            <summary>
            Checks if two Complex32 numbers are equal. Two Complex32 numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns true if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, false otherwise.
            </returns>
            <param name="obj">The Complex32 number to compare to with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Equality(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Equality operator to compare two Complex32 numbers.</summary>
            <remarks>Returns false if the two variables are not equals using Equals function</remarks>
            <returns>
            True if the corresponding real and imaginary components of the two Complex32
            numbers are equal; otherwise false.
            </returns>
            <param name="o1">One of the two Complex32 numbers to compare.</param>
            <param name="o2">The other Complex32 number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Inequality(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Inequality operator to compare a Complex32 numbers.</summary>
            <remarks>Returns false if the two variables are equal using Equals function</remarks>
            <returns>
            False if the corresponding real and imaginary components of the two Complex32
            numbers are equal; otherwise true.
            </returns>
            <param name="o1">One of the two Complex32 numbers to compare.</param>
            <param name="o2">The other Complex32 number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_UnaryPlus(dnAnalytics.Math.Complex32)">
            <summary>
            Unary plus operator. Added for completion and just returns the same
            object.
            </summary>
            <returns>The same value that is passed to the method.</returns>
            <param name="value">The value to return.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Plus(dnAnalytics.Math.Complex32)">
            <summary>Unary plus. Added for completion and just returns the same object.</summary>
            <returns>The same value that is passed to the method.</returns>
            <param name="value">The value to return.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Addition(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Addition operator. Adds two Complex32 numbers together.</summary>
            <returns>The result of the addition.</returns>
            <param name="leftSide">One of the Complex32 numbers to add.</param>
            <param name="rightSide">The other Complex32 numbers to add.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Add(dnAnalytics.Math.Complex32)">
            <summary>Adds a complex number to this one.</summary>
            <returns>The result of the addition.</returns>
            <param name="other">The complex number to add to.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_UnaryNegation(dnAnalytics.Math.Complex32)">
            <summary>Unary negation operator. Returns the negation of a Complex32 number.</summary>
            <returns>The negated value.</returns>
            <param name="value">The Complex32 number to negate.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Negate">
            <summary>Negates this complex number.</summary>
            <returns>The negated value.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Subtraction(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Subtraction operator. Subtracts two Complex32 numbers.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="leftSide">The Complex32 number to subtract from.</param>
            <param name="rightSide">The Complex32 number to subtract.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Subtract(dnAnalytics.Math.Complex32)">
            <summary>Subtracts a complex number for this one.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="other">The complex number to subtract.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Multiply(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Multiplication operator. Multiplies two Complex32 numbers.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="leftSide">One of the Complex32 numbers to multiply.</param>
            <param name="rightSide">The other Complex32 number to multiply.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Multiply(dnAnalytics.Math.Complex32)">
            <summary>Multiplies a complex number with this one.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="other">The complex number to multiply with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.op_Division(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Division operator. Divides a Complex32 number by another.</summary>
            <returns>The result of the division.</returns>
            <param name="leftSide">The dividend.</param>
            <param name="rightSide">The division.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Divide(dnAnalytics.Math.Complex32)">
            <summary>Divides this complex number by another one.</summary>
            <returns>The result of the division.</returns>
            <param name="other">The complex number to divide this one with.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.IsNaN(dnAnalytics.Math.Complex32)">
            <summary>Tests whether the Complex32 number is not a number.</summary>
            <returns>True if either the real or imaginary components are NaN, false otherwise.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.IsInfinity(dnAnalytics.Math.Complex32)">
            <summary>Tests whether the Complex32 number is infinite.</summary>
            <returns>True if either the real or imaginary components are infinite, false otherwise.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.ToString">
            <summary>A string representation of this Complex32 number.</summary>
            <returns>The string representation of this Complex32 number.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.ToString(System.String)">
            <summary>A string representation of this Complex32 number.</summary>
            <returns>
            The string representation of this Complex32 number formatted as specified by the
            format string.
            </returns>
            <param name="format">A format specification.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.ToString(System.IFormatProvider)">
            <summary>A string representation of this Complex32 number.</summary>
            <returns>
            The string representation of this Complex32 number formatted as specified by the
            format provider.
            </returns>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Parse(System.String)">
            <summary>
            Creates a Complex32 number based on a string. The string can be in the following
            formats(without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)', or
            '(n,ni)', where n is a real number.
            </summary>
            <returns>A Complex32 number containing the value specified by the given string.</returns>
            <param name="value">The string to parse.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a Complex32 number based on a string. The string can be in the following
            formats(without the quotes): 'n', 'ni', 'n +/- ni', 'n,n', 'n,ni,' '(n,n)', or
            '(n,ni)', where n is a float.
            </summary>
            <returns>A Complex32 number containing the value specified by the given string.</returns>
            <param name="value">the string to parse.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.TryParse(System.String,dnAnalytics.Math.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing a complex number to convert. </param>
            <param name="result"></param>
            <returns>If the conversion succeeds, the result will contain a complex number equivalent to value. 
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized</returns>
        </member>
        <member name="M:dnAnalytics.Math.Complex32.TryParse(System.String,System.IFormatProvider,dnAnalytics.Math.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing a complex number to convert. </param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information about value. </param>
            <param name="result"></param>
            <returns>If the conversion succeeds, the result will contain a complex number equivalent to value. 
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized</returns>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.One">
            <summary>A constant value representing the number one as a Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.Zero">
            <summary>A constant value representing the number zero as a Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.NaN">
            <summary>A constant value representing not a number (NaN) as a Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.Infinity">
            <summary>A constant value representing infinity as a Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.I">
            <summary>A constant value representing the Complex32 number I.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.Real">
            <summary>A read-only property to access the real component of Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.Imaginary">
            <summary>A read-only property to access the imaginary component of Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.Conjugate">
            <summary>Returns the conjugate of a Complex32 number.</summary>
        </member>
        <member name="P:dnAnalytics.Math.Complex32.Absolute">
            <summary>Returns the Absolute of a Complex32 number.</summary>
        </member>
        <member name="T:dnAnalytics.Math.ComplexMath">
            <summary>Provides trigonometric, logarithmic, and other common mathematical functions for complex numbers.</summary>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Absolute(dnAnalytics.Math.Complex)">
             <summary>Returns the absolute value of a complex number as a Euclidean norm.</summary>
             <returns>The absolute value (Euclidean norm) of the complex number.</returns>
             <param name="value">The complex number to compute the absolute value from.</param>
            Based off Numerical Recipes' Cabs.
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Argument(dnAnalytics.Math.Complex)">
            <summary>Calculates the argument of a complex number.</summary>
            <returns>The argument of the complex number.</returns>
            <param name="value">The complex number to compute the argument from.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Conjugate(dnAnalytics.Math.Complex)">
            <summary>Returns the conjugate of a complex number.</summary>
            <returns>The conjugate of the complex number.</returns>
            <param name="value">The complex value to compute the conjugate of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Max(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Returns the complex number with the larger norm.</summary>
            <returns>The complex number with the larger norm.</returns>
            <param name="v1">One of the complex numbers to compare.</param>
            <param name="v2">The other complex number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Min(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <summary>Returns the complex number with the smaller norm.</summary>
            <returns>The complex number with the smaller norm.</returns>
            <param name="v1">One of the complex numbers to compare.</param>
            <param name="v2">The other complex number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Norm(dnAnalytics.Math.Complex)">
            <summary>Returns the Euclidean norm of a complex number.</summary>
            <returns>The Euclidean norm of the complex number.</returns>
            <param name="value">The complex number to compute the Euclidean norm of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Polar(dnAnalytics.Math.Complex)">
            <summary>Returns the polar representation of a complex number.</summary>
            <returns>The polar representation of the complex number.</returns>
            <param name="value">The complex number to compute the polar value of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Absolute(dnAnalytics.Math.Complex32)">
            <summary>Returns the absolute value of a Complex32 number as a Euclidean norm.</summary>
            <returns>The absolute value (Euclidean norm) of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the absolute value from.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Argument(dnAnalytics.Math.Complex32)">
            <summary>Calculates the argument of a Complex32 number.</summary>
            <returns>The argument of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the argument from.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Conjugate(dnAnalytics.Math.Complex32)">
            <summary>Returns the conjugate of a Complex32 number.</summary>
            <returns>The conjugate of the Complex32 number.</returns>
            <param name="value">The Complex32 value to compute the conjugate of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Max(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Returns the Complex32 number with the larger norm.</summary>
            <returns>The Complex32 number with the larger norm.</returns>
            <param name="v1">One of the Complex32 numbers to compare.</param>
            <param name="v2">The other Complex32 number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Min(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <summary>Returns the Complex32 number with the smaller norm.</summary>
            <returns>The Complex32 number with the smaller norm.</returns>
            <param name="v1">One of the Complex32 numbers to compare.</param>
            <param name="v2">The other Complex32 number to compare.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Norm(dnAnalytics.Math.Complex32)">
            <summary>Returns the Euclidean norm of a Complex32 number.</summary>
            <returns>The Euclidean norm of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the Euclidean norm of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Polar(dnAnalytics.Math.Complex32)">
            <summary>Returns the polar representation of a Complex32 number.</summary>
            <returns>The polar representation of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the polar value of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Cos(dnAnalytics.Math.Complex)">
            <summary>Returns the cosine of a complex number.</summary>
            <returns>The cosine of a complex number.</returns>
            <param name="value">The complex number to compute the cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Cosh(dnAnalytics.Math.Complex)">
            <summary>Returns the hyperbolic cosine of a complex number.</summary>
            <returns>The hyperbolic cosine of the complex number.</returns>
            <param name="value">The complex number to compute the hyperbolic cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Exp(dnAnalytics.Math.Complex)">
            <summary>Returns the exponential of a complex number.</summary>
            <returns>The exponential of the complex number.</returns>
            <param name="value">The complex number to compute the exponential of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Pow(dnAnalytics.Math.Complex,dnAnalytics.Math.Complex)">
            <returns>The exponentiation of the given base complex number to the given exponent.</returns>
            <summary>Computes the exponentiation a complex number.</summary>
            <param name="leftSide">The base.</param>
            <param name="rightSide">The exponent.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Log(dnAnalytics.Math.Complex)">
            <summary>Returns the logarithm of a complex number.</summary>
            <returns>The logarithm of the complex number.</returns>
            <param name="value">The complex number to compute the logarithm of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Sin(dnAnalytics.Math.Complex)">
            <summary>Returns the sine of a complex number.</summary>
            <returns>The sine of the complex number.</returns>
            <param name="value">The complex number to compute the sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Sinh(dnAnalytics.Math.Complex)">
            <summary>Returns the hyperbolic sine of a complex number.</summary>
            <returns>The hyperbolic sine of the complex number.</returns>
            <param name="value">The complex number to compute the hyperbolic sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Sqrt(dnAnalytics.Math.Complex)">
            <summary>Returns the square root of a complex number.</summary>
            <returns>The square root of the complex number.</returns>
            <param name="value">The complex number to compute the square root of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Tan(dnAnalytics.Math.Complex)">
            <summary>Returns the tangent of a complex number.</summary>
            <returns>The tangent of the complex number.</returns>
            <param name="value">The complex number to compute the tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Tanh(dnAnalytics.Math.Complex)">
            <summary>Returns the hyperbolic tangent of a complex number.</summary>
            <returns>The hyperbolic tangent of the complex number.</returns>
            <param name="value">The complex number to compute the hyperbolic tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Asin(dnAnalytics.Math.Complex)">
            <summary>Returns the inverse sine of a complex number.</summary>
            <returns>The inverse sine of the complex number.</returns>
            <param name="value">The complex number to compute the inverse sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Acos(dnAnalytics.Math.Complex)">
            <summary>Returns the inverse cosine of a complex number.</summary>
            <returns>The inverse cosine of the complex number.</returns>
            <param name="value">The complex number to compute the inverse cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Atan(dnAnalytics.Math.Complex)">
            <summary>Returns the inverse tangent of a complex number.</summary>
            <returns>The inverse tangent of the complex number.</returns>
            <param name="value">The complex number to compute the inverse tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Asinh(dnAnalytics.Math.Complex)">
            <summary>Returns the inverse hyperbolic sine of a complex number.</summary>
            <returns>The inverse hyperbolic sine of the complex number.</returns>
            <param name="value">The complex number to compute the inverse hyperbolic sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Acosh(dnAnalytics.Math.Complex)">
            <summary>Returns the inverse hyperbolic cosine of a complex number.</summary>
            <returns>The inverse hyperbolic cosine of the complex number.</returns>
            <param name="value">The complex number to compute the hyperbolic cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Atanh(dnAnalytics.Math.Complex)">
            <summary>Returns the inverse hyperbolic tangent of a complex number.</summary>
            <returns>The inverse hyperbolic tangent of the complex number.</returns>
            <param name="value">The complex number to compute the hyperbolic tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Cos(dnAnalytics.Math.Complex32)">
            <summary>Returns the cosine of a Complex32 number.</summary>
            <returns>The cosine of a Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Cosh(dnAnalytics.Math.Complex32)">
            <summary>Returns the hyperbolic cosine of a Complex32 number.</summary>
            <returns>The hyperbolic cosine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the hyperbolic cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Exp(dnAnalytics.Math.Complex32)">
            <summary>Returns the exponential of a Complex32 number.</summary>
            <returns>The exponential of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the exponential of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Pow(dnAnalytics.Math.Complex32,dnAnalytics.Math.Complex32)">
            <returns>The exponentiation of the given base Complex32 number to the given exponent.</returns>
            <summary>Computes the exponentiation a Complex32 number.</summary>
            <param name="leftSide">The base.</param>
            <param name="rightSide">The exponent.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Log(dnAnalytics.Math.Complex32)">
            <summary>Returns the logarithm of a Complex32 number.</summary>
            <returns>The logarithm of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the logarithm of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Sin(dnAnalytics.Math.Complex32)">
            <summary>Returns the sine of a Complex32 number.</summary>
            <returns>The sine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Sinh(dnAnalytics.Math.Complex32)">
            <summary>Returns the hyperbolic sine of a Complex32 number.</summary>
            <returns>The hyperbolic sine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the hyperbolic sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Sqrt(dnAnalytics.Math.Complex32)">
            <summary>Returns the square root of a Complex32 number.</summary>
            <returns>The square root of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the square root of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Tan(dnAnalytics.Math.Complex32)">
            <summary>Returns the tangent of a Complex32 number.</summary>
            <returns>The tangent of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Tanh(dnAnalytics.Math.Complex32)">
            <summary>Returns the hyperbolic tangent of a Complex32 number.</summary>
            <returns>The hyperbolic tangent of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the hyperbolic tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Asin(dnAnalytics.Math.Complex32)">
            <summary>Returns the inverse sine of a Complex32 number.</summary>
            <returns>The inverse sine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the inverse sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Acos(dnAnalytics.Math.Complex32)">
            <summary>Returns the inverse cosine of a Complex32 number.</summary>
            <returns>The inverse cosine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the inverse cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Atan(dnAnalytics.Math.Complex32)">
            <summary>Returns the inverse tangent of a Complex32 number.</summary>
            <returns>The inverse tangent of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the inverse tangent of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Asinh(dnAnalytics.Math.Complex32)">
            <summary>Returns the inverse hyperbolic sine of a Complex32 number.</summary>
            <returns>The inverse hyperbolic sine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the inverse hyperbolic sine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Acosh(dnAnalytics.Math.Complex32)">
            <summary>Returns the inverse hyperbolic cosine of a Complex32 number.</summary>
            <returns>The inverse hyperbolic cosine of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the hyperbolic cosine of.</param>
        </member>
        <member name="M:dnAnalytics.Math.ComplexMath.Atanh(dnAnalytics.Math.Complex32)">
            <summary>Returns the inverse hyperbolic tangent of a Complex32 number.</summary>
            <returns>The inverse hyperbolic tangent of the Complex32 number.</returns>
            <param name="value">The Complex32 number to compute the hyperbolic tangent of.</param>
        </member>
        <member name="T:dnAnalytics.Math.Constants">
            <summary>
            This class contains a number of frequently used mathematical constants.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.EulerMascheroni">
            <summary>
            The Euler-Mascheroni Constant.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.Pi">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.OneOverPi">
            <summary>
            1.0 / Pi.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.E">
            <summary>
            E.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.GoldenRatio">
            <summary>
            The Golden ration.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.Sqrt2Pi">
            <summary>
            The square root of 2*Pi.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.Sqrt2PiE">
            <summary>
            The square root of 2*Pi*E.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.LogSqrt2Pi">
            <summary>
            The square root of log(2*Pi).
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Constants.LogSqrt2PiE">
            <summary>
            The square root of log(2*Pi*E).
            </summary>
        </member>
        <member name="T:dnAnalytics.Math.Precision">
            <summary>
            Utilities for working with floating point numbers.
            </summary>
            <remarks>
            <para>
            Useful links:
            <list type="bullet">
            <item>
            http://docs.sun.com/source/806-3568/ncg_goldberg.html#689 - What every computer scientist should know about floating-point arithmetic
            </item>
            <item>
            http://en.wikipedia.org/wiki/Machine_epsilon - Gives the definition of machine epsilon
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_BinaryBaseNumber">
            <summary>
            The base number for binary values
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_DoublePrecision">
            <summary>
            The number of binary digits used to represent the binary number for a double precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_SinglePrecision">
            <summary>
            The number of binary digits used to represent the binary number for a single precision floating
            point value. i.e. there are this many digits used to represent the
            actual number, where in a number as: 0.134556 * 10^5 the digits are 0.134556 and the exponent is 5.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision._doubleMachinePrecision">
            <summary>
            The maximum relative precision of a double
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_DoubleMachinePrecision">
            <summary>
            The maximum relative precision of a double
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_SingleMachinePrecision">
            <summary>
            The maximum relative precision of a single
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_NumberOfDecimalPlacesForDoubles">
            <summary>
            The number of significant figures that a double-precision floating point has.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.s_NumberOfDecimalPlacesForFloats">
            <summary>
            The number of significant figures that a single-precision floating point has.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.Precision.#cctor">
            <summary>
            Initializes the <see cref="T:dnAnalytics.Math.Precision"/> class.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.Precision.Magnitude(System.Double)">
            <summary>
            Returns the magnitude of the number.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.Value(System.Double)">
            <summary>
            Returns the number divided by it's magnitude, effectively returning a number between -10 and 10.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.RangeOfMatchingFloatingPointNumbers(System.Double,System.Int64,System.Double@,System.Double@)">
            <summary>
            Determines the range of floating point numbers that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="ulpsDifference">The ulps difference.</param>
            <param name="topRangeEnd">The top range end.</param>
            <param name="bottomRangeEnd">The bottom range end.</param>
        </member>
        <member name="M:dnAnalytics.Math.Precision.MaximumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the maximum size (i.e. the result is
            always bigger than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="ulpsDifference">The ulps difference.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.MinimumMatchingFloatingPointNumber(System.Double,System.Int64)">
            <summary>
            Returns the floating point number that will match the value with the tolerance on the minimum size (i.e. the result is
            always smaller than the value)
            </summary>
            <param name="value">The value.</param>
            <param name="ulpsDifference">The ulps difference.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.RangeOfMatchingUlps(System.Double,System.Double,System.Int64@,System.Int64@)">
            <summary>
            Determines the range of ulps that will match the specified value with the given tolerance.
            </summary>
            <param name="value">The value.</param>
            <param name="relativeDifference">The relative difference.</param>
            <param name="topRangeEnd">The number of ULPS between the <c>value</c> and the <c>value + relativeDifference</c>.</param>
            <param name="bottomRangeEnd">The number of ULPS between the <c>value</c> and the <c>value - relativeDifference</c>.</param>
        </member>
        <member name="M:dnAnalytics.Math.Precision.EqualsWithTolerance(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if they are equal to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <remarks>
            <para>
            Determines the 'number' of floating point numbers between two values (i.e. the number of discrete steps 
            between the two numbers) and then checks if that is within the specified tolerance. So if a tolerance 
            of 1 is passed then the result will be true only if the two numbers have the same binary representation 
            OR if they are two adjacent numbers that only differ by one step.
            </para>
            <para>
            The comparison method used is explained in http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm . The article
            at http://www.extremeoptimization.com/resources/Articles/FPDotNetConceptsAndFormats.aspx explains how to transform the C code to 
            .NET enabled code without using pointers and unsafe code.
            </para>
            </remarks>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="maxUlps">The maximum error in terms of Units in Last Place (ulps), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified tolerance; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.EqualsWithinDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. If the numbers
            are very close to zero an absolute difference is compared, otherwise the relative difference is compared.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if decimalPlaces == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="numberOfDecimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.EqualsWithinRelativeDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not. 
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if decimalPlaces == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="numberOfDecimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.EqualsWithinAbsoluteDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if they are equal to within the specified number of decimal places or not, using the 
            number of decimal places as an absolute measure.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if decimalPlaces == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="numberOfDecimalPlaces">The number of decimal places.</param>
            <returns><see langword="true" /> if both doubles are equal to each other within the specified number of decimal places; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.IsLargerWithTolerance(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="maxUlps">The maximum error in terms of Units in Last Place (ulps), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.IsLargerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is larger than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if decimalPlaces == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="numberOfDecimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is larger than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.IsSmallerWithTolerance(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the tolerance or not. Equality comparison is based on the binary representation.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="maxUlps">The maximum error in terms of Units in Last Place (ulps), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.IsSmallerWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines if the <c>first</c> value is smaller than the <c>second</c>
            value to within the specified number of decimal places or not.
            </summary>
            <remarks>
            <para>
            The values are equal if the difference between the two numbers is smaller than 10^(-numberOfDecimalPlaces). We divide by 
            two so that we have half the range on each side of the numbers, e.g. if decimalPlaces == 2, then 0.01 will equal between 
            0.005 and 0.015, but not 0.02 and not 0.00
            </para>
            </remarks>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="numberOfDecimalPlaces">The number of decimal places.</param>
            <returns><c>true</c> if the first value is smaller than the second value; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.CompareWithTolerance(System.Double,System.Double,System.Int64)">
            <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="maxUlps">The maximum error in terms of Units in Last Place (ulps), i.e. the maximum number of decimals that may be different. Must be 1 or larger.</param>
            <returns>
            <list type="table">
                <listheader>
                    <term>Return value</term>
                    <description>Meaning</description>
                </listheader>
                <item>
                    <term>-1</term>
                    <description><paramref name="first"/> is smaller than <paramref name="second"/> by more than the <paramref name="maxUlps"/> tolerance.</description>
                </item>
                <item>
                    <term>0</term>
                    <description><paramref name="first"/> is equal to <paramref name="second"/> within the <paramref name="maxUlps"/> tolerance.</description>
                </item>
                <item>
                    <term>1</term>
                    <description><paramref name="first"/> is bigger than <paramref name="second"/> by more than the <paramref name="maxUlps"/> tolerance.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="M:dnAnalytics.Math.Precision.CompareWithDecimalPlaces(System.Double,System.Double,System.Int32)">
            <summary>
            Compares two doubles and determines which double is bigger.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
            <param name="numberOfDecimalPlaces">The number of decimal places on which the values must be compared. Must be 1 or larger.</param>
            <returns>
            <list type="table">
                <listheader>
                    <term>Return value</term>
                    <description>Meaning</description>
                </listheader>
                <item>
                    <term>-1</term>
                    <description><paramref name="first"/> is smaller than <paramref name="second"/> by more than a magnitude equal to <paramref name="numberOfDecimalPlaces"/>.</description>
                </item>
                <item>
                    <term>0</term>
                    <description><paramref name="first"/> is equal to <paramref name="second"/> within a magnitude equal to <paramref name="numberOfDecimalPlaces"/>.</description>
                </item>
                <item>
                    <term>1</term>
                    <description><paramref name="first"/> is bigger than <paramref name="second"/> by more than a magnitude equal to <paramref name="numberOfDecimalPlaces"/>.</description>
                </item>
            </list>
            </returns>
        </member>
        <member name="P:dnAnalytics.Math.Precision.NumberOfDecimalPlacesForFloats">
            <summary>
            Gets the number of decimal places for floats.
            </summary>
            <value>The number of decimal places for floats.</value>
        </member>
        <member name="P:dnAnalytics.Math.Precision.NumberOfDecimalPlacesForDoubles">
            <summary>
            Gets the number of decimal places for doubles.
            </summary>
            <value>The number of decimal places for doubles.</value>
        </member>
        <member name="T:dnAnalytics.Math.Precision.DoubleComparer">
            <summary>
            An <c>IComparer</c> used to compare double precision floating points based
            on either the ULPs (Units in Last Place) or the number of significant digits.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.DoubleComparer.m_Ulps">
            <summary>
            The number of ULPs for the comparison. Set to -1 if not in use.
            </summary>
        </member>
        <member name="F:dnAnalytics.Math.Precision.DoubleComparer.m_NumberOfSignificantDigits">
            <summary>
            The number of significant digits used for the comparison. Set to -1 if not in use.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.Precision.DoubleComparer.#ctor(System.Int64)">
            <summary>
            Creates a new <c>DoubleComparer</c> which will compare floating points
            based on the number of ULPs (Units in Last Place).
            </summary>
            <param name="ulps">
              The number of ULPs used in the comparison
            </param>
        </member>
        <member name="M:dnAnalytics.Math.Precision.DoubleComparer.#ctor(System.Int32)">
            <summary>
            Creates a new <c>DoubleComparer</c> which will compare floating points
            based on the number of significant digits.
            </summary>
            <param name="numberOfSignificantDigits">
              The number of significant digits used in the comparison.
            </param>
        </member>
        <member name="M:dnAnalytics.Math.Precision.DoubleComparer.Compare(System.Double,System.Double)">
            <summary>
            Compares two double values based on the selected comparison method.
            </summary>
            <param name="x">The first double to compare.</param>
            <param name="y">The second double to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return 
            value has the following meanings: 
            Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. 
            Greater than zero This object is greater than other. 
            </returns>
            <seealso cref="P:dnAnalytics.Math.Precision.DoubleComparer.Ulps"/>
            <seealso cref="P:dnAnalytics.Math.Precision.DoubleComparer.NumberOfSignificantDecimals"/>
        </member>
        <member name="P:dnAnalytics.Math.Precision.DoubleComparer.Ulps">
            <summary>
            Gets or sets the number of ULPs (Units in Last Place) with which to compare
            floating point values.
            </summary>
        </member>
        <member name="P:dnAnalytics.Math.Precision.DoubleComparer.NumberOfSignificantDecimals">
            <summary>
            Gets or sets the number of significant decimals with which to compare
            floating point values.
            </summary>
        </member>
        <member name="T:dnAnalytics.Math.SpecialFunctions">
            <summary>
            This class implements a collection of special function evaluations. This class has a static constructor which 
            will precompute a small number of values for faster runtime computations.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.#cctor">
            <summary>
            Static constructor for the special functions class. This method precomputes a small number of values for faster runtime computation.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.GammaLn(System.Double)">
            <summary>
            Computes the logarithm of the Gamma function. 
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </remarks>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Computes the Gamma function. 
            </summary>
            <param name="z">The argument of the gamma function.</param>
            <returns>The logarithm of the gamma function.</returns>
            <remarks>
            This implementation of the computation of the gamma and logarithm of the gamma function follows the derivation in
                "An Analysis Of The Lanczos Gamma Approximation", Glendon Ralph Pugh, 2004.
            We use the implementation listed on p. 116 which achieves an accuracy of 16 floating point digits. Although 16 digit accuracy
            should be sufficient for double values, improving accuracy is possible (see p. 126 in Pugh).
            </remarks>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.BetaLn(System.Double,System.Double)">
            <summary>
            Computes the logarithm of the Euler Beta function.
            </summary>
            <param name="z">A positive real number.</param>
            <param name="w">A positive real number.</param>
            <returns>The logarithm of the Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Computes the Euler Beta function.
            </summary>
            <param name="z">A positive real number.</param>
            <param name="w">A positive real number.</param>
            <returns>The Euler Beta function evaluated at z,w.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="z"/> or <paramref name="w"/> are not positive.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Factorial(System.Int32)">
            <summary>
            Computes the factorial function: x!. The function can represent all number up to 22! exactly, all numbers
            up to 170! using a double representation. All larger values will overflow.
            </summary>
            <param name="x">A nonnegative integer for which to compute the factorial function. </param>
            <returns>The factorial of x: x!</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="x"/> is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.FactorialLn(System.Int32)">
            <summary>
            Returns the log of the factorial function.
            </summary>
            <param name="x">A nonnegative integer for which to compute the logarithm of the factorial function.</param>
            <returns>The logarithm of the factorial function.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="x"/> is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.DiGamma(System.Double)">
            <summary>
            Computes the digamma function which is mathematically defined as the derivative of the logarithm of the gamma function.
            This implementation is based on
                Jose Bernardo
                Algorithm AS 103:
                Psi ( Digamma ) Function,
                Applied Statistics,
                Volume 25, Number 3, 1976, pages 315-317.
            Using the modifications as in Tom Minka's lightspeed toolbox.
            </summary>
            <param name="x">The argument of the digamma function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Binomial(System.Int32,System.Int32)">
            <summary>
            Computes the binomial coefficient: n choose h.
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="h">A nonnegative value h.</param>
            <returns>The binomial coefficient: n choose h.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="n"/> or <paramref name="h"/> are negative.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.BinomialLn(System.Int32,System.Int32)">
            <summary>
            Computes the logarithm of the binomial coefficient: n choose h.
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="h">A nonnegative value h.</param>
            <returns>The log of the binomial coefficient: n choose h.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="n"/> or <paramref name="h"/> are negative.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Multinomial(System.Int32,System.Int32[])">
            <summary>
            Computes the multinomial coefficient: n choose n1, n2, n3, ...
            </summary>
            <param name="n">A nonnegative value n.</param>
            <param name="ni">An array of nonnegative values that sum to <paramref name="n"/>.</param>
            <returns>The multinomial coefficient.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="ni"/> is <see langword="null"/>.</exception>   
            <exception cref="T:System.ArgumentException">If <paramref name="n"/> or any of the <paramref name="ni"/> are negative.</exception>
            <exception cref="T:System.ArgumentException">If the sum of all <paramref name="ni"/> is not equal to <paramref name="n"/>.</exception>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Harmonic(System.Int32)">
            <summary>
            Computes the <paramref name="t"/>'th Harmonic number.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.ErfcInv(System.Double)">
            <summary>Calculates the complementary inverse error function evaluated at z.</summary>
             <returns>The complementary inverse error function evaluated at given value.</returns>
             <remarks>
             	<list type="bullet">
             		<item>returns Double.PositiveInfinity if <c>z &lt;= 0.0</c>.</item>
             		<item>returns Double.NegativeInfinity if <c>z &gt;= 2.0</c>.</item>
             	</list>
             </remarks>
            <summary>Calculates the complementary inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the complementary inverse error function evaluated at Z.</returns>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.IncompleteGammaSeries(System.Double,System.Double,System.Boolean)">
            <summary>
            Computes the incomplete gamma function P(a,x) using its series representation.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.IncompleteGammaContinuedFraction(System.Double,System.Double,System.Boolean)">
            <summary>
            Computes the incomplete gamma function Q(a,x) using its continued fraction representation.
            </summary>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.IncompleteGammaQuadrature(System.Double,System.Double,System.Boolean)">
            <summary>
            Computes the regularized incomplete gamma function using Gaussian Quadrature.
            </summary>
            <param name="a">The parameter of the gamma function.</param>
            <param name="x">The integration upper or lower bound.</param>
            <param name="lower">Switch to specify whether to evaluate the lower incomplete gamma or upper incomplete gamma.</param>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.IncompleteGamma(System.Double,System.Double,System.Boolean)">
            <summary>
            Calculates the normalized incomplete gamma function.
            </summary>
            <param name="a">The parameter of the gamma function.</param>
            <param name="x">The integration upper or lower bound.</param>
            <param name="lower">Decides whether to evaluate the lower or upper incomplete gamma function.</param>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Erf(System.Double)">
            <summary>Calculates the error function evaluated at X.</summary>
            <returns>The error function evaluated at given value.</returns>
            <remarks>
            	<list type="bullet">
            		<item>returns 1 if <c>z == Double.PositiveInfinity</c>.</item>
            		<item>returns -1 if <c>x == Double.NegativeInfinity</c>.</item>
            	</list>
            </remarks>
            <param name="x">The value to evaluate.</param>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.Erfc(System.Double)">
            <summary>Calculates the complementary error function evaluated at X.</summary>
            <returns>The complementary error function evaluated at given value.</returns>
            <remarks>
            	<list type="bullet">
            		<item>returns 0 if <c>x == Double.PositiveInfinity</c>.</item>
            		<item>returns 2 if <c>x == Double.NegativeInfinity</c>.</item>
            	</list>
            </remarks>
            <param name="x">The value to evaluate.</param>
        </member>
        <member name="M:dnAnalytics.Math.SpecialFunctions.ErfInv(System.Double)">
            <summary>Calculates the inverse error function evaluated at z.</summary>
             <returns>The inverse error function evaluated at given value.</returns>
             <remarks>
             	<list type="bullet">
             		<item>returns Double.PositiveInfinity if <c>z &gt;= 1.0</c>.</item>
             		<item>returns Double.NegativeInfinity if <c>z &lt;= -1.0</c>.</item>
             	</list>
             </remarks>
            <summary>Calculates the inverse error function evaluated at z.</summary>
            <param name="z">value to evaluate.</param>
            <returns>the inverse error function evaluated at Z.</returns>
        </member>
        <member name="T:dnAnalytics.Mcmc.GlobalProposalSampler`1">
            <summary>
            A method which samples datapoints from a proposal distribution. The implementation of this sampler
            is stateless: no variables are saved between two calls to Sample. This proposal is different from
            <seealso cref="T:dnAnalytics.Mcmc.LocalProposalSampler`1"/> in that it doesn't take any parameters; it samples random
            variables from the whole domain.
            </summary>
            <typeparam name="T">The type of the datapoints.</typeparam>
            <returns>A sample from the proposal distribution.</returns>
        </member>
        <member name="T:dnAnalytics.Mcmc.LocalProposalSampler`1">
            <summary>
            A method which samples datapoints from a proposal distribution given an initial sample. The implementation 
            of this sampler is stateless: no variables are saved between two calls to Sample. This proposal is different from
            <seealso cref="T:dnAnalytics.Mcmc.GlobalProposalSampler`1"/> in that it samples locally around an initial point. In other words, it
            makes a small local move rather than producing a global sample from the proposal.
            </summary>
            <typeparam name="T">The type of the datapoints.</typeparam>
            <param name="init">The initial sample.</param>
            <returns>A sample from the proposal distribution.</returns>
        </member>
        <member name="T:dnAnalytics.Mcmc.Density`1">
            <summary>
            A function which evaluates a density.
            </summary>
            <typeparam name="T">The type of data the distribution is over.</typeparam>
            <param name="sample">The sample we want to evaluate the density for.</param>
        </member>
        <member name="T:dnAnalytics.Mcmc.DensityLn`1">
            <summary>
            A function which evaluates a log density.
            </summary>
            <typeparam name="T">The type of data the distribution is over.</typeparam>
            <param name="sample">The sample we want to evaluate the log density for.</param>
        </member>
        <member name="T:dnAnalytics.Mcmc.TransitionKernelLn`1">
            <summary>
            A function which evaluates the log of a transition kernel probability.
            </summary>
            <typeparam name="T">The type for the space over which this transition kernel is defined.</typeparam>
            <param name="to">The new state in the transition.</param>
            <param name="from">The previous state in the transition.</param>
            <returns>The log probability of the transition.</returns>
        </member>
        <member name="T:dnAnalytics.Mcmc.McmcSampler`1">
            <summary>
            The interface which every sampler must implement.
            </summary>
            <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:dnAnalytics.Mcmc.McmcSampler`1.mRandomNumberGenerator">
            <summary>
            The random number generator for this class.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.McmcSampler`1.mAccepts">
            <summary>
            Keeps track of the number of accepted samples.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.McmcSampler`1.mSamples">
            <summary>
            Keeps track of the number of calls to the proposal sampler.
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.McmcSampler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.AbstractRandomNumberGenerator"/> class.
            </summary>
            <remarks>Thread safe instances are two and half times slower than non-thread
            safe classes.</remarks>
        </member>
        <member name="M:dnAnalytics.Mcmc.McmcSampler`1.Sample">
            <summary>
            Returns one sample.
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.McmcSampler`1.Sample(System.Int32)">
            <summary>
            Returns a number of samples.
            </summary>
            <param name="n">The number of samples we want.</param>
            <returns>An array of samples.</returns>
        </member>
        <member name="P:dnAnalytics.Mcmc.McmcSampler`1.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <exception cref="T:System.ArgumentNullException">When the random number generator is null.</exception>
        </member>
        <member name="P:dnAnalytics.Mcmc.McmcSampler`1.AcceptanceRate">
            <summary>
            Gets the acceptance rate of the sampler.
            </summary>
        </member>
        <member name="T:dnAnalytics.Mcmc.MetropolisHastingsSampler`1">
            <summary>
            Metropolis-Hastings sampling produces samples from distribition P by sampling from a proposal distribution Q
            and accepting/rejecting based on the density of P. Metropolis-Hastings sampling doesn't require that the
            proposal distribution Q is symmetric in comparison to <seealso cref="T:dnAnalytics.Mcmc.MetropolisSampler`1"/>. It does need to
            be able to evaluate the proposal sampler's log density though. All densities are required to be in log space.
            
            The Metropolis-Hastings sampler is a stateful sampler. It keeps track of where it currently is in the domain
            of the distribution P.
            </summary>
            <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.mPdfLnP">
            <summary>
            Evaluates the log density function of the target distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.mKrnlQ">
            <summary>
            Evaluates the log transition probability for the proposal distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.mProposal">
            <summary>
            A function which samples from a proposal distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.mCurrent">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.mCurrentDensityLn">
            <summary>
            The log density at the current location.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.mBurnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.#ctor(`0,dnAnalytics.Mcmc.DensityLn{`0},dnAnalytics.Mcmc.TransitionKernelLn{`0},dnAnalytics.Mcmc.LocalProposalSampler{`0})">
            <summary>
            Constructs a new Metropolis-Hastings sampler using the default <see cref="T:System.Random"/> random 
            number generator. The burn interval will be set to 0.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="krnlQ">The log transition probability for the proposal distribution.</param>
            <param name="proposal">A method that samples from the proposal distribution.</param>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.#ctor(`0,dnAnalytics.Mcmc.DensityLn{`0},dnAnalytics.Mcmc.TransitionKernelLn{`0},dnAnalytics.Mcmc.LocalProposalSampler{`0},System.Int32)">
            <summary>
            Constructs a new Metropolis-Hastings sampler using the default <see cref="T:System.Random"/> random number generator. This
            constructor will set the burn interval.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="krnlQ">The log transition probability for the proposal distribution.</param>
            <param name="proposal">A method that samples from the proposal distribution.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="P:dnAnalytics.Mcmc.MetropolisHastingsSampler`1.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <member name="T:dnAnalytics.Mcmc.MetropolisSampler`1">
            <summary>
            Metropolis sampling produces samples from distribition P by sampling from a proposal distribution Q
            and accepting/rejecting based on the density of P. Metropolis sampling requires that the proposal
            distribution Q is symmetric. All densities are required to be in log space.
            
            The Metropolis sampler is a stateful sampler. It keeps track of where it currently is in the domain
            of the distribution P.
            </summary>
            <typeparam name="T">The type of samples this sampler produces.</typeparam>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisSampler`1.mPdfLnP">
            <summary>
            Evaluates the log density function of the sampling distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisSampler`1.mProposal">
            <summary>
            A function which samples from a proposal distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisSampler`1.mCurrent">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisSampler`1.mCurrentDensityLn">
            <summary>
            The log density at the current location.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.MetropolisSampler`1.mBurnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisSampler`1.#ctor(`0,dnAnalytics.Mcmc.DensityLn{`0},dnAnalytics.Mcmc.LocalProposalSampler{`0})">
            <summary>
            Constructs a new Metropolis sampler using the default <see cref="T:System.Random"/> random 
            number generator. The burnInterval interval will be set to 0.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="proposal">A method that samples from the symmetric proposal distribution.</param>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisSampler`1.#ctor(`0,dnAnalytics.Mcmc.DensityLn{`0},dnAnalytics.Mcmc.LocalProposalSampler{`0},System.Int32)">
            <summary>
            Constructs a new Metropolis sampler using the default <see cref="T:System.Random"/> random number generator.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The log density of the distribution we want to sample from.</param>
            <param name="proposal">A method that samples from the symmetric proposal distribution.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisSampler`1.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.MetropolisSampler`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="P:dnAnalytics.Mcmc.MetropolisSampler`1.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:dnAnalytics.Mcmc.RejectionSampler`1" -->
        <member name="F:dnAnalytics.Mcmc.RejectionSampler`1.mPdfP">
            <summary>
            Evaluates the density function of the sampling distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.RejectionSampler`1.mPdfQ">
            <summary>
            Evaluates the density function of the proposal distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.RejectionSampler`1.mProposal">
            <summary>
            A function which samples from a proposal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.RejectionSampler`1.#ctor(dnAnalytics.Mcmc.Density{`0},dnAnalytics.Mcmc.Density{`0},dnAnalytics.Mcmc.GlobalProposalSampler{`0})">
            <summary>
            Constructs a new rejection sampler using the default <see cref="T:System.Random"/> random number generator.
            </summary>
            <param name="pdfP">The density of the distribution we want to sample from.</param>
            <param name="pdfQ">The density of the proposal distribution.</param>
            <param name="proposal">A method that samples from the proposal distribution.</param>
        </member>
        <member name="M:dnAnalytics.Mcmc.RejectionSampler`1.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the algorithms detects that the proposal
            distribution doesn't upper bound the target distribution.</exception>
        </member>
        <member name="T:dnAnalytics.Mcmc.UnivariateSliceSampler">
            <summary>
            Slice sampling produces samples from distribition P by uniformly sampling from under the pdf of P using
            a technique described in "Slice Sampling", R. Neal, 2003. All densities are required to be in log space.
            
            The slice sampler is a stateful sampler. It keeps track of where it currently is in the domain
            of the distribution P.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.UnivariateSliceSampler.mPdfLnP">
            <summary>
            Evaluates the log density function of the target distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.UnivariateSliceSampler.mCurrent">
            <summary>
            The current location of the sampler.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.UnivariateSliceSampler.mCurrentDensityLn">
            <summary>
            The log density at the current location.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.UnivariateSliceSampler.mBurnInterval">
            <summary>
            The number of burn iterations between two samples.
            </summary>
        </member>
        <member name="F:dnAnalytics.Mcmc.UnivariateSliceSampler.mScale">
            <summary>
            The scale of the slice sampler.
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.UnivariateSliceSampler.#ctor(System.Double,dnAnalytics.Mcmc.DensityLn{System.Double},System.Double)">
            <summary>
            Constructs a new Slice sampler using the default <see cref="T:System.Random"/> random 
            number generator. The burn interval will be set to 0.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The density of the distribution we want to sample from.</param>
            <param name="scale">The scale factor of the slice sampler.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the scale of the slice sampler is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.Mcmc.UnivariateSliceSampler.#ctor(System.Double,dnAnalytics.Mcmc.DensityLn{System.Double},System.Int32,System.Double)">
            <summary>
            Constructs a new slice sampler using the default <see cref="T:System.Random"/> random number generator. It 
            will set the number of burnInterval iterations and run a burnInterval phase.
            </summary>
            <param name="x0">The initial sample.</param>
            <param name="pdfLnP">The density of the distribution we want to sample from.</param>
            <param name="burnInterval">The number of iterations in between returning samples.</param>
            <param name="scale">The scale factor of the slice sampler.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When the number of burnInterval iteration is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When the scale of the slice sampler is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.Mcmc.UnivariateSliceSampler.Burn(System.Int32)">
            <summary>
            This method runs the sampler for a number of iterations without returning a sample
            </summary>
        </member>
        <member name="M:dnAnalytics.Mcmc.UnivariateSliceSampler.Sample">
            <summary>
            Returns a sample from the distribution P.
            </summary>
        </member>
        <member name="P:dnAnalytics.Mcmc.UnivariateSliceSampler.BurnInterval">
            <summary>
            Gets or sets the number of iterations in between returning samples.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When burn interval is negative.</exception>
        </member>
        <member name="P:dnAnalytics.Mcmc.UnivariateSliceSampler.Scale">
            <summary>
            Gets or sets the scale of the slice sampler.
            </summary>
        </member>
        <member name="T:dnAnalytics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ArrayParameterNotConformable">
            <summary>
              Looks up a localized string similar to The input array does not have the correct dimension(s)..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.CalculateIncompleteGamma">
            <summary>
              Looks up a localized string similar to Unable to calculate Incomplete Gamma..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.CollectionEmpty">
            <summary>
              Looks up a localized string similar to The supplied collection is empty..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ComplexNotSupported">
            <summary>
              Looks up a localized string similar to Complex numbers are not supported..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.EmptyOrNull">
            <summary>
              Looks up a localized string similar to String parameter cannot be empty or null..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.FileDoesNotExist">
            <summary>
              Looks up a localized string similar to File doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.InvalidQualifierCombination">
            <summary>
              Looks up a localized string similar to Invalid qualifier combination, pattern data type is not valid with array format..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.MinValueGreaterThanMaxValue">
            <summary>
              Looks up a localized string similar to minValue is greater than maxValue..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.MoreThan2D">
            <summary>
              Looks up a localized string similar to More than two dimensions is not supported..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NameCannotContainASpace">
            <summary>
              Looks up a localized string similar to Name cannot contain a space. name: {0}.
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NotMatrixMarketFile">
            <summary>
              Looks up a localized string similar to Not a Matrix Market file..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NotPositive">
            <summary>
              Looks up a localized string similar to The value must be positive..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NotProperHeader">
            <summary>
              Looks up a localized string similar to Not a properly formatted header..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NotProperlyFormattedMatrixMarketFile">
            <summary>
              Looks up a localized string similar to Not a properly formatted Matrix Market file, incorrect format specifier..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NotSqurare">
            <summary>
              Looks up a localized string similar to The matrix must be a square matrix..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NullAction">
            <summary>
              Looks up a localized string similar to One of the actions is null..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.NullParameterException">
            <summary>
              Looks up a localized string similar to Parameter cannot be null..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ParameterCannotBeNegative">
            <summary>
              Looks up a localized string similar to Cannot be negative..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ParameterNotConformable">
            <summary>
              Looks up a localized string similar to The parameter doesn&apos;t conform to this object..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ParametersNotConformable">
            <summary>
              Looks up a localized string similar to Parameters do not conform..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ProposalDistributionNoUpperBound">
            <summary>
              Looks up a localized string similar to Proposal distribution doesn&apos;t upper bound unnormalized sampling distribution..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.RandomNumberGeneratorCannotBeNull">
            <summary>
              Looks up a localized string similar to Cannot set the random number generator to null..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ResultMatrixIncorrectDimensions">
            <summary>
              Looks up a localized string similar to The result matrix does not have the correct dimensions..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.RowsLessThanColumns">
            <summary>
              Looks up a localized string similar to The number of rows cannot be less than the number of columns..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.SingularVectorsNotComputed">
            <summary>
              Looks up a localized string similar to The singular vectors were not computed..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.StandardDeviationCannotBeNegative">
            <summary>
              Looks up a localized string similar to Standard deviation cannot be negative..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.UpperMustBeAtleastAsLargeAsLower">
            <summary>
              Looks up a localized string similar to Upper must be at least as large as lower..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ZeroInfinityRange">
            <summary>
              Looks up a localized string similar to Distribution parameter should be in the range [0.0, infinity]..
            </summary>
        </member>
        <member name="P:dnAnalytics.Properties.Resources.ZeroOneRange">
            <summary>
              Looks up a localized string similar to Distribution parameter should be in the range [0.0, 1.0]..
            </summary>
        </member>
        <member name="T:dnAnalytics.Random.AbstractRandomNumberGenerator">
            <summary>
            Abstract class from random number generators.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.AbstractRandomNumberGenerator"/> class using
            the value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to set whether
            the instance is thread safe or not.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.AbstractRandomNumberGenerator"/> class.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
            <remarks>Thread safe instances are two and half times slower than non-thread
            safe classes.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.NextDouble(System.Int32)">
            <summary>
            Returns an array of uniformly distributed random doubles in the interval [0.0,1.0].
            </summary>
            <param name="n">The size of the array.</param>
            <returns>
            An array of uniformly distributed random doubles in the interval [0.0,1.0].
            </returns>
            <exception cref="T:System.ArgumentException">if n is not greater than 0.</exception>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>. </exception>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.Sample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:dnAnalytics.Random.AbstractRandomNumberGenerator.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:dnAnalytics.Random.Mcg31m1">
            <summary>
            Multiplicative congruential generator using a modulus of 2^31-1 and a multiplier of 1132489760.
            </summary>
            <summary>
            Multiplicative congruential generator using a modulus of 2^31-1 and a multiplier of 1132489760.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mcg31m1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mcg31m1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.Mcg31m1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg31m1"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.Mcg31m1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg31m1"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.Mcg31m1.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mcg31m1.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:dnAnalytics.Random.Mcg59">
            <summary>
            Multiplicative congruential generator using a modulus of 2^59 and a multiplier of 13^13.
            </summary>
            <summary>
            Multiplicative congruential generator using a modulus of 2^59 and a multiplier of 13^13.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mcg59.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg59"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mcg59.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg59"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.Mcg59.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg59"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.Mcg59.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg59"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.Mcg59.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mcg59.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:dnAnalytics.Random.MersenneTwister">
            <summary>
            Random number generator using Mersenne Twister 19937 algorithm.
            </summary>
            <summary>
            Random number generator using Mersenne Twister 19937 algorithm.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.MersenneTwister.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.MersenneTwister"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.MersenneTwister.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.MersenneTwister"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.MersenneTwister.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.MersenneTwister"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>Uses the value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>        
        </member>
        <member name="M:dnAnalytics.Random.MersenneTwister.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.MersenneTwister"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.MersenneTwister.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:dnAnalytics.Random.MersenneTwister.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:dnAnalytics.Random.Mrg32k3a">
            <summary>
            A 32-bit combined multiple recursive generator with 2 components of order 3.
            </summary>
             <summary>
             A 32-bit combined multiple recursive generator with 2 components of order 3.
             </summary>
            <remarks>Based off of P. L'Ecuyer, "Combined Multiple Recursive Random Number Generators," Operations Research, 44, 5 (1996), 816--822. </remarks>
        </member>
        <member name="M:dnAnalytics.Random.Mrg32k3a.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.Mrg32k3a.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mcg31m1"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.Mrg32k3a.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mrg32k3a"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.Mrg32k3a.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.Mrg32k3a"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <param name="threadSafe">if set to <c>true</c>, the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.Mrg32k3a.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.Mrg32k3a.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:dnAnalytics.Random.SystemCryptoRandomNumberGenerator">
            <summary>
            A random number generator based on the <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> class in the .NET library.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.SystemCryptoRandomNumberGenerator.#ctor">
            <summary>
            Construct a new random number generator with a random seed.
            </summary>
            <remarks>Uses <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> and uses the value of 
            <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="rng">The <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to use.</param>
            <remarks>Uses the value of  <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <remarks>Uses <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/></remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.SystemCryptoRandomNumberGenerator.#ctor(System.Security.Cryptography.RandomNumberGenerator,System.Boolean)">
            <summary>
            Construct a new random number generator with random seed.
            </summary>
            <param name="rng">The <see cref="T:System.Security.Cryptography.RandomNumberGenerator"/> to use.</param>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.SystemCryptoRandomNumberGenerator.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:dnAnalytics.Random.ThreadSafeRandomNumberGenerator.NextDouble(System.Int32)">
            <summary>
            Returns an array of uniformly distributed random doubles in the interval [0.0,1.0].
            </summary>
            <param name="n">The size of the array.</param>
            <returns>
            An array of uniformly distributed random doubles in the interval [0.0,1.0].
            </returns>
            <exception cref="T:System.ArgumentException">if n is not greater than 0.</exception>
        </member>
        <member name="M:dnAnalytics.Random.ThreadSafeRandomNumberGenerator.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>. </exception>
        </member>
        <member name="M:dnAnalytics.Random.ThreadSafeRandomNumberGenerator.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
        </member>
        <member name="M:dnAnalytics.Random.ThreadSafeRandomNumberGenerator.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="T:dnAnalytics.Random.WH1982">
             <summary>
             Wichmann-Hill’s 1982 combined multiplicative congruential generator. 
             </summary>
             <remarks>See: Wichmann, B. A. &amp; Hill, I. D. (1982), "Algorithm AS 183:
             An efficient and portable pseudo-random number generator". Applied Statistics 31 (1982) 188-190
            </remarks>
        </member>
        <member name="M:dnAnalytics.Random.WH1982.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH1982"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.WH1982.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH1982"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.WH1982.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH1982"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.WH1982.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH1982"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.WH1982.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:dnAnalytics.Random.WH2006">
            <summary>
            Wichmann-Hill’s 2006 combined multiplicative congruential generator. 
            </summary>
            <remarks>See: Wichmann, B. A. &amp; Hill, I. D. (2006), "Generating good pseudo-random numbers".
            Computational Statistics &amp; Data Analysis 51:3 (2006) 1614-1622
            </remarks>
        </member>
        <member name="M:dnAnalytics.Random.WH2006.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH2006"/> class using
            the current time as the seed.
            </summary>
        </member>
        <member name="M:dnAnalytics.Random.WH2006.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH2006"/> class using
            the current time as the seed.
            </summary>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.WH2006.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH2006"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>If the seed value is zero, it is set to one. Uses the
            value of <see cref="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators"/> to
            set whether the instance is thread safe.</remarks>
        </member>
        <member name="M:dnAnalytics.Random.WH2006.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Random.WH2006"/> class.
            </summary>
            <param name="seed">The seed value.</param>
            <remarks>The seed is set to 1, if the zero is used as the seed.</remarks>
            <param name="threadSafe">if set to <c>true</c> , the class is thread safe.</param>
        </member>
        <member name="M:dnAnalytics.Random.WH2006.DoSample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Bernoulli">
            <summary>
            The Bernoulli distribution is a distribution over bits. The parameter
            p specifies the probability that a 1 is generated.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Bernoulli.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.IDiscreteDistribution">
            <summary>
            A discrete distribution that can be sampled.
            </summary>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.IDistribution">
            <summary>
            A distribution that can be sampled.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDistribution.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDistribution.Mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDistribution.Variance">
            <summary>
            The variance of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDistribution.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDistribution.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.IDiscreteDistribution.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.IDiscreteDistribution.Sample">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <returns>A random number from the distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.IDiscreteDistribution.Sample(System.Int32)">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <param name="size">The size of the sample.</param>
            <returns>An array of random numbers from the distribution.</returns>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDiscreteDistribution.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IDiscreteDistribution.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.Bernoulli.mProbOne">
            <summary>
            The probability of generating a one.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.#ctor(System.Double)">
            <summary>
            Construct a new Bernoulli distribution.
            </summary>
            <param name="p">The probability of generating 1.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in [0,1].</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.Sample">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.Sample(System.Int32)">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.CumulativeDistribution(System.Int32)">
            <summary>
            Computes the cumulative distribution function.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.Sample(System.Random,System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability of generating a 1.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Bernoulli.Sample(System.Random,System.Int32,System.Double)">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="p">The probability of generating a 1.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.Mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.Variance">
            <summary>
            The variance of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Bernoulli.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Beta">
            <summary>
            The Beta distribution is a distribution over the interval [0,1]. It is parameterized by
            two real number a,b &gt;= 0.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Beta.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.IContinuousDistribution">
            <summary>
            A  continuous distribution that can be sampled.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.IContinuousDistribution.Density(System.Double)">
            <summary>
            Computes values of the probability density function.
            </summary>
            <param name="x">The location in the domain where we want to evaluate the probability density function.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.IContinuousDistribution.Sample">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <returns>A random number from the distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.IContinuousDistribution.Sample(System.Int32)">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <param name="size">The size of the sample.</param>
            <returns>An array of random numbers from the distribution.</returns>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IContinuousDistribution.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.IContinuousDistribution.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Beta distribution.
            </summary>
            <param name="a">The first parameter of the Beta distribution.</param>
            <param name="b">The second parameter of the Beta distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the Beta parameters are negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.Density(System.Double)">
            <summary>
            Evaluates the probability density function for a the Beta distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.Sample">
            <summary>
            Samples a Beta distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.Sample(System.Int32)">
            <summary>
            Samples an array of Beta distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a Beta distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The first parameter of the Beta distribution.</param>
            <param name="b">The second parameter of the Beta distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Beta.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Beta distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="a">The first parameter of the Beta distribution.</param>
            <param name="b">The second parameter of the Beta distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.A">
            <summary>
            The first parameter of the Beta distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.B">
            <summary>
            The second parameter of the Beta distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Beta.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Binomial">
            <summary>
            The binomial distribution is a distribution over integers parameterized by a count n and a probability p. It can be
            interpreted as the number of heads when drawing n coins with probability of head being p.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Binomial.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.#ctor(System.Double,System.Int32)">
            <summary>
            Construct a new Binomial distribution.
            </summary>
            <param name="p">The probability of a heads.</param>
            <param name="n">The number of coin flips.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If p is not in [0,1] and n is not &gt; 0.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.Sample">
            <summary>
            Samples a Binomial distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.Sample(System.Int32)">
            <summary>
            Samples an array of Binomial distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a Binomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability of generating heads.</param>
            <param name="n">The number of coins to flip.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Binomial.Sample(System.Random,System.Int32,System.Double,System.Int32)">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="m">The number of variables needed.</param>
            <param name="p">The probability of generating heads.</param>
            <param name="n">The number of coins to flip.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.Mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.Variance">
            <summary>
            The variance of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Binomial.Median">
            <summary>
            The median of the distribution.
            </summary>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Cauchy">
            <summary>
            The Cauchy distribution is a symmetric continuous probability distribution.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Cauchy.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Cauchy distribution.
            </summary>
            <param name="location">The location parameter for the distribution.</param>
            <param name="scale">The scale parameter for the distribution.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="stddev"/> is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.Density(System.Double)">
            <summary>
            Evaluates the probability density function for a Cauchy distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.Sample(System.Int32)">
            <summary>
            Samples an array of Cauchy distributed random variables.
            </summary>
            <param name="size">The number of variables needed.</param>
            <returns>An array of random numbers from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.CheckParameters(System.Double)">
            <summary>
            Checks the parameters of a Cauchy distribution.
            </summary>
            <param name="scale">The scale of a cauchy distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the scale is not positive.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the Cauchy distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.InverseCumulativeDistribution(System.Double)">
            <summary>
            Evaluates the inverse cumulative distribution function for the Cauchy distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a Cauchy distributed random variable using the Inverse CDF method.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location of the Cauchy distribution.</param>
            <param name="scale">The scale of the Cauchy distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Cauchy.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Cauchy distributed random variables using the Inverse CDF method.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="location">The location of the Cauchy distribution.</param>
            <param name="scale">The scale of the Cauchy distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.Scale">
            <summary>
            Gets the scale of the distribution.
            </summary>
            <value>The scale of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
            <value>The standard deviation of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Cauchy.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.ContinuousUniform">
            <summary>
            The continuous uniform distribution is a distribution over real numbers. The distribution
            is parameterized by a lower and upper bound.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.ContinuousUniform.mLower">
            <summary>
            The distribution's lower bound.
            </summary>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.ContinuousUniform.mUpper">
            <summary>
            The distribution's upper bound.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.#ctor">
            <summary>
            Construct a new uniform distribution between 0 and 1.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new uniform distribution with given lower and upper bounds.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the lower bound.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.Density(System.Double)">
            <summary>
            Computes values of the probability density function.
            </summary>
            <param name="x">The location in the domain where we want to evaluate the probability density function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.Sample">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.Sample(System.Int32)">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ContinuousUniform.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ContinuousUniform.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson">
            <summary>
            The Conway-Maxwell-Poisson distribution is a generalization of the Poisson, Geometric and Bernoulli
            distributions. It is parameterized by two real numbers "lambda" and "nu". For
                nu = 0 the distribution reverts to a Geometric distribution,
                nu = 1 the distribution reverts to the Poisson distribution,
                nu -&gt; infinity the distribution converges to a Bernoulli distribution.
            
            This implementation will cache the value of the normalization constant.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.mTolerance">
            <summary>
            Since many properties of the distribution can only be computed approximately, the tolerance
            level specifies how much error we accept.
            </summary>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.mZ">
            <summary>
            Caches the value of the normalization constant.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.#ctor(System.Double,System.Double)">
            <summary>
            Build a new Conway-Maxwell-Poisson distribution.
            </summary>
            <param name="lambda">The lambda parameter.</param>
            <param name="nu">The nu parameter.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Sample">
            <summary>
            Samples a Conway-Maxwell-Poisson distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Sample(System.Int32)">
            <summary>
            Samples an array of Conway-Maxwell-Poisson distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a Conway-Maxwell-Poisson distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda parameter for the CMP distribution.</param>
            <param name="nu">The nu parameter for the CMP distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Conway-Maxwell-Poisson distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="lambda">The lambda parameter for the CMP distribution.</param>
            <param name="nu">The nu parameter for the CMP distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Normalization(System.Double,System.Double)">
            <summary>
            Computes an approximate normalization constant for the CMP distribution.
            </summary>
            <param name="lambda">The lambda parameter for the CMP distribution.</param>
            <param name="nu">The nu parameter for the CMP distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.FromLogRatios(System.Int32[],System.Double[])">
            <summary>
            Estimate a new Conway-Maxwell-Poisson distribution by performing a regression on the log probability ratios. The inputs
            to this method should be sorted by ascending x.
            </summary>
            <param name="x">The indices for the counts.</param>
            <param name="counts">An array of counts.</param>
            <returns>A Conway-Maxwell-Poisson distribution with estimated parameters.</returns>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Lambda">
            <summary>
            Gets the lambda parameter.
            </summary>
            <value>The value of the lambda parameter.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Nu">
            <summary>
            Gets the Nu parameter.
            </summary>
            <value>The value of the Nu parameter.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Z">
            <summary>
            The normalization constant of the Conway-Maxwell-Poisson distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.ConwayMaxwellPoisson.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Delta">
            <summary>
            The Delta distribution is a distribution over the real numbers that peaks at one
            particular value.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Delta.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.#ctor(System.Double)">
            <summary>
            Constructs a standard normal (mean = 0, standard deviation = 1).
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.CheckParameters(System.Double)">
            <summary>
            Checks the parameters of a delta distribution.
            </summary>
            <param name="loc">The location of the delta peak.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the delta peak is NaN.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.Density(System.Double)">
            <summary>
            Evaluates the probability density function for a the normal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.Sample">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.Sample(System.Int32)">
            <summary>
            Samples an array of normal distributed random variables.
            </summary>
            <param name="size">The number of variables needed.</param>
            <returns>An array of random numbers from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Delta.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the delta distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
            <value>The standard deviation of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Delta.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Dirichlet">
            <summary>
            The Dirichlet distribution is a distribution over probability vectors. It is parameterized by a vector of
            non-negative numbers.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Dirichlet.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Dirichlet.#ctor(System.Double[])">
            <summary>
            Constructs a new Dirichlet distribution.
            </summary>
            <param name="alpha">An array with the Dirichlet parameters.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Dirichlet.#ctor(System.Double,System.Int32)">
            <summary>
            Constructs a new symmetric Dirichlet distribution.
            </summary>
            <param name="alpha">The value of each parameter of the Dirichlet distribution.</param>
            <param name="k">The dimension of the Dirichlet distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Dirichlet.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Dirichlet.CheckParameters(System.Double[])">
            <summary>
            Check the parameters of the distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the components in the Dirichlet parameter vector are negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Dirichlet.Sample">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Dirichlet.Sample(System.Random,System.Double[])">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The Dirichlet distribution parameter.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Dirichlet.Dimension">
            <summary>
            The dimension of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Dirichlet.Alpha">
            <summary>
            The parameters of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Dirichlet.AlphaSum">
            <summary>
            The sum of all alpha parameters.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Dirichlet.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Dirichlet.Variance">
            <summary>
            Gets the variance.
            </summary>
            <value>The variance.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Dirichlet.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.DiscreteUniform">
            <summary>
            The discrete uniform distribution is a distribution over integers. The distribution
            is parameterized by a lower and upper bound (both inclusive).
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.DiscreteUniform.mLower">
            <summary>
            The distribution's lower bound.
            </summary>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.DiscreteUniform.mUpper">
            <summary>
            The distribution's upper bound.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a new discrete uniform distribution.
            </summary>
            <param name="lower">Lower bound.</param>
            <param name="upper">Upper bound; must be at least as large as <paramref name="lower"/>.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.Sample">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.Sample(System.Int32)">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.Sample(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.DiscreteUniform.Sample(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="lower">The lower bound of the uniform random variable.</param>
            <param name="upper">The upper bound of the uniform random variable.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.DiscreteUniform.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Exponential">
            <summary>
            The exponential distribution is a distribution over the real numbers parameterized by one non-negative parameter.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Exponential.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.Distributions.Exponential"/> class.
            </summary>
            <param name="lambda">The lambda parameter.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.Density(System.Double)">
            <summary>
            Computes values of the probability density function.
            </summary>
            <param name="x">The location in the domain where we want to evaluate the probability density function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.Sample">
            <summary>
            Samples an exponentially distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.Sample(System.Int32)">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <param name="size">The size of the sample.</param>
            <returns>
            An array of random numbers from the distribution.
            </returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the exponential distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.Sample(System.Random,System.Double)">
            <summary>
            Samples an exponentially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The exponential distribution parameter.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Exponential.Sample(System.Random,System.Int32,System.Double)">
            <summary>
            Samples an exponentially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="size">The size of the sample to draw.</param>
            <param name="lambda">The exponential distribution parameter.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Exponential.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Gamma">
            <summary>
            The Gamma distribution is a distribution over the positive real numbers. It is parameterized by a shape
            parameter a &gt; 0 and an inverse scale parameter b &gt; 0. The pdf is
            
                p(x) = \frac{b^a}{\Gamma(a)} x^{a-1} \exp{-bx}.
            
            The following degenerate case is special: when the precision is known, the precision shape will encode
            the value of the precision while the precision inverse scale is positive infinity.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Gamma.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Gamma distribution.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.Density(System.Double)">
            <summary>
            Evaluates the probability density function for the Gamma distribution.
            </summary>
            <param name="x">The location in the domain where we want to evaluate the probability density function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.Sample">
            <summary>
            Samples a Gamma distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.Sample(System.Int32)">
            <summary>
            Samples an array of Gamma distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the Gamma distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.DensityLn(System.Double)">
            <summary>
            Evaluates the logarithm of the probability density function.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.SampleGamma(System.Random,System.Double,System.Double)">
            <summary>
            Sampling implementation based on:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a Gamma distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Gamma distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.CheckParameters(System.Double,System.Double)">
            <summary>
            Check the parameters of the Gamma distribution.
            </summary>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the Gamma parameters are non-positive.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Gamma.DoSample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Gamma distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="shape">The shape of the Gamma distribution.</param>
            <param name="invScale">The inverse scale of the Gamma distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Shape">
            <summary>
            The shape parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Scale">
            <summary>
            The scale parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.InvScale">
            <summary>
            The inverse scale parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Gamma.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Geometric">
            <summary>
            The Geometric distribution is a distribution over positive integers parameterized by one positive real number.
            This implementation of the Geometric distribution will never generate 0's.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Geometric.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.Distributions.Geometric"/> class.
            </summary>
            <param name="p">The p parameter.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.Probability(System.Int32)">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.Sample">
            <summary>
            Samples a Geometric distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.Sample(System.Int32)">
            <summary>
            Samples an array of Geometric distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.CumulativeDistribution(System.Int32)">
            <summary>
            Computes the cumulative distribution function.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.CheckParameters(System.Double)">
            <summary>
            Check the parameters of the Geometric distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameter is not in [0,1].</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.Sample(System.Random,System.Double)">
            <summary>
            Samples a Geometric distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The parameter of the Geometric distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Geometric.Sample(System.Random,System.Int32,System.Double)">
            <summary>
            Samples an array of Geometric distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="p">The parameter of the Geometric distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Geometric.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.InverseGamma">
            <summary>
            The inverse Gamma distribution is a distribution over the positive real numbers parameterized by
            two positive parameters.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.InverseGamma.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.#ctor(System.Double,System.Double)">
            <summary>
            Constructs an inverse Gamma distribution.
            </summary>
            <param name="a">The first parameter of the inverse Gamma distribution.</param>
            <param name="b">The second parameter of the inverse Gamma distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.Density(System.Double)">
            <summary>
            Computes values of the probability density function.
            </summary>
            <param name="x">The location in the domain where we want to evaluate the probability density function.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.Sample">
            <summary>
            Samples an Inverse Gamma distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.Sample(System.Int32)">
            <summary>
            Samples an array of inverse Gamma distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the Gamma distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.DensityLn(System.Double)">
            <summary>
            Evaluates the logarithm of the probability density function.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples an InverseGamma distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The first parameter of the Gamma distribution.</param>
            <param name="b">The second parameter of the Gamma distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of InverseGamma distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="a">The first parameter of the InverseGamma distribution.</param>
            <param name="b">The second parameter of the InverseGamma distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseGamma.CheckParameters(System.Double,System.Double)">
            <summary>
            Check the parameters of the inverse Gamma distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the inverse Gamma parameters are non-positive.</exception>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.A">
            <summary>
            The shape parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.B">
            <summary>
            The scale parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseGamma.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.InverseWishart">
            <summary>
            This class implements functionality for the inverse Wishart distribution. This distribution is
            parameterized by the degrees of freedom nu and the scale matrix S. The inverse Wishart distribution
            is the conjugate prior for the covariance matrix of a multivariate normal distribution.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.InverseWishart.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.#ctor(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Construct a new inverse Wishart distribution.
            </summary>
            <param name="nu">The degrees of freedom for the inverse Wishart distribution.</param>
            <param name="S">The scale matrix for the inverse Wishart distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.CheckParameters(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Checks the parameters of the inverse Wishart distribution.
            </summary>
            <param name="nu">The degrees of freedom for the inverse Wishart distribution.</param>
            <param name="S">The scale matrix for the inverse Wishart distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the degrees of freedom parameter is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the scale parameter is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.CheckParameters(System.Double,dnAnalytics.LinearAlgebra.Decomposition.Cholesky)">
            <summary>
            Checks the parameters of the inverse Wishart distribution.
            </summary>
            <param name="nu">The degrees of freedom for the inverse Wishart distribution.</param>
            <param name="chol">The cholesky factorization of the scale matrix for the inverse Wishart distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the degrees of freedom parameter is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the scale parameter is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.Sample">
            <summary>
            Samples an inverse Wishart distributed random variable by sampling
            a Wishart random variable and inverting the matrix.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.Sample(System.Random,System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Samples an inverse Wishart distributed random variable by sampling
            a Wishart random variable and inverting the matrix.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="nu">The degrees of freedom.</param>
            <param name="S">The scale matrix.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.InverseWishart.Density(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Evaluates the probability density function for the inverse Wishart distribution.
            </summary>
            <param name="X">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the same dimensions as the scale matrix.</exception>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseWishart.Nu">
            <summary>
            The degrees of freedom for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseWishart.S">
            <summary>
            The scale matrix for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseWishart.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.InverseWishart.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Laplace">
            <summary>
            The Laplace distribution is a distribution over the real numbers parameterized by a mean and
            scale parameter. The pdf is
            
                p(x) = \frac{1}{2 * scale} \exp{- |x - mean| / scale}.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Laplace.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.#ctor">
            <summary>
            Constructs a standard Laplace (mean = 0, scale = 1).
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Laplace distribution.
            </summary>
            <param name="mean">The mean for the normal distribution.</param>
            <param name="scale">The scale for the Laplace distribution.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.Density(System.Double)">
            <summary>
            Evaluates the probability density function for a the normal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.Sample">
            <summary>
            Samples a Laplace distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.Sample(System.Int32)">
            <summary>
            Samples an array of Laplace distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.CheckParameters(System.Double)">
            <summary>
            Check the parameters of the distribution.
            </summary>
            <param name="scale">The scale of the Laplace distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the scale parameter is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the Laplace distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.InverseCumulativeDistribution(System.Double)">
            <summary>
            Evaluates the inverse cumulative distribution function for the Laplace distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a Laplace distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the Laplace distribution.</param>
            <param name="scale">The scale of the Laplace distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Laplace distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="mean">The mean of the Laplace distribution.</param>
            <param name="scale">The scale of the Laplace distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Laplace.DoSample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of Laplace distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="mean">The mean of the Laplace distribution.</param>
            <param name="scale">The scale of the Laplace distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Laplace.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.MatrixNormal">
            <summary>
            This class implements functionality for matrix valued normal distributions. The distribution
            is parameterized by a mean matrix (M), a covariance matrix for the rows (V) and a covariance matrix
            for the columns (K). If the dimension of M is d-by-m then V is d-by-d and K is m-by-m.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.MatrixNormal.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.MatrixNormal.#ctor(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs a matrix normal distribution with specific mean and covariance matrices.
            </summary>
            <param name="M">The mean of the matrix normal.</param>
            <param name="V">The covariance matrix for the rows.</param>
            <param name="K">The covariance matrix for the columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensions of the mean and two covariance matrices don't match.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.MatrixNormal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.MatrixNormal.Sample">
            <summary>
            Samples a matrix normal distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.MatrixNormal.Sample(System.Random,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Samples a matrix normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="M">The mean of the matrix normal.</param>
            <param name="V">The covariance matrix for the rows.</param>
            <param name="K">The covariance matrix for the columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensions of the mean and two covariance matrices don't match.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.MatrixNormal.Density(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Evaluates the probability density function for the matrix normal distribution.
            </summary>
            <param name="X">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the correct dimensions.</exception>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MatrixNormal.Rows">
            <summary>
            The row dimensionality of the matrix normal distributed variable.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MatrixNormal.Columns">
            <summary>
            The columns dimensionality of the matrix normal distributed variable.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MatrixNormal.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MatrixNormal.RowCovariance">
            <summary>
            Gets the row covariance.
            </summary>
            <value>The row covariance.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MatrixNormal.ColumnCovariance">
            <summary>
            Gets the column covariance.
            </summary>
            <value>The column covariance.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MatrixNormal.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Multinomial">
            <summary>
            The multinomial distribution is a distribution over arrays of integers. The distribution is parameterized by
            a vector of probabilities. In dnAnalytics, the multinomial distribution is parameterized by an array of
            nonnegative numbers. This array does not need to be normalized (as this is often impossible using floating
            point arithmetic).
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Multinomial.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.#ctor(System.Double[])">
            <summary>
            Constructs a multinomial distribution.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.#ctor(dnAnalytics.Statistics.Histogram)">
            <summary>
            Generate a multinomial distribution from histogram <paramref name="h"/>. The distribution will
            not be automatically updated when the histogram changes.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.CheckParameters(System.Double[])">
            <summary>
            Check the parameters of the distribution.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.P(System.Boolean)">
            <summary>
            Returns the parameters of the multinomial distribution: this can be either an array of ratios or
            the actual normalized probabilities.
            </summary>
            <param name="normalized">Whether to normalize the parameters to (within floating point constraints) 1 or not.</param>
            <returns></returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.Sample">
            <summary>
            Samples one multinomial distributed random variable; sometimes known as the Multinoulli distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.Sample(System.Int32)">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.Sample(System.Random,System.Double[])">
            <summary>
            Samples one multinomial distributed random variable; sometimes known as the Multinoulli distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Multinomial.Sample(System.Random,System.Int32,System.Double[])">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized 
            as this is often impossible using floating point arithmetic.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Multinomial.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.NegativeBinomial">
            <summary>
            The negative binomial is a distribution over the natural numbers with two parameters r,p. For the special
            case that r is an integer one can interpret the distribution as the number of tails before the r'th head
            when the probability of head is p.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.#ctor(System.Double,System.Double)">
            <summary>
            Construct a new negative binomial distribution.
            </summary>
            <param name="r">The r parameter.</param>
            <param name="p">The p parameter.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.Sample">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.Sample(System.Int32)">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.CheckParameters(System.Double,System.Double)">
            <summary>
            Check the parameters of the distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If r is nonpositive or p is not in [0,1].</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The mean of the Laplace distribution.</param>
            <param name="p">The scale of the Laplace distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="r">The r parameter.</param>
            <param name="p">The p parameter.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NegativeBinomial.DoSample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="r">The r parameter.</param>
            <param name="p">The p parameter.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.R">
            <summary>
            The r parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.P">
            <summary>
            The p parameter.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.Mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.Variance">
            <summary>
            The variance of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.Mode">
            <summary>
            The mode of the distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NegativeBinomial.Skewnewss">
            <summary>
            The skewness of the distribution.
            </summary>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Normal">
            <summary>
            The Normal distribution is a distribution over the real numbers. The distribution
            is parameterized by a mean and standard deviation. The pdf is
            
                p(x) = \frac{1}{\sqrt{2 \pi} stddev} \exp{-0.5 (x - \mu)^2 / stddev^2}.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Normal.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.#ctor">
            <summary>
            Constructs a standard normal (mean = 0, standard deviation = 1).
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a normal distribution.
            </summary>
            <param name="mean">The mean for the normal distribution.</param>
            <param name="stddev">The standard deviation for the normal distribution.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="stddev"/> is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.Density(System.Double)">
            <summary>
            Evaluates the probability density function for a normal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.Sample">
            <summary>
            Samples draws a random sample for the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.Sample(System.Int32)">
            <summary>
            Samples an array of normal distributed random variables.
            </summary>
            <param name="size">The number of variables needed.</param>
            <returns>An array of random numbers from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.CheckParameters(System.Double)">
            <summary>
            Checks the parameters of a normal distribution.
            </summary>
            <param name="stddev">The standard deviation of the normal distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the standard deviation is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.CumulativeDistribution(System.Double)">
            <summary>
            Evaluates the cumulative distribution function for the normal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.InverseCumulativeDistribution(System.Double)">
            <summary>
            Evaluates the inverse cumulative distribution function for the normal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.SampleBoxMuller(System.Random,System.Double@)">
            <summary>
            Samples a pair of standard normal distributed random variables using the Box Muller transform.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r2">The second random number.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mu">The mean of the normal distribution.</param>
            <param name="sdev">The standard deviation of the normal distribution.</param>
            <!-- Failed to insert some or all of included XML --><include file="../../../../FSharpExamples/MultiVariateNormal.xml" path="example"/> 
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Normal.Sample(System.Random,System.Int32,System.Double,System.Double)">
            <summary>
            Samples an array of normal distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="mu">The mean of the normal distribution.</param>
            <param name="sdev">The standard deviation of the normal distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
            <value>The standard deviation of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Normal.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.MeanPrecisionPair">
            <summary>
            This structure represents the type over which the <see cref="T:dnAnalytics.Statistics.Distributions.NormalGamma"/> distribution
            is defined.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.MeanPrecisionPair.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new mean precision pair.
            </summary>
            <param name="m">The mean of the pair.</param>
            <param name="p">The precision of the pair.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MeanPrecisionPair.Mean">
            <summary>
            Gets/sets the mean of the pair.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.MeanPrecisionPair.Precision">
            <summary>
            Gets/sets the precision of the pair.
            </summary>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.NormalGamma">
            <summary>
            The NormalGamma distribution is the conjugate prior distribution for the <see cref="T:dnAnalytics.Statistics.Distributions.Normal"/>
            distribution. It specifies a prior over the mean and precision of the <see cref="T:dnAnalytics.Statistics.Distributions.Normal"/> distribution.
            
            It is parameterized by four numbers: the mean location, the mean scale, the precision shape and the
            precision inverse scale. The following degenerate cases are special: when the precision is known,
            the precision shape will encode the value of the precision while the precision inverse scale is positive
            infinity. When the mean is known, the mean location will encode the value of the mean while the scale
            will be 0. A completely degenerate NormalGamma distribution with known mean and precision is possible as well.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.NormalGamma.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a NormalGamma distribution.
            </summary>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.Density(dnAnalytics.Statistics.Distributions.MeanPrecisionPair)">
            <summary>
            Evaluates the probability density function for a NormalGamma distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.Density(System.Double,System.Double)">
            <summary>
            Evaluates the probability density function for a NormalGamma distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.DensityLn(dnAnalytics.Statistics.Distributions.MeanPrecisionPair)">
            <summary>
            Evaluates the log probability density function for a NormalGamma distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.DensityLn(System.Double,System.Double)">
            <summary>
            Evaluates the log probability density function for a NormalGamma distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.Sample">
            <summary>
            Samples a NormalGamma distributed random variable.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.Sample(System.Int32)">
            <summary>
            Samples an array of NormalGamma distributed random variables.
            </summary>
            <param name="size">The number of variables needed.</param>
            <returns>An array of random numbers from this distribution.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.CheckParameters(System.Double,System.Double,System.Double)">
            <summary>
            Checks the parameters of a NormalGamma distribution.
            </summary>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the mean scale is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the inverse precision scale is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the precision shape is negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Samples an array of NormalGamma distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.NormalGamma.Sample(System.Random,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Samples an array of NormalGamma distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.MeanLocation">
            <summary>
            Gets the location of the mean.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.MeanScale">
            <summary>
            Gets the scale of the mean.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.PrecisionShape">
            <summary>
            Gets the shape of the precision.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.PrecisionInverseScale">
            <summary>
            Gets the inverse scale of the precision.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.NormalGamma.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Permutation">
            <summary>
            A class which represents a random permutation.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Permutation.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.Permutation.mK">
            <summary>
            The upper bound of the permutation.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Permutation.#ctor(System.Int32)">
            <summary>
            Construct a new permutation with the range 0..k-1.
            </summary>
            <param name="k">Upper bound of the permutation range.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Permutation.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Permutation.CheckParameters(System.Int32)">
            <summary>
            Check the parameters of the distribution.
            </summary>
            <param name="k">The size of the permutation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If k is non-positive.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Permutation.Sample">
            <summary>
            Samples a random permutation of the numbers between 0 and k-1 inclusive.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Permutation.Sample(System.Random,System.Int32)">
            <summary>
            Samples a random permutation of the numbers between 0 and k-1 inclusive.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="k">The end of the range of the permutation (exclusive).</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Permutation.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Poisson">
            <summary>
            The Poisson distribution is a distribution over the integers parameterized by one real number.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Poisson.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.Distributions.Poisson"/> class.
            </summary>
            <param name="lambda">The mean of the distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.Probability(System.Int32)">
            <summary>
            Computes the probability of a specific value.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.Sample">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.Sample(System.Int32)">
            <summary>
            Samples an array of Poisson distributed random variables.
            </summary>
            <param name="n">The number of variables needed.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.CheckParameters(System.Double)">
            <summary>
            Check the parameter of the Poisson distribution.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameter is non-negative.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.Sample(System.Random,System.Double)">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The mean of the Poisson distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.Sample(System.Random,System.Int32,System.Double)">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="lambda">The mean of the Poisson distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.DoSample(System.Random,System.Double)">
            <summary>
            Use Knuth's method to generate Poisson distributed random variables.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Poisson.DoSample(System.Random,System.Int32,System.Double)">
            <summary>
            Samples an array of Poisson distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of variables needed.</param>
            <param name="lambda">The mean of the Poisson distribution.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.Lambda">
            <summary>
            Gets the lambda (mean) value of the distribution.
            </summary>
            <value>The lambda value.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.Mean">
            <summary>
            The mean of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.StdDev">
            <summary>
            The standard deviation of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.Variance">
            <summary>
            The variance of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.Entropy">
            <summary>
            The entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.Mode">
            <summary>
            The mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Poisson.Median">
            <summary>
            The median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.VectorNormal">
            <summary>
            This class implements functionality for the multivariate normal distribution. This distribution
            is parameterized by a mean vector and a covariance matrix.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.VectorNormal.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.VectorNormal.mMean">
            <summary>
            The mean of the vector normal distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.VectorNormal.mCovariance">
            <summary>
            The covariance matrix of the vector normal distribution.
            </summary>
        </member>
        <member name="F:dnAnalytics.Statistics.Distributions.VectorNormal.mCholesky">
            <summary>
            The cached Cholesky factorization of the covariance matrix.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.#ctor(System.Int32)">
            <summary>
            Constructs a zero mean vector normal distribution with an identity covariance matrix.
            </summary>
            <param name="d">The dimension of the vector normal distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.#ctor(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Constructs a vector normal distribution with specific mean and covariance matrices.
            </summary>
            <param name="mean">The mean of the vector normal.</param>
            <param name="covariance">The covariance of the vector normal distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.CheckParameters(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Checks the parameters of the vector normal distribution.
            </summary>
            <param name="mean">The mean of the vector normal.</param>
            <param name="covariance">The covariance of the vector normal distribution.</param>
            <exception cref="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">If the covariance matrix is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.CheckParameters(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Decomposition.Cholesky)">
            <summary>
            Checks the parameters of the vector normal distribution.
            </summary>
            <param name="mean">The mean of the vector normal.</param>
            <param name="chol">The Cholesky factorization of the covariance matrix.</param>
            <exception cref="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">If the covariance matrix is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.Density(dnAnalytics.LinearAlgebra.Vector)">
            <summary>
            Evaluates the probability density function for a the vector normal distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.Sample">
            <summary>
            Samples a vector normal distributed random variable.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.Sample(System.Random,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Decomposition.Cholesky)">
            <summary>
            Samples a vector normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="chol">The Cholesky factorization of the covariance matrix.</param>
            <exception cref="T:dnAnalytics.NotConformableException">If the number of rows or columns of the covariance matrix are not
            the same as the dimension of the mean vector.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.Sample(System.Random,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Samples a vector normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="covariance">The covariance matrix of the vector normal distribution.</param>
            <exception cref="T:dnAnalytics.NotConformableException">If the number of rows or columns of the covariance matrix are not
            the same as the dimension of the mean vector.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.Sample(System.Random,System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Decomposition.Cholesky)">
            <summary>
            Samples a set of vector normal distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of vectors that need to be drawn.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="chol">The Cholesky factorization of the covariance matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the number of rows or columns of the covariance matrix are not
            the same as the dimension of the mean vector.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.VectorNormal.Sample(System.Random,System.Int32,dnAnalytics.LinearAlgebra.Vector,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Samples a set of vector normal distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="n">The number of vectors that need to be drawn.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="covariance">The covariance matrix of the vector normal distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the number of rows or columns of the covariance matrix are not
            the same as the dimension of the mean vector.</exception>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.Dimension">
            <summary>
            The dimensionality of the vector normal distributed variable.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.Covariance">
            <summary>
            Gets the covariance.
            </summary>
            <value>The covariance.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.Mode">
            <summary>
            Gets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.Median">
            <summary>
            Gets the median.
            </summary>
            <value>The median.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.Entropy">
            <summary>
            Gets the entropy.
            </summary>
            <value>The entropy.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.VectorNormal.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Distributions.Wishart">
            <summary>
            This class implements functionality for the Wishart distribution. This distribution is
            parameterized by the degrees of freedom nu and the scale matrix S. The Wishart distribution
            is the conjugate prior for the precision (inverse covariance) matrix of the multivariate
            normal distribution.
            </summary>
            <remarks>The distribution will use the <see cref="T:System.Random"/> by default. 
            Users can set the random number generator by using the <see cref="P:dnAnalytics.Statistics.Distributions.Wishart.RandomNumberGenerator"/> property.
            
            The statistics classes will check all the incoming parameters whether they are in the allowed
            range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to false, all parameter checks can be turned off.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.#ctor(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Construct a new Wishart distribution.
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="S">The scale matrix for the Wishart distribution.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.CheckParameters(System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Checks the parameters of a Wishart distribution.
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="S">The scale matrix for the Wishart distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the degrees of freedom parameter is negative.</exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">If the scale parameter is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.CheckParameters(System.Double,dnAnalytics.LinearAlgebra.Decomposition.Cholesky)">
            <summary>
            Checks the parameters of a Wishart distribution.
            </summary>
            <param name="nu">The degrees of freedom for the Wishart distribution.</param>
            <param name="chol">The cholesky factorization of the scale matrix for the Wishart distribution.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the degrees of freedom parameter is negative.</exception>
            <exception cref="T:dnAnalytics.LinearAlgebra.NotPositiveDefiniteException">If the scale parameter is not positive definite.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.Density(dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Evaluates the probability density function for the Wishart distribution.
            </summary>
            <param name="X">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the same dimensions as the scale matrix.</exception>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.Sample">
            <summary>
            Samples a Wishart distributed random variable using the method
                Algorithm AS 53: Wishart Variate Generator
                W. B. Smith and R. R. Hocking
                Applied Statistics, Vol. 21, No. 3 (1972), pp. 341-345
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Distributions.Wishart.Sample(System.Random,System.Double,dnAnalytics.LinearAlgebra.Matrix)">
            <summary>
            Samples a Wishart distributed random variable using the method
                Algorithm AS 53: Wishart Variate Generator
                W. B. Smith and R. R. Hocking
                Applied Statistics, Vol. 21, No. 3 (1972), pp. 341-345
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="nu">The degrees of freedom.</param>
            <param name="S">The scale matrix.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Wishart.Nu">
            <summary>
            The degrees of freedom for the Wishart distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Wishart.S">
            <summary>
            The scale matrix for the Wishart distribution.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Wishart.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Wishart.Mode">
            <summary>
            Gets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.Distributions.Wishart.RandomNumberGenerator">
            <summary>
            Gets or sets the random number generator.
            </summary>
            <value>The random number generator used to generate a random sample.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Correlation">
            <summary>
            A class with correlation measures between two datasets.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Correlation.Pearson(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the Pearson product-moment correlation coefficient.
            </summary>
            <param name="dataA">Sample data A.</param>
            <param name="dataB">Sample data B.</param>
            <returns>The Pearson product-moment correlation coefficient.</returns>
        </member>
        <member name="T:dnAnalytics.Statistics.DescriptiveStatistics">
            <summary>
            Computes the basic statistics of data set. The class meets the
            NIST standard of accuracy for mean, variance, and standard deviation
            (the only statistics they provide exact values for) and exceeds them 
            in increased accuracy mode.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The sample data.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.DescriptiveStatistics"/> class.
            </summary>
            <param name="data">The sample data.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.DescriptiveStatistics"/> class. 
            </summary>
            <param name="data">The sample data.</param>
            <param name="increasedAccuracy">if set to <c>true</c>, increased accuracy mode used.
            Increased accuracy mode uses <see cref="T:System.Decimal"/> types for internal calculations.</param>
            <remarks>Don't use increased accuracy for data sets containing large values (in absolute value).
             This may cause the calculations to overflow.</remarks>
        </member>
        <member name="M:dnAnalytics.Statistics.DescriptiveStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:dnAnalytics.Statistics.DescriptiveStatistics"/> class. 
            </summary>
            <param name="data">The sample data.</param>
            <param name="increasedAccuracy">if set to <c>true</c>, increased accuracy mode used.
            Increased accuracy mode uses <see cref="T:System.Decimal"/> types for internal calculations.</param>
            <remarks>Don't use increased accuracy for data sets containing large values (in absolute value).
             This may cause the calculations to overflow.</remarks>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Count">
            <summary>
            Gets the size of the sample.
            </summary>
            <value>The size of the sample.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Mean">
            <summary>
            Gets the sample mean.
            </summary>
            <value>The sample mean.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Variance">
            <summary>
            Gets the sample variance.
            </summary>
            <value>The sample variance.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.StandardDeviation">
            <summary>
            Gets the sample standard deviation.
            </summary>
            <value>The sample standard deviation.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Skewness">
            <summary>
            Gets the sample skewness.
            </summary>
            <value>The sample skewness.</value>
            <remarks>Returns zero if <see cref="P:dnAnalytics.Statistics.DescriptiveStatistics.Count"/> is less than three. </remarks>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Median">
            <summary>
            Gets the sample median.
            </summary>
            <value>The sample median.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Kurtosis">
            <summary>
            Gets the sample kurtosis.
            </summary>
            <value>The sample kurtosis.</value>
            <remarks>Returns zero if <see cref="P:dnAnalytics.Statistics.DescriptiveStatistics.Count"/> is less than four. </remarks>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Maximum">
            <summary>
            Gets the maximum sample value.
            </summary>
            <value>The maximum sample value.</value>
        </member>
        <member name="P:dnAnalytics.Statistics.DescriptiveStatistics.Minimum">
            <summary>
            Gets the minimum sample value.
            </summary>
            <value>The minimum sample value.</value>
        </member>
        <member name="T:dnAnalytics.Statistics.Histogram">
            <summary>
            Computes a histogram of a particular data set. The histogram is represented by bin counts. A datapoint that
            happens to land on a boundary bin will be put in the larger of the two bins, except if it equals the histogram
            upper bound.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Constructs a Histogram specifying the number of bins exactly. The upper and lower bound of the histogram
            will be set to the smallest and larger datapoint.
            </summary>
            <param name="data">The datasequence to build a histogram on.</param>
            <param name="nbins">The number of bins to use.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Histogram.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Double,System.Double)">
            <summary>
            Constructs a Histogram specifying the number of bins exactly.
            </summary>
            <param name="data">The datasequence to build a histogram on.</param>
            <param name="nbins">The number of bins to use.</param>
            <param name="lower">The histogram lower bound.</param>
            <param name="upper">The histogram upper bound.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Histogram.Increment(System.Int32,System.Double)">
            <summary>
            Increment a bin count by a specified amount.
            </summary>
            <param name="bidx">The bin index.</param>
            <param name="val">The amount to increment the bin count with.</param>
        </member>
        <member name="M:dnAnalytics.Statistics.Histogram.FindBin(System.Double)">
            <summary>
            Computes the bin index for datapoint <paramref name="x"/>.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Histogram.Update(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add data to the histogram bins.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Histogram.BinCount">
            <summary>
            The number of bins in the histogram.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Histogram.Item(System.Int32)">
            <summary>
            Returns the number of elements in a histogram bin.
            </summary>
            <param name="b">The bin index.</param>
        </member>
        <member name="P:dnAnalytics.Statistics.Histogram.LowerBound">
            <summary>
            Returns the lower bound of the histogram.
            </summary>
        </member>
        <member name="P:dnAnalytics.Statistics.Histogram.UpperBound">
            <summary>
            Returns the upper bound of the histogram.
            </summary>
        </member>
        <member name="T:dnAnalytics.Statistics.Statistics">
            <summary>
            Extension methods to return basic statistics on set of data.
            </summary>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sample mean.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Mean(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the sample mean.
            </summary>
            <param name="data">The data to calculate the mean of.</param>
            <returns>The mean of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sample median.
            </summary>
            <param name="data">The data to calculate the median of.</param>
            <returns>The median of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Median(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the sample median.
            </summary>
            <param name="data">The data to calculate the median of.</param>
            <returns>The median of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sample variance.
            </summary>
            <param name="data">The data to calculate the variance of.</param>
            <returns>The variance of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the sample variance.
            </summary>
            <param name="data">The data to calculate the variance of.</param>
            <returns>The variance of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the sample standard deviation.
            </summary>
            <param name="data">The data to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Calculates the sample standard deviation.
            </summary>
            <param name="data">The data to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sample.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Minimum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The minimum value in the sample data.</returns>
        </member>
        <member name="M:dnAnalytics.Statistics.Statistics.Maximum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in the sample data.
            </summary>
            <param name="data">The sample data.</param>
            <returns>The maximum value in the sample data.</returns>
        </member>
        <member name="T:dnAnalytics.Threading.Action`1">
            <summary>
            Encapsulates a method that takes a single parameter and does not return a value. 
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="obj">The parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:dnAnalytics.Threading.AggregateException">
            <summary>
            Represents multiple errors that occur during application execution.
            </summary>
        </member>
        <member name="M:dnAnalytics.Threading.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Initializes a new instance of the AggregateException class with a specified error message and references to the inner exceptions that are the cause of this exception.
            </summary>
            <param name="exceptions">The exceptions that are the cause of the current exception.</param>
        </member>
        <member name="P:dnAnalytics.Threading.AggregateException.InnerExceptions">
            <summary>
            Gets a read-only collection of the Exception instances that caused the current exception. 
            </summary>
            <value>A read-only collection of the Exception instances that caused the current exception</value>
        </member>
        <member name="T:dnAnalytics.Threading.Parallel">
            <summary>
            Provides support for parallel loops. 
            </summary>
        </member>
        <member name="M:dnAnalytics.Threading.Parallel.For(System.Int32,System.Int32,dnAnalytics.Threading.Action{System.Int32})">
            <summary>
            Executes a for loop in which iterations may run in parallel. 
            </summary>
            <param name="fromInclusive">The start index, inclusive.</param>
            <param name="toExclusive">The end index, exclusive.</param>
            <param name="body">The body to be invoked for each iteration.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="body"/> argument is null.</exception>
            <exception cref="T:dnAnalytics.Threading.AggregateException">At least one invocation of the body threw an exception.</exception>
        </member>
        <member name="M:dnAnalytics.Threading.Parallel.Invoke(System.Action[])">
            <summary>
            Executes each of the provided actions inside a discrete, asynchronous task. 
            </summary>
            <param name="actions">An array of actions to execute.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actions"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException">The actions array contains a null element.</exception>
            <exception cref="T:dnAnalytics.Threading.AggregateException">An action threw an exception.</exception>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._maximumQueueLength">
            <summary>
            Maximum number of jobs that can be in the queue at the same time. 
            </summary>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._stateSync">
            <summary>
            Sync Object for the thread queue state.
            </summary>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._queueSync">
            <summary>
            Sync Object for queue access (to be sure it's used by us only).
            </summary>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._tasksAvailableSemaphore">
            <summary>
            Counting Semaphore to make the worker thread wait for jobs
            </summary>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._queue">
            <summary>
            Queue holding the pending jobs.
            </summary>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._running">
            <summary>
            Running flag, used to signal worker threads to stop cleanly.
            </summary>
        </member>
        <member name="F:dnAnalytics.Threading.ThreadQueue._threads">
            <summary>
            Worker threads
            </summary>
        </member>
        <member name="M:dnAnalytics.Threading.ThreadQueue.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="M:dnAnalytics.Threading.ThreadQueue.Enqueue(dnAnalytics.Threading.Task)">
            <summary>
            Add a job to the queue.
            </summary>
            <param name="task">The job to run.</param>
        </member>
        <member name="M:dnAnalytics.Threading.ThreadQueue.Enqueue(System.Collections.Generic.IList{dnAnalytics.Threading.Task})">
            <summary>
            Add a set of jobs to the queue.
            </summary>
            <param name="tasks">The jobs to run.</param>
        </member>
        <member name="M:dnAnalytics.Threading.ThreadQueue.WorkerThreadStart">
            <summary>
            Worker Thread Program
            </summary>
        </member>
        <member name="P:dnAnalytics.Threading.ThreadQueue.ThreadCount">
            <summary>
            Number of worked threads.
            </summary>
        </member>
        <member name="T:dnAnalytics.MapAction">
            <summary>
            Specifies the type of functions that can be used with <see cref="T:dnAnalytics.Apply"/>.
            </summary>
        </member>
        <member name="T:dnAnalytics.Apply">
            <summary>
            Extension methods that apply a function to each element of a list, vector, or matrix. 
            The function is applied in a parallel.  The default number of threads used is equal to
            the number of CPU cores.  This can be overridden by <see cref="P:dnAnalytics.Control.ThreadCount"/>.
            </summary>
        </member>
        <member name="M:dnAnalytics.Apply.Map(System.Collections.Generic.IList{System.Double},dnAnalytics.MapAction)">
            <summary>
            Applies the given <see cref="T:dnAnalytics.MapAction"/> to each element of the <paramref name="list"/>.
            </summary>
            <param name="list">The list to apply the function to.</param>
            <param name="action">The function to apply.</param>
        </member>
        <member name="M:dnAnalytics.Apply.Pow(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Raises each element to the given <paramref name="power"/>.
            </summary>
            <param name="list">The list to apply power function to.</param>
            <param name="power">The power to raise each element to.</param>
        </member>
        <member name="M:dnAnalytics.Apply.Pow(dnAnalytics.LinearAlgebra.Vector,System.Double)">
            <summary>
            Raises each element to the given <paramref name="power"/>.
            </summary>
            <param name="vector">The list to apply power function to.</param>
            <param name="power">The power to raise each element to.</param>
        </member>
        <member name="M:dnAnalytics.Apply.Pow(dnAnalytics.LinearAlgebra.Matrix,System.Double)">
            <summary>
            Raises each element to the given <paramref name="power"/>.
            </summary>
            <param name="matrix">The list to apply power function to.</param>
            <param name="power">The power to raise each element to.</param>
        </member>
        <member name="M:dnAnalytics.Apply.Map(dnAnalytics.LinearAlgebra.Vector,dnAnalytics.MapAction)">
            <summary>
            Applies the given <see cref="T:dnAnalytics.MapAction"/> to each element of the <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector to apply the function to.</param>
            <param name="action">The function to apply.</param>
        </member>
        <member name="M:dnAnalytics.Apply.Map(dnAnalytics.LinearAlgebra.Matrix,dnAnalytics.MapAction)">
            <summary>
            Applies the given <see cref="T:dnAnalytics.MapAction"/> to each element of the <paramref name="matrix"/>.
            </summary>
            <param name="matrix">The list to apply the function to.</param>
            <param name="action">The function to apply.</param>
        </member>
        <member name="F:dnAnalytics.Constants.DecimalsForComparison">
            <summary>
            Defines the number of decimals for floating point comparisons
            </summary>
        </member>
        <member name="F:dnAnalytics.Constants.UlpsForComparison">
            <summary>
            Defines the number of ULPs for floating point comparisons
            </summary>
        </member>
        <member name="T:dnAnalytics.Control">
            <summary>
            Sets parameters for the library.
            </summary>
            <summary>
            Sets parameters for the library.
            </summary>
        </member>
        <member name="P:dnAnalytics.Control.CheckDistributionParameters">
            <summary>
            If CheckDistributionParameters is set to true, the constructors and static sample methods of 
            the distribution classes will validate each parameter by checking that it is valid.
            For the multivariate distributions this could involve an expensive matrix factorization.
            
            The default setting of this property is true.
            </summary>
        </member>
        <member name="P:dnAnalytics.Control.ThreadSafeRandomNumberGenerators">
            <summary>
            Gets or sets a value indicating whether to use thread safe random number generators (RNG).
            Thread safe RNG about two and half time slower than non-thread safe RNG. 
            </summary>
            <value>
            	<c>true</c> to use thread safe random number generators ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:dnAnalytics.Control.ThreadCount">
            <summary>The maximum number of threads to use.</summary>
            <value>Number of threads to use in parallel operations,</value>
            <exception cref="T:System.ArgumentException">If the number of threads is a nonpositive integer.</exception>
        </member>
        <member name="T:dnAnalytics.ConvergenceFailedException">
            <summary>
            An algorithm failed to converge.
            </summary>
        </member>
        <member name="M:dnAnalytics.ConvergenceFailedException.#ctor">
            <summary>Initializes a new instance of the <strong>ConvergenceFailedException</strong> class.</summary>
        </member>
        <member name="M:dnAnalytics.ConvergenceFailedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <strong>ConvergenceFailedException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.ConvergenceFailedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>ConvergenceFailedException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.ConvergenceFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <strong>ConvergenceFailedException</strong> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:dnAnalytics.dnAnalyticsArgumentException">
            <summary>
            Extends the base dnAnalytics exception to specify which parameter caused the exception.
            </summary>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.#ctor">
            <summary>Initializes a new instance of the <strong>dnAnalyticsArgumentException</strong> class.</summary>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.#ctor(System.String)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsArgumentException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsArgumentException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsArgumentException</strong> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsArgumentException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="parameter">The parameter that caused the exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>dnAnalyticsArgumentException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="parameter">The parameter that caused the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.dnAnalyticsArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data</param>.
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:dnAnalytics.dnAnalyticsArgumentException.Message">
            <summary>
            A text string describing the details of the exception. If the parameter name is give, it will 
            be prefixed to the message.
            </summary>
        </member>
        <member name="P:dnAnalytics.dnAnalyticsArgumentException.Parameter">
            <summary>
            The parameter that caused the exception.
            </summary>
        </member>
        <member name="T:dnAnalytics.NotConformableException">
            <summary>The exception is thrown when a <see cref="T:dnAnalytics.LinearAlgebra.Matrix"/> or <see cref="T:dnAnalytics.LinearAlgebra.Vector"/> with the wrong dimensions is used.</summary>
        </member>
        <member name="M:dnAnalytics.NotConformableException.#ctor">
            <summary>Initializes a new instance of the <strong>NotConformableException</strong> class.</summary>
        </member>
        <member name="M:dnAnalytics.NotConformableException.#ctor(System.String)">
            <summary>Initializes a new instance of the <strong>NotConformableException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.NotConformableException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>NotConformableException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
        <member name="M:dnAnalytics.NotConformableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <strong>NotConformableException</strong> class with serialized data.</summary>
            <param name="info">The error message that explains the reason for the exception.</param>
            <param name="context">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:dnAnalytics.NotConformableException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <strong>NotConformableException</strong> class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="parameter">The parameter that caused the exception.</param>
        </member>
        <member name="M:dnAnalytics.NotConformableException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the <strong>NotConformableException</strong> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="parameter">The parameter that caused the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block 
            that handles the inner exception.</param>
        </member>
    </members>
</doc>
